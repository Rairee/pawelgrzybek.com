<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pawelgrzybek.com</title>
    <link>https://pawelgrzybek.com/</link>
    <description>Hi there, I&#39;m Pawel Grzybek, Front-end Developer from Poland. Nowadays I live in Leicester (UK). When I&#39;m not coding, I&#39;m spinning funky vinyl records.</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 18 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pawelgrzybek.com/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fetch most recent posts to your GitHub profile page using GitHub workflow and Node.js</title>
      <link>https://pawelgrzybek.com/fetch-most-recent-posts-to-your-github-profile-page-using-github-workflow-and-node-js/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/fetch-most-recent-posts-to-your-github-profile-page-using-github-workflow-and-node-js/</guid>
      <description>&lt;p&gt;GitHub workflow is a feature that lets us run actions on particular software development life cycle (SDLC) or a scheduled interval. Another cool feature of GitHub is a way to customise your public profile page using &lt;code&gt;README.md&lt;/code&gt; file inside repository named by your username. I combined these two features to display the most recent articles from my RSS feed on my GitHub public profile page.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-08-18-1.jpg&#34;
  alt=&#34;Most recent articles on GitHub profile public page&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;899&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;workflow-setup&#34;&gt;Workflow setup &lt;a href=&#34;#workflow-setup&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitHub workflows are sets of actions defined in &lt;code&gt;.yml&lt;/code&gt; file that run on a particular life cycle or at the scheduled interval. The workflow needs to be defined in &lt;code&gt;.github/workflows/&lt;/code&gt; directory. &lt;a href=&#34;https://docs.github.com/en/actions&#34;&gt;The documentation for GitHub workflows and actions&lt;/a&gt; is easy to understand and full of helpful tips. Let&amp;rsquo;s recap what we want to achieve and express it using GitHub workflow.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a workflow that runs every 6 hours (&lt;code&gt;&amp;quot;* */6 * * *&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Spin up an Ubuntu instance (&lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Check out the GitHub repository (&lt;code&gt;actions/checkout@v2&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Set up Node.js (&lt;code&gt;actions/setup-node@v2-beta&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Install node dependencies (&lt;code&gt;yarn&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Run custom Node.js script (&lt;code&gt;yarn build&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Commit changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fetch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;recent&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;blog&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;posts&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;schedule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;cron&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;* */6 * * *&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fetch-recent-blog-posts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fetch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;recent&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;blog&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;posts&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ubuntu-latest&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Check&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;out&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;repository&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions/checkout@v2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Setup&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;node&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions/setup-node@v2-beta&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;node-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;12&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;node&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dependencies&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;yarn&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Run&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;node&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;script&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;yarn&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;build&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;setup&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;config&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--global&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;user.email&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;readme-bot@example.com&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;config&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--global&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;user.name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;readme-bot&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;commit&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;README.md&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;diff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--quiet&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;diff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--staged&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--quiet&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;||&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;commit&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-am&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[BOT] Update readme&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fetch-rss-feed-using-nodejs-and-override-readmemd&#34;&gt;Fetch RSS feed using Node.js and override READMe.md &lt;a href=&#34;#fetch-rss-feed-using-nodejs-and-override-readmemd&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Assuming that you already created &lt;code&gt;README.md&lt;/code&gt; file in your repository, we need to decide how to put dynamic content into it. I achieved it by placing custom comments inside the file and the dynamically generated content will be placed between them. Have a look at the example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# Hi y&amp;#39;all 👋
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
Some cool text about me.

&lt;span class=&#34;gu&#34;&gt;## Recent blog posts
&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- FEED-START --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- FEED-END --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s review the list of operations that need to be performed and let&amp;rsquo;s express that using Node.js script.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch RSS feed from my blog.&lt;/li&gt;
&lt;li&gt;Convert it to JSON.&lt;/li&gt;
&lt;li&gt;Create a list of 5 most recent posts.&lt;/li&gt;
&lt;li&gt;Place list between the custom comments.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-fetch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xml2json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FEED_URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://pawelgrzybek.com/feed.xml&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;TAG_OPEN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&amp;lt;!-- FEED-START --&amp;gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;TAG_CLOSE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&amp;lt;!-- FEED-END --&amp;gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetchArticles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FEED_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articlesText&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articlesJSON&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toJson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;articlesText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newC&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;articlesJSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`- [&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;)`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readme&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readFileSync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./README.md&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;indexBefore&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TAG_OPEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;TAG_OPEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;indexAfter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TAG_CLOSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readmeContentChunkBreakBefore&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;indexBefore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readmeContentChunkBreakAfter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexAfter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;posts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetchArticles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readmeNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readmeContentChunkBreakBefore&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;posts&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readmeContentChunkBreakAfter&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writeFileSync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./README.md&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readmeNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Look, ECMAScript modules! YOLO 😜&lt;/p&gt;
&lt;h2 id=&#34;do-it-and-share-it&#34;&gt;Do it and share it! &lt;a href=&#34;#do-it-and-share-it&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully you like this simple idea for a quick GitHub workflow. Feel free to check the &lt;a href=&#34;https://github.com/pawelgrzybek/pawelgrzybek/&#34;&gt;source code&lt;/a&gt; for the live example implemented on this post. The code above isn&amp;rsquo;t perfect so please don&amp;rsquo;t leave comments like &amp;ldquo;Eh dude, you should use XYZ for this one&amp;rdquo;. It works and it is all that&amp;rsquo;s needed. Have a great day and keep on coding 👩‍💻👨‍💻&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple SSH keys for multiple Bitbucket/GitHub accounts</title>
      <link>https://pawelgrzybek.com/multiple-ssh-keys-for-multiple-bitbucket-github-accounts/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/multiple-ssh-keys-for-multiple-bitbucket-github-accounts/</guid>
      <description>&lt;p&gt;I recently joined a new project whereby a version control repository is hosted on &lt;a href=&#34;https://bitbucket.org&#34;&gt;Bitucket&lt;/a&gt;. It is time to create an account, clone the repo and smash some code! Not that easy — this is what I got when I tried to add my public SSH key to newly created account.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Someone has already added that SSH key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s right, I had this key already added under my personal account. Luckily the solution is simple and it applies the same, not only to Bitbucket, but also to other popular version control hosting services like &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt; or &lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-08-10-1.jpg&#34;
  alt=&#34;&amp;amp;ldquo;Key is already in use&amp;amp;rdquo; alert on GitHub&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#generate-multiple-ssh-keys&#34;&gt;Generate multiple SSH keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-new-keys-to-ssh-agent&#34;&gt;Add new keys to SSH agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-public-keys-to-individual-bitbucket-accounts&#34;&gt;Add public keys to individual Bitbucket accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configure-ssh&#34;&gt;Configure SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#change-the-upstream-url-of-already-existing-repository&#34;&gt;Change the upstream URL of already existing repository&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;generate-multiple-ssh-keys&#34;&gt;Generate multiple SSH keys &lt;a href=&#34;#generate-multiple-ssh-keys&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If we can’t use the same SSH key across multiple accounts (what makes perfect sense) the solution is to have multiple. Let’s create two new pairs of SSH keys, one for personal use and the other one for the clients project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;personal@email.com&amp;quot; -f id_rsa
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in ~/.ssh/id_rsa.
Your public key has been saved in ~/.ssh/id_rsa.pub.
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;client@email.com&amp;quot; -f id_rsa-client
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in ~/.ssh/id_rsa-client.
Your public key has been saved in ~/.ssh/id_rsa-client.pub.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;add-new-keys-to-ssh-agent&#34;&gt;Add new keys to SSH agent &lt;a href=&#34;#add-new-keys-to-ssh-agent&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To make use of the newly created keys, we need to add them to &lt;code&gt;ssh-agent&lt;/code&gt;, a program that holds private keys used for public authentication. The &lt;code&gt;ssh-agent&lt;/code&gt; is probably running in the background of your operating system, but just in case lets turn it on and add new keys to it using &lt;code&gt;ssh-add&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval &amp;quot;$(ssh-agent -s)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;ssh-add -K id_rsa
ssh-add -K id_rsa-client
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;-K&lt;/code&gt; flag adds a new key to the macOS keychain. If you’re not using Apple’s operating system, please skip this flag. To confirm that both keys have been successfully added we can use &lt;code&gt;ssh-add -l&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4096 SHA256:XXXXXX personal@email.com (RSA)
4096 SHA256:XXXXXX client@email.com (RSA)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;add-public-keys-to-individual-bitbucket-accounts&#34;&gt;Add public keys to individual Bitbucket accounts &lt;a href=&#34;#add-public-keys-to-individual-bitbucket-accounts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Add the newly created public keys to individual Bitbucket account. To copy the content of a file to the clipboard, use the &lt;code&gt;pbcopy&lt;/code&gt; program.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub
pbcopy &amp;lt; ~/.ssh/id_rsa-client.pub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-08-10-2.jpg&#34;
  alt=&#34;Add SSH key to Bitbucket account&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1184&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;configure-ssh&#34;&gt;Configure SSH &lt;a href=&#34;#configure-ssh&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SSH config file is where the magic lies. We need to create a configuration file and create custom aliases that are going to enforce usage or particular key for particular host. Let’s do it!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch .ssh/config
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Host bitbucket-client.org
  HostName bitbucket.org
  User git
  IdentityFile ~/.ssh/id_rsa-client
  IdentitiesOnly yes

Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From now on, every time when you clone a repo from client’s account simply replace &lt;code&gt;bitbucket.com&lt;/code&gt; with &lt;code&gt;bitbucket-client.com&lt;/code&gt;. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;❌ git clone git@bitbucket.org:client/project.git
✅ git clone git@bitbucket-client.org:client/project.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By doing so, you are skipping a default public key resolution, and explicitly pointing your &lt;code&gt;ssh-agent&lt;/code&gt; to always resolve connection to &lt;code&gt;bitbucket-client.org&lt;/code&gt; using &lt;code&gt;~/.ssh/id_rsa-client&lt;/code&gt; key. Your default key is going to just work as it did before. Neat trick, isn’t it?&lt;/p&gt;
&lt;h2 id=&#34;change-the-upstream-url-of-already-existing-repository&#34;&gt;Change the upstream URL of already existing repository &lt;a href=&#34;#change-the-upstream-url-of-already-existing-repository&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You may be asking, what should you do with already existing repositories. Cloning all of them one by one doesn’t sound like fun. Not it’s not and there is a solution! To change a URL of currently existing repository use git remote set-url command. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote set-url origin git@bitbucket-client.org:client/project.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This solution solved my problem and served me well. I hope it’s going to help you out as well. Stay curious and keep on coding 👩‍💻👨‍💻&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: The Fast 800: How to Combine Rapid Weight Loss and Intermittent Fasting for Long-Term Health by Dr Michael Mosley</title>
      <link>https://pawelgrzybek.com/book-review-the-fast-800-how-to-combine-rapid-weight-loss-and-intermittent-fasting-for-long-term-health-by-dr-michael-mosley/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-the-fast-800-how-to-combine-rapid-weight-loss-and-intermittent-fasting-for-long-term-health-by-dr-michael-mosley/</guid>
      <description>&lt;p&gt;I like testing out things on my body and there probably won&amp;rsquo;t be a better time to do it right now during this global pandemic. I&amp;rsquo;ve tried out multiple diets which have given me various results, but intermittent fasting is something that I&amp;rsquo;ve heard around a lot but never actually tried. If I can drop a few kilos during this process, I won&amp;rsquo;t complain. I was browsing the Audible library recently and have been eager to spend my credit points on something informative. I came across &lt;a href=&#34;https://www.goodreads.com/book/show/43226870-the-fast-800&#34;&gt;&amp;ldquo;The Fast 800: How to Combine Rapid Weight Loss and Intermittent Fasting for Long-Term Health&amp;rdquo; by Dr Michael Mosley&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-08-06-1.jpg&#34;
  alt=&#34;The Fast 800: How to Combine Rapid Weight Loss and Intermittent Fasting for Long-Term Health by Dr Michael Mosley&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-08-06-2.jpg&#34;
  alt=&#34;The Fast 800: How to Combine Rapid Weight Loss and Intermittent Fasting for Long-Term Health by Dr Michael Mosley&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;The book is well researched, well written and well-read by the author (for Audible users). Even though the book is full of scientific researches it is surprisingly easy to follow even for a non-native speaker who isn&amp;rsquo;t familiar with medical terminology. A clear and concise way of conveying all the information to get into intermittent fasting. No boring life stories, no monotonous elaborations, just straight to the point. The second half of the paper copy or attached to the audiobook PDF is filled with inspiring 800 calories recipes 🥗&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Execute a shell command inside a Docker container (3 methods)</title>
      <link>https://pawelgrzybek.com/execute-a-shell-command-inside-a-docker-container-3-methods/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/execute-a-shell-command-inside-a-docker-container-3-methods/</guid>
      <description>&lt;p&gt;Running projects inside containers is a bread and butter task of a developers life. It’s not rare to need to execute a command against a container and Docker gives us multiple options to do so.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#execute-a-command-inside-a-new-container&#34;&gt;Execute a command inside a new container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#execute-a-command-inside-a-stopped-container&#34;&gt;Execute a command inside a stopped container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#execute-a-command-inside-a-running-container&#34;&gt;Execute a command inside a running container&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-08-02-1.jpg&#34;
  alt=&#34;Output of Docker info command&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;execute-a-command-inside-a-new-container&#34;&gt;Execute a command inside a new container &lt;a href=&#34;#execute-a-command-inside-a-new-container&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Often we want to run a command in an interactive mode inside a new, just instantiated container. Let&amp;rsquo;s create a new &lt;code&gt;server&lt;/code&gt; container based on the &lt;code&gt;nginx&lt;/code&gt; image, and run a &lt;code&gt;bash&lt;/code&gt; command after the container creation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker container run -it --name server nginx bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;execute-a-command-inside-a-stopped-container&#34;&gt;Execute a command inside a stopped container &lt;a href=&#34;#execute-a-command-inside-a-stopped-container&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Same thing but for the stopped container that already exists.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker container start server -at bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;execute-a-command-inside-a-running-container&#34;&gt;Execute a command inside a running container &lt;a href=&#34;#execute-a-command-inside-a-running-container&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What if the container is already running, we don&amp;rsquo;t want to interrupt its internal processes, but we really have to get into it to add a plugin or check some logs? The &lt;code&gt;exec&lt;/code&gt; command comes handy then.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker container exec -it server bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Quick copy/paste kinda article today. Hopefully, you found it helpful. Ciao!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2020 July</title>
      <link>https://pawelgrzybek.com/top-picks-2020-july/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2020-july/</guid>
      <description>&lt;h2 id=&#34;day-1-chrome-webdev-live-2020httpswwwyoutubecomplaylistlistplnykxof6rcidc0-biwsl52yq0n9rnozaf-day-2-chrome-webdev-live-2020httpswwwyoutubecomplaylistlistplnykxof6rcibhugsbo6t8-obe5-fvpe7k-day-3-chrome-webdev-live-2020httpswwwyoutubecomplaylistlistplnykxof6rcidjhocbzho38p6wtn3vesvq&#34;&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNYkxOF6rcIDC0-BiwSL52yQ0n9rNozaF&#34;&gt;Day 1: Chrome web.dev Live 2020&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/playlist?list=PLNYkxOF6rcIBhuGsbO6t8-OBE5-fVPe7K&#34;&gt;Day 2: Chrome web.dev Live 2020&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/playlist?list=PLNYkxOF6rcIDJHOcBzho38p6WTn3vESvQ&#34;&gt;Day 3: Chrome web.dev Live 2020&lt;/a&gt; &lt;a href=&#34;#day-1-chrome-webdev-live-2020httpswwwyoutubecomplaylistlistplnykxof6rcidc0-biwsl52yq0n9rnozaf-day-2-chrome-webdev-live-2020httpswwwyoutubecomplaylistlistplnykxof6rcibhugsbo6t8-obe5-fvpe7k-day-3-chrome-webdev-live-2020httpswwwyoutubecomplaylistlistplnykxof6rcidjhocbzho38p6wtn3vesvq&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dedicated playlists for Chrome web.dev conference. Pick and choose what interests you the most. I am pretty excited about some news announced at this event. My favourite one is the support for Firefox in Puppeteer.&lt;/p&gt;
&lt;h2 id=&#34;temporalhttpstc39esproposal-temporaldocsindexhtml&#34;&gt;&lt;a href=&#34;https://tc39.es/proposal-temporal/docs/index.html&#34;&gt;Temporal&lt;/a&gt; &lt;a href=&#34;#temporalhttpstc39esproposal-temporaldocsindexhtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Temporal&lt;/code&gt; is an ECMAScript proposal that is trying to solve a long-standing developers frustrations with &lt;code&gt;Date&lt;/code&gt;. With its promise of simple API and support for multiple zones and calendars, this looks like one of the most interesting proposals in years to me.&lt;/p&gt;
&lt;h2 id=&#34;svelte-3-typescripthttpssveltedevblogsvelte-and-typescript&#34;&gt;&lt;a href=&#34;https://svelte.dev/blog/svelte-and-typescript&#34;&gt;Svelte &amp;lt;3 TypeScript&lt;/a&gt; &lt;a href=&#34;#svelte-3-typescripthttpssveltedevblogsvelte-and-typescript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Svelte contributors take TypeScript popularity very seriously so they decided to enhance tooling to support TS as a first class citizen and maintain it all under the Svelte umbrella organization. No brainer for me, if I am going to look for the next framework to learn in the future, Svelte is on top of my list.&lt;/p&gt;
&lt;h2 id=&#34;the-aws-serverless-application-model-cli-is-now-generally-availablehttpsawsamazoncomblogscomputethe-aws-serverless-application-model-cli-is-now-generally-available&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/the-aws-serverless-application-model-cli-is-now-generally-available/&#34;&gt;The AWS Serverless Application Model CLI is now generally available&lt;/a&gt; &lt;a href=&#34;#the-aws-serverless-application-model-cli-is-now-generally-availablehttpsawsamazoncomblogscomputethe-aws-serverless-application-model-cli-is-now-generally-available&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The AWS Serverless Application Model (SAM) framework is a tool that I spend lats year and a half working with day in day out. It is good to see that this tool finally hits stable release 1.0.0 that comes with few new handy feature and official Docker images managed by AWS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The IP address, subnet mask and CIDR notation</title>
      <link>https://pawelgrzybek.com/the-ip-address-subnet-mask-and-cidr-notation/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/the-ip-address-subnet-mask-and-cidr-notation/</guid>
      <description>&lt;p&gt;The Internet is a big network of devices, each of them is identified by the unique IP address. They are not connected directly though. Subnetting is a process of dividing them into smaller subnetworks. Subnet mask helps us to determine which part of the IP address belongs to the network and which one belongs to us (host).&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-07-29-1.png&#34;
  alt=&#34;Subnetworks structure&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;888&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;This diagram represents a simple network of connected devices. It may be a switch on the corner of your street, yours and your neighbours wi-fi routers and a bunch of home devices connected to it.&lt;/p&gt;
&lt;h2 id=&#34;subnet-mask-network-and-host-identifier&#34;&gt;Subnet mask, network and host identifier &lt;a href=&#34;#subnet-mask-network-and-host-identifier&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just by looking at the picture above you may understand how subnet mask affects an IP address. To get a full understanding of it, lets convert the IP address &lt;code&gt;135.119.2.0&lt;/code&gt; and its mask &lt;code&gt;255.255.255.0&lt;/code&gt; to a numeral system that computers understand better, a binary system.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IP  : 135.119.2.0
Mask: 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;IP  : 10000111.01110111.00000010.00000000
Mask: 11111111.11111111.11111111.00000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, both of them are easily represented by 4 octets of binary digits. All the mask bits enabled (&lt;code&gt;1&lt;/code&gt;), lock the IP portion for the network and the remaining one is available for the host.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IP  : 10000111.01110111.00000010.00000000
Mask: 11111111.11111111.11111111.00000000
      |_________________________|_______|
                network            host
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cidr-notation&#34;&gt;CIDR notation &lt;a href=&#34;#cidr-notation&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The combination of the IP and subnet mask is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Classful_network&#34;&gt;classful network architecture&lt;/a&gt; that since 1993 is mostly replaced by &lt;a href=&#34;https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing&#34;&gt;Classless Inter-Domain Routing (CIDR) method&lt;/a&gt;. Let&amp;rsquo;s have a look at the IP and its subnet mask from the example above, and convert it to CIDR notation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IP  : 135.119.2.0
Mask: 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;IP  : 10000111.01110111.00000010.00000000
Mask: 11111111.11111111.11111111.00000000
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;CIDR: 135.119.2.0/24
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Look how simple! The IP address is followed by slash &lt;code&gt;/&lt;/code&gt; and by the number of starting bits enabled in a subnet mask. In this case, first 24 bits of the subnet mask are enabled, leaving for host the last octet.&lt;/p&gt;
&lt;h2 id=&#34;thats-it-for-today&#34;&gt;That&amp;rsquo;s it for today &lt;a href=&#34;#thats-it-for-today&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was wondering what the hell this slash &lt;code&gt;/24&lt;/code&gt; means next to the IP address on my home router configuration panel. I learned about it, so I shared it and now you know as well! Stay curious and share knowledge! Bye 👋&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Node.js Streams</title>
      <link>https://pawelgrzybek.com/understanding-nodejs-streams/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/understanding-nodejs-streams/</guid>
      <description>&lt;p&gt;The results of &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-other-frameworks-libraries-and-tools&#34;&gt;Stack Overflow Developer Survey 2020&lt;/a&gt; for the second year in a row proved the popularity of &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;. It also hit the top of the list of &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-other-frameworks-libraries-and-tools-wanted3&#34;&gt;the most wanted technologies&lt;/a&gt; to learn by programmers who are not using it. It’s an obvious choice for frontend developers who are keen to move their JavaScript knowledge to the server-side . Apart from all of the similarities to the language used on a browser, it comes with a few hard to understand concepts. A stream is one of them (at least it was for me).&lt;/p&gt;
&lt;p&gt;This article is for people who are familiar with JavaScript language, digging into Node.js, eager to understand streams. Knowledge from this article can easily be applied to &lt;a href=&#34;https://streams.spec.whatwg.org&#34;&gt;Streams API&lt;/a&gt; in your browser, although I am going to put my main focus on Node.js runtime. I promise that this subject won’t be confusing when your reach the end of this article.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-a-stream&#34;&gt;What is a stream?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stream-by-example&#34;&gt;Stream by example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#streams-composability-using-pipe-method&#34;&gt;Streams composability using pipe method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#types-of-streams&#34;&gt;Types of streams&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#readable-input-stream&#34;&gt;Readable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writable-output-stream&#34;&gt;Writable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#duplex&#34;&gt;Duplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transform&#34;&gt;Transform&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-is-a-stream&#34;&gt;What is a stream? &lt;a href=&#34;#what-is-a-stream&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Streams in nature flow water from one side to the other, streams in programming are the same but instead of water, they flow chunks of data. It is a sequential way of handling chunks of bytes. Instead of loading a large amount of data to the memory all at once, streams are much more memory and time-efficient as they allow us to process an individual chunk as soon as it arrives. Streams are very useful (and sometimes the only way) to work with large amounts of data.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-07-14-1.png&#34;
  alt=&#34;Node.js streams&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;600&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Apart from the implementation in Node.js, the concept of streams is present in many other programming languages like C++, Java and .NET. It’s used for things like reading from and writing to a file, network communications and any other information exchange.&lt;/p&gt;
&lt;p&gt;You can achieve a lot without using streams at all, but a thorough understanding of them will make you a much better developer. Often you will use them without even knowing that your favourite package heavily relies on them under the hood. A bunch of built-in modules in Node.js implement the streaming interface (&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;zlib&lt;/code&gt;, &lt;code&gt;crypto&lt;/code&gt; just to name a few).&lt;/p&gt;
&lt;h2 id=&#34;stream-by-example&#34;&gt;Stream by example &lt;a href=&#34;#stream-by-example&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A classic example to illustrate the power of streams is a server sending a file to a client. To keep things a bit more spicy let&amp;rsquo;s assume that the &lt;code&gt;file.txt&lt;/code&gt; is a 500MB pile of data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;promises&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./file.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-07-14-2.jpg&#34;
  alt=&#34;Serve file using node.js and file loaded to memory&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;908&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;In theory — it works. The problem is that we had to load a file entirely to memory (RAM) before we sent it to the client (I used &lt;code&gt;curl http://localhost:8000&lt;/code&gt; to send a request). As a result, this operation consumed a lot of memory (around 500MB + some internal Node.js operations) and it took much longer than it should. Let&amp;rsquo;s rewrite it using streams.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createReadStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./file.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-07-14-3.jpg&#34;
  alt=&#34;Serve file using node.js and streams&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;908&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;If you don’t understand the code above yet, that’s fine for now — I’ll explain later. The point here is to illustrate that changing a few lines of code, made this program much more time and memory efficient (around 28MB). Hopefully, this significant difference is convincing enough for you to stick around and learn streams.&lt;/p&gt;
&lt;h2 id=&#34;streams-composability-using-pipe-method&#34;&gt;Streams composability using pipe method &lt;a href=&#34;#streams-composability-using-pipe-method&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are somehow familiar with basic Unix commands, you must have chained multiple programs together using pipe operator (&lt;code&gt;|&lt;/code&gt;) before. If not, look!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls | grep .json 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This example lists files in a current directory (&lt;code&gt;ls&lt;/code&gt;), and pipes the results to &lt;code&gt;grep&lt;/code&gt; program that returns filtered by search pattern (&lt;code&gt;.json&lt;/code&gt;) results.&lt;/p&gt;
&lt;p&gt;This example shows the greatest power of &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_philosophy&#34;&gt;Unix philosophy&lt;/a&gt; — &lt;a href=&#34;https://en.wikipedia.org/wiki/Composability&#34;&gt;code composability&lt;/a&gt;. Small, simple, encapsulated single responsibility modules. Yes, you guessed it, Node.js streams allow us to do the same using the &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options&#34;&gt;&lt;code&gt;pipe()&lt;/code&gt; method&lt;/a&gt;. Example!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;streamOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;streamTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;streamThree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;types-of-streams&#34;&gt;Types of streams &lt;a href=&#34;#types-of-streams&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Node.js the &lt;a href=&#34;https://nodejs.org/api/stream.html&#34;&gt;built-in &lt;code&gt;stream&lt;/code&gt; module&lt;/a&gt; is useful for creating new types of stream instances, although it’s usually not necessary to use it because a lot of higher-level modules inherit from it. There are four types of streams and we are going to explore all of them.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#readable-input-stream&#34;&gt;Readable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writable-output-stream&#34;&gt;Writable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#duplex&#34;&gt;Duplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transform&#34;&gt;Transform&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;readable-input-stream&#34;&gt;Readable (input stream) &lt;a href=&#34;#readable-input-stream&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A readable stream produces data. It can be consumed directly but most often it is fed into other types of streams (writable, transform, or duplex). They are also known as input streams. Commonly used readable streams in Node.js are HTTP server &lt;a href=&#34;https://nodejs.org/api/http.html#http_event_request&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://nodejs.org/api/fs.html#fs_class_fs_readstream&#34;&gt;&lt;code&gt;fs.ReadStream&lt;/code&gt;&lt;/a&gt; returned by calling &lt;code&gt;fs.createReadStream()&lt;/code&gt; or &lt;a href=&#34;https://nodejs.org/api/process.html#process_process_stdin&#34;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt; just to name a few. Let&amp;rsquo;s create a basic form of a stream and fill it with some data to be consumed later on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Readable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stream&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// create a readable stream
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Readable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// push some data to the stream
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some data 1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some data 2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Confusingly, we explicitly pushed a &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_readable_push_chunk_encoding&#34;&gt;&lt;code&gt;null&lt;/code&gt; to the stream that signals the end of the stream (EOF)&lt;/a&gt;, after which no more data can be written. It can also be achieved by implementing a &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_readable_read_size_1&#34;&gt;&lt;code&gt;_read&lt;/code&gt;&lt;/a&gt; function. This is quite an advanced and detailed, definitely out of the scope of this tutorial.&lt;/p&gt;
&lt;h3 id=&#34;writable-output-stream&#34;&gt;Writable (output stream) &lt;a href=&#34;#writable-output-stream&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A Writable stream allows us to consume data. They are also known as output streams. Commonly used writable streams in Node.js are HTTP server &lt;a href=&#34;https://nodejs.org/api/http.html#http_class_http_serverresponse&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://nodejs.org/api/fs.html#fs_class_fs_writestream&#34;&gt;&lt;code&gt;fs.WriteStream&lt;/code&gt;&lt;/a&gt; returned by calling &lt;code&gt;fs.createWriteStream()&lt;/code&gt;, &lt;code&gt;process.stdout&lt;/code&gt; and &lt;code&gt;process.stderr&lt;/code&gt; just to name a few. Time to consume the input from the previously created readable stream.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Readable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Writable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stream&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// create a stream
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Readable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// push some data to the stream
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some data 1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some data 2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// create a writable stream
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;writableStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Writable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;writableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_write&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// connect readable and writable streams
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Like in readable stream we have to indicate the end of the stream using &lt;code&gt;null&lt;/code&gt; value or &lt;code&gt;_read&lt;/code&gt; function, in writable stream &lt;code&gt;_write&lt;/code&gt; implementations must be provided to send data to the underlying resource. Again — it’s not something that you are going to do a lot as it’s normally the lower-level implementation that you rarely have to care about. Here it’s just for example completeness. Can you see how readable stream has been piped to the writable stream using the previously discussed &lt;code&gt;pipe()&lt;/code&gt; method? So, so, so nice!&lt;/p&gt;
&lt;h3 id=&#34;duplex&#34;&gt;Duplex &lt;a href=&#34;#duplex&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Duplex streams are implementing everything that we learned so far — readable and writable stream functionalities. Whenever you come across something that looks like an example below, most likely you deal with the duplex type of a stream.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;readableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;duplexStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writableStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;transform&#34;&gt;Transform &lt;a href=&#34;#transform&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similarly to duplex streams, transform streams are readable and writable streams at the same time. Based on the input, they transform the output. You may come across &amp;ldquo;through streams&amp;rdquo; name that describes the same thing.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion &lt;a href=&#34;#conclusion&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope that after reading this article and seeing “this API inherits from stream module” won’t scare you away. I promise you that embracing the power of streams in Node.js will up your skills  to the next level.&lt;/p&gt;
&lt;p&gt;By the way, I spent a few hours writing this article and about a day on the image on the “What is a stream” section, so you better appreciate it and share it on Twitter or whatever that makes your friends read. Please! See you next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I was invited to the Mindera Yellow Box Podcast to chat the state of the Web development</title>
      <link>https://pawelgrzybek.com/i-was-invited-to-the-mindera-yellow-box-podcast-to-chat-the-state-of-the-web-development/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-was-invited-to-the-mindera-yellow-box-podcast-to-chat-the-state-of-the-web-development/</guid>
      <description>&lt;p&gt;I was invited to the &lt;a href=&#34;https://podcasts.apple.com/gb/podcast/mindera-yellow-box/id1515227462&#34;&gt;Mindera Yellow Box Podcast&lt;/a&gt; to have a chat with Jose Fonseca about &lt;a href=&#34;https://podcasts.apple.com/gb/podcast/mindera-yellow-box/id1515227462?i=1000483984483&#34;&gt;&amp;ldquo;The state of the Web development&amp;rdquo;&lt;/a&gt;. It was my podcasting debut and I was a bit stressed, but I managed to convey the message and I&amp;rsquo;m quite proud of how it&amp;rsquo;s turned out! You might disagree with some opinions, which is fine, I&amp;rsquo;m more than happy to have a beer and discuss.&lt;/p&gt;
&lt;p&gt;Enjoy 🎙&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://podcasts.apple.com/gb/podcast/mindera-yellow-box/id1515227462?i=1000483984483&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-07-10-1.jpg&#34;
  alt=&#34;The state of the Web development by Mindera Yellow Box Podcast&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;626&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2020 June</title>
      <link>https://pawelgrzybek.com/top-picks-2020-june/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2020-june/</guid>
      <description>&lt;h2 id=&#34;the-last-of-us-part-ii-isnt-just-naughty-dogs-most-ambitious-game--its-the-most-accessible-toohttpswwwthevergecom21274923the-last-of-us-part-2-accessibility-features-naughty-dog-interview-ps4&#34;&gt;&lt;a href=&#34;https://www.theverge.com/21274923/the-last-of-us-part-2-accessibility-features-naughty-dog-interview-ps4&#34;&gt;The Last of Us Part II isn’t just Naughty Dog’s most ambitious game — it’s the most accessible, too&lt;/a&gt; &lt;a href=&#34;#the-last-of-us-part-ii-isnt-just-naughty-dogs-most-ambitious-game--its-the-most-accessible-toohttpswwwthevergecom21274923the-last-of-us-part-2-accessibility-features-naughty-dog-interview-ps4&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is fantastic to see that accessibility features are considered early in the process of game creation, not like an afterthought that very often happens in the tech industry. Naughty Dog did an amazing job by introducing a plethora of features like high-contrast mode or magnification feature. I am not a big gamer, but this one I pre-ordered months ago. After reading this I appreciate the masterpiece of this title even more.&lt;/p&gt;
&lt;h2 id=&#34;time-to-upgrade-your-monitorhttpstonskymeblogmonitors&#34;&gt;&lt;a href=&#34;https://tonsky.me/blog/monitors/&#34;&gt;Time to upgrade your monitor&lt;/a&gt; &lt;a href=&#34;#time-to-upgrade-your-monitorhttpstonskymeblogmonitors&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nikita Prokopov — the creator of Fira Code and one of the biggest font faces for developers under the moon published this article to convince us all to buy a new monitor for programming. To top it off it is full of very interesting typography knowledge and little know facts about macOS and Windows internals and its font rendering mechanisms.&lt;/p&gt;
&lt;h2 id=&#34;safari-14httpstwittercomjensimmonsstatus1275171897244823553&#34;&gt;&lt;a href=&#34;https://twitter.com/jensimmons/status/1275171897244823553&#34;&gt;Safari 14&lt;/a&gt; &lt;a href=&#34;#safari-14httpstwittercomjensimmonsstatus1275171897244823553&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to amazing people like &lt;a href=&#34;https://twitter.com/jensimmons&#34;&gt;Jen Simmons&lt;/a&gt; joining the Apple Safari team, we can expect soon this browser to catch up to the most recent versions of Google Chrome and Firefox. As we can see release notes for Safari 14 Beta, the future for this product is looking promising.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;html-essential-traininghttpswwwlinkedincomlearninghtml-essential-training-4&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/learning/html-essential-training-4&#34;&gt;HTML Essential Training&lt;/a&gt; &lt;a href=&#34;#html-essential-traininghttpswwwlinkedincomlearninghtml-essential-training-4&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/jensimmons&#34;&gt;Jen Simmons&lt;/a&gt; created this fantastic resource which is available to watch totally for free for on LinkedIn learning hub. It is, as the name suggests, essential training of HTML. Please do not assume that you know everything about the subject because I learned a thing or two from it. She is an amazing teacher and I appreciate Jens input to the web community.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: Not a Diet Book by James Smith</title>
      <link>https://pawelgrzybek.com/book-review-not-a-diet-book-by-james-smith/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-not-a-diet-book-by-james-smith/</guid>
      <description>&lt;p&gt;My 30th birthday was the last time I felt great in my own body. My 33rd birthday is coming soon and I promised myself that I’m going to feel great with myself again. Whilst I change my diet habits and become much more active, I try to educate myself on how to do it healthily.&lt;/p&gt;
&lt;p&gt;I came across &lt;a href=&#34;https://www.goodreads.com/book/show/49477059-not-a-diet-book&#34;&gt;&amp;ldquo;Not a Diet Book&amp;rdquo; by  James Smith&lt;/a&gt; accidentally whilst browsing the Audible library. Turns out that his publication was a great choice.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-06-27-1.jpg&#34;
  alt=&#34;Picture of &amp;amp;ldquo;Not a Diet Book&amp;amp;rdquo; by James Smith&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;James’ book is a very verbose way of saying &amp;ldquo;eat less than you burn&amp;rdquo;. It is filled with scientific facts and filtered out all of the silver bullet marketing bullshit. Apart from formal knowledge, a good chunk of this book contains the valuable experience of a personal trainer, who is focused on making peoples lives better. The truth about the keto diet (if which I was a big fan of for years), clean food, macros and our body’s internal behaviours involved in fat loss. Educational and inspirationally dense, to the point that you better read/listen to it with a fresh mind.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: Brzydki, Zły i Szczery by Adam Ostrowski</title>
      <link>https://pawelgrzybek.com/book-review-brzydki-zly-i-szczery-by-adam-ostrowski/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-brzydki-zly-i-szczery-by-adam-ostrowski/</guid>
      <description>&lt;p&gt;As a 14 years old keen dancer I was extremely excited about the &amp;ldquo;Battle Of The Year&amp;rdquo; that took place in my hometown, Szczecin (Poland). Back then, it was one of the most prestigious breakdancing competitions in the world. I still have a great memories of some of the shows that took place that day. Another thing that I remember well is an MC who hosted the event — O.S.T.R. I kept dancing for the next decade until I struggled with a serious backbone injury, but O.S.T.R. still is one of my favourite polish MCs. I was buzzing when my mom gave me the book &lt;a href=&#34;https://www.goodreads.com/book/show/45835109-brzydki-z-y-i-szczery&#34;&gt;&amp;ldquo;Brzydki, Zły i Szczery&amp;rdquo; by Adam Ostrowski&lt;/a&gt;. By the way, my mom is a big fan of him and she read it first. Thanks, mom!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-06-19-1.jpg&#34;
  alt=&#34;Picture of &amp;amp;ldquo;Brzydki, Zły i Szczery&amp;amp;rdquo; by Adam Ostrowski&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-06-19-2.jpg&#34;
  alt=&#34;Picture of &amp;amp;ldquo;Brzydki, Zły i Szczery&amp;amp;rdquo; by Adam Ostrowski&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;MC and producer Adam Ostrowski, better known as O.S.T.R. reveals quite a lot of his art but also personal life. His autobiography is funny and easy to read but also emotional and filled with passion. A mandatory position for all die-hard fans. From initial fascination of rap music, throughout tons of concert anecdotes, to the big turning point in his career and life. No spoilers for those who don&amp;rsquo;t know the story or a few recent albums.&lt;/p&gt;
&lt;p&gt;Peace 👋&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: Steve Jobs: The Exclusive Biography by Walter Isaacson</title>
      <link>https://pawelgrzybek.com/book-review-steve-jobs-the-exclusive-biography-by-walter-isaacson/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-steve-jobs-the-exclusive-biography-by-walter-isaacson/</guid>
      <description>&lt;p&gt;I am an Apple fanboy, I watch all the live software and product announcements. Mac Pro is probably the only piece of hardware made by this company that I have never owned. I glorify the design choices by this company (apart from the Magic Mouse 2nd generation) and I celebrate when opening a box with new goodies every once in a while.&lt;/p&gt;
&lt;p&gt;To fully earn the &amp;ldquo;Apple fanboy&amp;rdquo; label I had to find out a bit more about the history of the company and its founder. I couldn&amp;rsquo;t pick any better option than &lt;a href=&#34;https://www.goodreads.com/book/show/11084145-steve-jobs&#34;&gt;&amp;ldquo;Steve Jobs: The Exclusive Biography&amp;rdquo; by Walter Isaacson&lt;/a&gt; to fulfil my curiosity, could I?&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-06-15-1.jpg&#34;
  alt=&#34;Picture of &amp;amp;ldquo;Steve Jobs: The Exclusive Biography&amp;amp;rdquo; by Walter Isaacson&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;First things first — Walter Isaacson is the author of the best biography book that I have ever read. It is a very compelling read about the genius and the biggest asshat under the moon. From his childhood and throughout education, including projects and the loosing the battle with cancer. It is about perfectionism, striving for simplicity and perfect products built to make clients lives easier and profit is a secondary goal. The story expresses Steves difficult personality dominated by his reality distortion. It is about his believes, controversial diet habits and his relationships.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-06-15-2.jpg&#34;
  alt=&#34;Picture of &amp;amp;ldquo;Steve Jobs: The Exclusive Biography&amp;amp;rdquo; by Walter Isaacson&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;I would highly recommend this book not only to Apple fans, but to everyone who needs an inspirational kick in their life. Lengthy, captivating story of an asshole genius.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2020 May</title>
      <link>https://pawelgrzybek.com/top-picks-2020-may/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2020-may/</guid>
      <description>&lt;h2 id=&#34;introducing-insomnia-designerhttpsinsomniarestblogintroducing-designer&#34;&gt;&lt;a href=&#34;https://insomnia.rest/blog/introducing-designer&#34;&gt;Introducing Insomnia Designer&lt;/a&gt; &lt;a href=&#34;#introducing-insomnia-designerhttpsinsomniarestblogintroducing-designer&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://insomnia.rest&#34;&gt;Insomnia&lt;/a&gt; is my favourite REST API client. I am very excited about just announced Insomnia Designer — a tool to help us edit and share &lt;a href=&#34;https://swagger.io/docs/specification/about/&#34;&gt;OpenAPI specifications&lt;/a&gt;. It is looking polished, well-though piece of software, just like the Insomnia Core.&lt;/p&gt;
&lt;h2 id=&#34;github-codespaces--your-instant-dev-environmenthttpsgithubcomfeaturescodespaces&#34;&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces — Your instant dev environment&lt;/a&gt; &lt;a href=&#34;#github-codespaces--your-instant-dev-environmenthttpsgithubcomfeaturescodespaces&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another month and another big announcement from GitHub team. The full Visual Studio Code experience without leaving GitHub website. Really full experience — code, build, debug, manage plugins, install dependencies etc. Always accessible in your browser. List of an early-access testers is open and I cannot wait to try it out. There is a bunch more cool stuff announced on GitHub Satellite 2020. Have a look at this &lt;a href=&#34;https://www.youtube.com/channel/UC046lFvJZhiwSRWsoH8SFjg&#34;&gt;short video by Bytesized&lt;/a&gt; that summarized all new features in 15 minutes.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ejjWyoflCKs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;logical-assignmenthttpsv8devfeatureslogical-assignment&#34;&gt;&lt;a href=&#34;https://v8.dev/features/logical-assignment&#34;&gt;Logical assignment&lt;/a&gt; &lt;a href=&#34;#logical-assignmenthttpsv8devfeatureslogical-assignment&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The ability to combine logical operations with assignment has always been missing in JavaScript language. Until now! This short article by &lt;a href=&#34;https://twitter.com/_shu&#34;&gt;Shu-yu Guo&lt;/a&gt; explains everything that you have to know about the subject.&lt;/p&gt;
&lt;h2 id=&#34;exciting-things-on-the-horizon-for-css-layouthttpscss-irlinfoexciting-things-on-the-horizon-for-css-layout&#34;&gt;&lt;a href=&#34;https://css-irl.info/exciting-things-on-the-horizon-for-css-layout/&#34;&gt;Exciting Things on the Horizon For CSS Layout&lt;/a&gt; &lt;a href=&#34;#exciting-things-on-the-horizon-for-css-layouthttpscss-irlinfoexciting-things-on-the-horizon-for-css-layout&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Quick summary of cool layout features that are coming to CSS specification soon. Thanks for sharing &lt;a href=&#34;https://twitter.com/MicheBarks&#34;&gt;Michelle Barker&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;deno-10httpsdenolandv1&#34;&gt;&lt;a href=&#34;https://deno.land/v1&#34;&gt;Deno 1.0&lt;/a&gt; &lt;a href=&#34;#deno-10httpsdenolandv1&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is official now. First version of new JavaScript runtime hit a stable v1. Decentralized modules/plugins support, Promise based API, easy to understand permission system, TypeScript support and without bad design decisions included in Node.js. This is worth to follow.&lt;/p&gt;
&lt;h2 id=&#34;introducing-mongodb-for-vs-codehttpswwwmongodbcomblogpostintroducing-mongodb-for-vs-code&#34;&gt;&lt;a href=&#34;https://www.mongodb.com/blog/post/introducing-mongodb-for-vs-code&#34;&gt;Introducing MongoDB for VS Code&lt;/a&gt; &lt;a href=&#34;#introducing-mongodb-for-vs-codehttpswwwmongodbcomblogpostintroducing-mongodb-for-vs-code&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have never been a big fun of &lt;a href=&#34;https://www.mongodb.com/products/compass&#34;&gt;MongoDB Compass, the official GUI client for MongoDB&lt;/a&gt;. It is a very heavy, slow Electron based app with less than average user experience. Announcement of &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mongodb.mongodb-vscode&#34;&gt;MongoDB for VSCode&lt;/a&gt; is the best thing that ever happened to people who need to browse, manipulate or test databases. It is fast, user experience is second to none, it has just right amount of features needed to accomplish majority of tasks. Thanks MongoDB team!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Native lazy-loading of images on Hugo based website</title>
      <link>https://pawelgrzybek.com/native-lazy-loading-of-images-on-hugo-based-website/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/native-lazy-loading-of-images-on-hugo-based-website/</guid>
      <description>&lt;p&gt;Images on the web take up more bandwidth than any other type of resources. Why do we have to load them all even if we are never going to scroll far enough to see them? Turns out that we don&amp;rsquo;t have to anymore — support for &lt;a href=&#34;https://html.spec.whatwg.org/multipage/urls-and-fetching.html#lazy-loading-attributes&#34;&gt;native lazy loading&lt;/a&gt; is coming. If you are using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo static site generator&lt;/a&gt;, the implementation of it is equally simple as adding it to an HTML file and you don&amp;rsquo;t have a good reason not to do so.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cat.jpg&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Cat&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lazy&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;600&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;400&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hugo-render-hook-templates-for-the-rescue&#34;&gt;Hugo render hook templates for the rescue &lt;a href=&#34;#hugo-render-hook-templates-for-the-rescue&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yuin/goldmark/&#34;&gt;Goldmark — a markdown parser written in Go&lt;/a&gt; since version 60 is the default Hugo library to render your content. It allows hooking into the rendering phase of particular HTML elements, like image, link or heading. This powerful feature allows us to manipulate the HTML markup for &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; elements and add &lt;code&gt;loading&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/getting-started/configuration-markup/#markdown-render-hooks&#34;&gt;Hugo documentation for markdown render hooks&lt;/a&gt; provides a lot of great examples and explanations. Using the power of this feature we are able to implement a native lazy loading using a custom template. Like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- layouts/_default/_markup/render-image.html --&amp;gt;&lt;/span&gt;
{{ $img := imageConfig (add &amp;#34;/static&amp;#34; (.Destination | safeURL)) }}

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Destination | safeURL }}&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Text }}&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lazy&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ $img.Width }}&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ $img.Height }}&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-05-28-1.gif&#34;
  alt=&#34;Native lazy loading&#34;
  loading=&#34;lazy&#34;
  width=&#34;1202&#34;
  height=&#34;770&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Hopefully, you found this little tip helpful. Please don&amp;rsquo;t be too concerned about the &lt;a href=&#34;https://caniuse.com/#feat=loading-lazy-attr&#34;&gt;browser support for lazy loading via attribute&lt;/a&gt;. This feature comes for free! If a browser doesn&amp;rsquo;t support it, it is simply ignored and everything is working as it did ever before. Progressive enhancement for the win!&lt;/p&gt;
&lt;p&gt;Bye 👋&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My favourite Visual Studio Code tips for &#34;how did you do it&#34; kind of people</title>
      <link>https://pawelgrzybek.com/my-favourite-visual-studio-code-tips-for-how-did-you-do-it-kind-of-people/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/my-favourite-visual-studio-code-tips-for-how-did-you-do-it-kind-of-people/</guid>
      <description>&lt;p&gt;Apart from a web browser, &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt; is the application that I spend the most time using. &amp;ldquo;How did you do it&amp;rdquo; is something that I hear quite often from other developers whilst using it in front of them. This article is exactly for those kind of people — Visual Studio Code users keen to learn a few little tips for  productivity, keyboard shortcuts and little known hidden gems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#use-visual-studio-code-as-a-diff-tool&#34;&gt;Use Visual Studio Code as a diff tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#switch-theme-based-on-the-os-appearance&#34;&gt;Switch theme based on the OS appearance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#language-specific-settings&#34;&gt;Language-specific settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#change-font-size-without-changing-the-size-of-ui-elements&#34;&gt;Change font size without changing the size of UI elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more-descriptive-project-title-macos&#34;&gt;More descriptive project title (macOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rename-symbol&#34;&gt;Rename symbol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;use-visual-studio-code-as-a-diff-tool&#34;&gt;Use Visual Studio Code as a diff tool &lt;a href=&#34;#use-visual-studio-code-as-a-diff-tool&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having a simple diff tool to compare two files very often comes in handy. &lt;a href=&#34;https://code.visualstudio.com/docs/editor/command-line&#34;&gt;Command-line interface for Visual Studio Code&lt;/a&gt; has one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;code --diff one.js two.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-05-27-1.jpg&#34;
  alt=&#34;Use Visual Studio Code as a diff tool&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;750&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;switch-theme-based-on-the-os-appearance&#34;&gt;Switch theme based on the OS appearance &lt;a href=&#34;#switch-theme-based-on-the-os-appearance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Modern operating systems now support light and dark color schemes. Wouldn&amp;rsquo;t  it be cool to adjust the look of our editor based on a preferred mode? Turns out that &lt;a href=&#34;https://code.visualstudio.com/updates/v1_42#_auto-switch-theme-based-on-os-color-scheme&#34;&gt;auto-switch theme based on OS color scheme&lt;/a&gt; is at our disposal since version 1.42 (January 2020). Here&amp;rsquo;s the snippet required to enable it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;window.autoDetectColorScheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;workbench.preferredDarkColorTheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GitHub Dark&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;workbench.preferredLightColorTheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GitHub Light&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-05-27-2.gif&#34;
  alt=&#34;Switch theme based on the OS appearance&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;876&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;language-specific-settings&#34;&gt;Language-specific settings &lt;a href=&#34;#language-specific-settings&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some customizations may be useful only for specific languages. My specific use case for this feature is to tweak slightly the Markdown display configuration. In contrast to code, in Markdown files I don&amp;rsquo;t care too much about line numbers. Word wrapping comes in helpful in reading/writing long-form paragraphs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;[markdown]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.lineNumbers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.wordWrap&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bounded&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;files.trimTrailingWhitespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;change-font-size-without-changing-the-size-of-ui-elements&#34;&gt;Change font size without changing the size of UI elements &lt;a href=&#34;#change-font-size-without-changing-the-size-of-ui-elements&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bumping up the font size of my editor is very handy during live demos and pair-programming sessions. Clicking &lt;code&gt;cmd +&lt;/code&gt; and &lt;code&gt;cmd -&lt;/code&gt; comes as second nature to manipulate the size of a text. Unfortunately, these two shortcuts not only change the size of a font but affect the scale of all the UI elements. If it&amp;rsquo;s not something that you want, add this to your &lt;code&gt;keybindings.json&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cmd+=&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.fontZoomIn&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cmd+-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.fontZoomOut&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cmd+0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.fontZoomReset&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-05-27-3.gif&#34;
  alt=&#34;Change font size without changing the size of UI elements&#34;
  loading=&#34;lazy&#34;
  width=&#34;734&#34;
  height=&#34;632&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;more-descriptive-project-title-macos&#34;&gt;More descriptive project title (macOS) &lt;a href=&#34;#more-descriptive-project-title-macos&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I work with multiple projects, I like to have them open as a separated spaces (macOS). Unfortunately titles in Mission Control aren&amp;rsquo;t helpful enough to quickly identify the project of interest. One picture worth a thousand words.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-05-27-4.jpg&#34;
  alt=&#34;Default Visual Studio Code window title&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;876&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;With a one-liner config change, my life became much easier by showing a folder name, instead of the confusing path that is a default setting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;window.title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;${folderName}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-05-27-5.jpg&#34;
  alt=&#34;More descriptive Visual Studio Code window title&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;876&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;rename-symbol&#34;&gt;Rename symbol &lt;a href=&#34;#rename-symbol&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I change symbol names all the time. Simply type &lt;!-- raw HTML omitted --&gt;F2&lt;!-- raw HTML omitted --&gt; to &lt;a href=&#34;https://code.visualstudio.com/docs/editor/refactoring#_rename-symbol&#34;&gt;rename all occurrences of particular symbol&lt;/a&gt;. It&amp;rsquo;s not working for all languages, but inside JavaScript / TypeScript files it works like a charm.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-05-27-6.gif&#34;
  alt=&#34;More descriptive Visual Studio Code window title&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;880&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;That is it for today. Thanks for reading and until next time, stay safe!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: Permanent Record by Edward Snowden</title>
      <link>https://pawelgrzybek.com/book-review-permanent-record-by-edward-snowden/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-permanent-record-by-edward-snowden/</guid>
      <description>&lt;p&gt;After reading a few non-technical books I kinda missed some geeky publications. My friend Kyran recently recommended &amp;ldquo;Permanent Record&amp;rdquo; a book about a story that I had heard before from the &lt;a href=&#34;https://www.imdb.com/title/tt3774114/&#34;&gt;movie &amp;ldquo;Snowden&amp;rdquo;&lt;/a&gt;. It&amp;rsquo;s been a while since I watched it, so I decided to be a bit more curious about the controversial story of NSA&amp;rsquo;s employee.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-05-05-1.jpg&#34;
  alt=&#34;Picture of &amp;amp;ldquo;Permanent Record&amp;amp;rdquo; by Edward Snowden book&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/46223297-permanent-record&#34;&gt;&amp;ldquo;Permanent Record&amp;rdquo; by Edward Snowden&lt;/a&gt; is a highly-readable story of his life, from his early fascination of computers to the big reveal of the US government&amp;rsquo;s mass surveillance system. It&amp;rsquo;s not a very technical book for a tech-savvy dude, but for someone who isn&amp;rsquo;t too technical, this book is very informative. I highly recommend this book not only to people with an interest in computer science but to everyone who is using the World Wide Web on a daily basis. I am afraid that you will never browse the Web in the same way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2020 April</title>
      <link>https://pawelgrzybek.com/top-picks-2020-april/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2020-april/</guid>
      <description>&lt;h2 id=&#34;introducing-1111-for-familieshttpsblogcloudflarecomintroducing-1-1-1-1-for-families&#34;&gt;&lt;a href=&#34;https://blog.cloudflare.com/introducing-1-1-1-1-for-families/&#34;&gt;Introducing 1.1.1.1 for Families&lt;/a&gt; &lt;a href=&#34;#introducing-1111-for-familieshttpsblogcloudflarecomintroducing-1-1-1-1-for-families&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Introduced two years ago secure DNS server by Cloudflare became my default resolver. They went step further with this idea and introduced multiple variations of this service dedicated to families. Free of malware &lt;code&gt;1.1.1.2&lt;/code&gt; and  &lt;code&gt;1.1.1.3&lt;/code&gt; stripped down from adult content. Amazing idea for households with kids!&lt;/p&gt;
&lt;h2 id=&#34;css-findings-from-the-new-facebook-designhttpsishadeedcomarticlenew-facebook-css&#34;&gt;&lt;a href=&#34;https://ishadeed.com/article/new-facebook-css/&#34;&gt;CSS Findings From The New Facebook Design&lt;/a&gt; &lt;a href=&#34;#css-findings-from-the-new-facebook-designhttpsishadeedcomarticlenew-facebook-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Curious &lt;a href=&#34;https://twitter.com/shadeed9&#34;&gt;Ahmad Shadeed&lt;/a&gt; found a lot of interesting CSS patterns in a new Facebook design. Apart from pointing them out, he listed reasons why Facebook engineers decided to use particular solution. Post is decorated with multiple tweets from Facebook developers responsible for implementation of solutions listed in the article. Very good CSS read.&lt;/p&gt;
&lt;h2 id=&#34;justin-searls--please-dont-mock-mehttpsyoutubeaf4m8gmoxi4&#34;&gt;&lt;a href=&#34;https://youtu.be/Af4M8GMoxi4&#34;&gt;Justin Searls – Please don’t mock me&lt;/a&gt; &lt;a href=&#34;#justin-searls--please-dont-mock-mehttpsyoutubeaf4m8gmoxi4&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Great talk about the mocking. Full of great practical tips for the design of an application. I like the vibe of a talk and Justin&amp;rsquo;s charisma.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Af4M8GMoxi4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;github-is-now-free-for-teamshttpsgithubblog2020-04-14-github-is-now-free-for-teams&#34;&gt;&lt;a href=&#34;https://github.blog/2020-04-14-github-is-now-free-for-teams/&#34;&gt;GitHub is now free for teams&lt;/a&gt; &lt;a href=&#34;#github-is-now-free-for-teamshttpsgithubblog2020-04-14-github-is-now-free-for-teams&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are still skeptical about Microsoft acquiring GitHub some time ago, wait for this news. Private repositories with unlimited collaborators available to all GitHub accounts for free. This is a sweet announcement!&lt;/p&gt;
&lt;h2 id=&#34;understanding-typescripts-type-notationhttps2alitycom201804type-notation-typescripthtml&#34;&gt;&lt;a href=&#34;https://2ality.com/2018/04/type-notation-typescript.html&#34;&gt;Understanding TypeScript’s type notation&lt;/a&gt; &lt;a href=&#34;#understanding-typescripts-type-notationhttps2alitycom201804type-notation-typescripthtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I should have read this article by &lt;a href=&#34;https://twitter.com/rauschma&#34;&gt;Dr. Axel Rauschmayer&lt;/a&gt; before I spent ages on &lt;a href=&#34;https://www.typescriptlang.org/docs/home&#34;&gt;official TypeScript documentation&lt;/a&gt;. This is a fantastic explanation of the way how TypeScript types notation works.&lt;/p&gt;
&lt;h2 id=&#34;100vh-in-ios-safarihttpstwittercomallthingssmittystatus1254151507412496384&#34;&gt;&lt;a href=&#34;https://twitter.com/AllThingsSmitty/status/1254151507412496384&#34;&gt;100vh in iOS Safari&lt;/a&gt; &lt;a href=&#34;#100vh-in-ios-safarihttpstwittercomallthingssmittystatus1254151507412496384&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/AllThingsSmitty&#34;&gt;Matt Smith&lt;/a&gt; shared a CSS trick that made my day! I am sure you noticed the annoying way how Safari on iOS calculates &lt;code&gt;100vh&lt;/code&gt;. We finally have a solution that gives us a bit more predictable results. Thanks to the &lt;code&gt;height: -webkit-fill-available&lt;/code&gt; declaration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mocking functions and modules with Jest</title>
      <link>https://pawelgrzybek.com/mocking-functions-and-modules-with-jest/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/mocking-functions-and-modules-with-jest/</guid>
      <description>&lt;p&gt;A JavaScript program can have several dependencies, internal and/or external, most likely represented by the list of imports on the very top of your script. To write deterministic, repeatable unit tests, we need to control the inputs, outputs and invocations of those dependencies. These objects that simulate the real objects are mocks. Let&amp;rsquo;s have a look at &lt;a href=&#34;https://en.wikipedia.org/wiki/Mock_object&#34;&gt;Wikipedia definition of Mock object&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mock objects are simulated objects that mimic the behavior of real objects in controlled ways, most often as part of a software testing initiative.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is plenty of JavaScript mocking libraries out there. Today I am going to review a few methods of creating functions and modules mock using &lt;a href=&#34;https://jestjs.io&#34;&gt;my favourite testing framework, Jest&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;to-mock-or-not-to-mock&#34;&gt;To mock or not to mock? &lt;a href=&#34;#to-mock-or-not-to-mock&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mocking all dependencies feels like a perfect solution. Who doesn&amp;rsquo;t like to have total control? Unfortunately it may cause many false positives, because we end up testing a particular scenario implemented in a particular way. It is not a reliable test of a produced result.&lt;/p&gt;
&lt;p&gt;On the other hand, why should we use mocks at all? Won&amp;rsquo;t we get the most accurate results by testing software as it is implemented? Yes — but this is out of scope of a unit test. Unit test should be isolated, narrow in scope and quick to execute.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/Af4M8GMoxi4&#34;&gt;&amp;ldquo;Please don&amp;rsquo;t mock me&amp;rdquo; by Justin Searls on YouTube&lt;/a&gt; is a fantastic talk about things that should be mocked and where mocking should be avoided. &lt;a href=&#34;https://www.oracle.com/technical-resources/articles/enterprise-architecture/mock-shortcomings.html&#34;&gt;&amp;ldquo;Mock Objects: Shortcomings and Use Cases&amp;rdquo; by Alex Ruiz&lt;/a&gt; is another resource that I found very helpful. If you have to mock too much then this may indicate a high degree of coupling in your application. &lt;a href=&#34;https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a&#34;&gt;&amp;ldquo;Mocking is a Code Smell&amp;rdquo; by Eric Elliott&lt;/a&gt; is a very helpful article that can help you to reduce tight coupling and a requirement of widespread mocking.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mocking is required when our supposed atomic units of composition are not really atomic, and our decomposition strategy has failed to decompose the larger problem into smaller, independent problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are my typical candidates for mocks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mock API calls&lt;/li&gt;
&lt;li&gt;mock databases queries&lt;/li&gt;
&lt;li&gt;mock conditions difficult to generate in a test environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-04-12-1.jpg&#34;
  alt=&#34;Picture of website with helpful resources to understand mocks&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;862&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;jest-mocks&#34;&gt;Jest mocks &lt;a href=&#34;#jest-mocks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Jest testing framework comes with great mocking methods built-in for functions as well as modules. Let&amp;rsquo;s have a look at them all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#function-mock-using-jestfn&#34;&gt;Function mock using &lt;code&gt;jest.fn()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#function-mock-using-jestfn&#34;&gt;Function mock using &lt;code&gt;jest.spyOn()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#module-mock-using-jestmock&#34;&gt;Module mock using &lt;code&gt;jest.mock()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;function-mock-using-jestfn&#34;&gt;Function mock using jest.fn() &lt;a href=&#34;#function-mock-using-jestfn&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The simplest and most common way of creating a mock is &lt;code&gt;jest.fn()&lt;/code&gt; method. If no implementation is provided, it will return the &lt;code&gt;undefined&lt;/code&gt; value. There is plenty of helpful &lt;a href=&#34;https://jestjs.io/docs/en/mock-function-api#methods&#34;&gt;methods on returned Jest mock&lt;/a&gt; to control its input, output and implementation. Let&amp;rsquo;s have a look at a few examples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;returns undefined and has been called correct number of times&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBeUndefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;has been called with correct arguments and returns a correct value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;first return&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;second return&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resultFirst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;first call&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resultSecond&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;second call&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resultFirst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;first return&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resultSecond&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;second return&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toHaveBeenNthCalledWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;first call&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toHaveBeenNthCalledWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;second call&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;function-mock-using-jestspyon&#34;&gt;Function mock using jest.spyOn() &lt;a href=&#34;#function-mock-using-jestspyon&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another method of creating a function mock is a &lt;code&gt;jest.spyOn()&lt;/code&gt; method. Same like &lt;code&gt;jest.fn()&lt;/code&gt; it creates a controlled mock. The key difference is the fact that by default it calls the original implementation. &lt;a href=&#34;https://github.com/facebook/jest/blob/e9aa321e0587d0990bd2b5ca5065e84a1aecb2fa/packages/jest-mock/src/index.js#L685&#34;&gt;It stores in memory the original implementation&lt;/a&gt; so in case it has been redefined, &lt;code&gt;jest.spyOn()&lt;/code&gt; allows us to restore the initial implementation using &lt;code&gt;mockRestore()&lt;/code&gt; method. This is not something that we can do using &lt;code&gt;jest.fn()&lt;/code&gt;. Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// helpers.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./helpers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;returns correct result&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addMock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;spyOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addMock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// look, in contrast to jest.fn() that returns undefined by default
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// jest.spyOn() calls original implementation
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;returns mocked and original result&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addMock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;spyOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;addMock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mockImplementation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// redefined implementation
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;addMock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mockRestore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// original implementation
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m sorry for the terrible example above, this is because in real life you have no valid reasons to mock pure functions like &lt;code&gt;add()&lt;/code&gt;. This is purely for illustrative purpose.&lt;/p&gt;
&lt;h3 id=&#34;module-mock-using-jestmock&#34;&gt;Module mock using jest.mock() &lt;a href=&#34;#module-mock-using-jestmock&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To entirely mock a module we can do something like this…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// helpers.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./helpers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mocks entire module&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It works, but what if a module exports tens or hundreds of methods? Manually reassigning all of them would be cumbersome. Jest comes with a fantastic feature called &lt;a href=&#34;https://jestjs.io/docs/en/configuration#automock-boolean&#34;&gt;&lt;code&gt;automock&lt;/code&gt;&lt;/a&gt; that you can enable globally or inside individual test files using &lt;code&gt;jest.mock()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./helpers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./helpers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mocks entire module&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much nicer, isn&amp;rsquo;t it? Internally Jest inspects the module and creates a mock that conforms to original&amp;rsquo;s exports. Pretty neat!&lt;/p&gt;
&lt;h2 id=&#34;hot-tip--name-your-mock&#34;&gt;Hot tip — name your mock &lt;a href=&#34;#hot-tip--name-your-mock&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Look at this test and its result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;calls a function&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-04-12-2.jpg&#34;
  alt=&#34;Picture of simple jest usage of mock without descriptive name&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;772&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;This is OK if we have one test in a file, but it is hard to guess what &lt;code&gt;jest.fn()&lt;/code&gt; is in a hundred lines long file. There is a simple solution — give your mock a descriptive name using &lt;a href=&#34;https://jestjs.io/docs/en/mock-function-api#mockfnmocknamevalue&#34;&gt;&lt;code&gt;mockName()&lt;/code&gt;&lt;/a&gt; method. Look!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;calls a function&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mockName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my dope mock&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;expect(my dope mock).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-04-12-3.jpg&#34;
  alt=&#34;Picture of simple jest usage of mock with descriptive name&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;772&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Hopefully you found this article helpful and you learned a thing or two. Until next time, stay curious!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: The Lean Startup by Eric Ries</title>
      <link>https://pawelgrzybek.com/book-review-the-lean-startup-by-eric-ries/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-the-lean-startup-by-eric-ries/</guid>
      <description>&lt;p&gt;I was recently inspired by a &lt;a href=&#34;https://devchat.tv/js-jabber/&#34;&gt;JavaScript Jabber podcast&lt;/a&gt; episode &lt;a href=&#34;https://devchat.tv/js-jabber/jsj-427-how-to-start-a-side-hustle-as-a-programmer-with-mani-vaya/&#34;&gt;&amp;ldquo;How to Start a Side Hustle as a Programmer with Mani Vaya&amp;rdquo;&lt;/a&gt; so I decided to read an entrepreneurship book. &amp;ldquo;Business&amp;rdquo; is not the number one category of books that I would usually go for but despite this, I think that it&amp;rsquo;s good to diverge and embrace a project development from a different perspective. Time after time I have heard about the book &lt;a href=&#34;https://www.goodreads.com/book/show/10127019-the-lean-startup&#34;&gt;&amp;ldquo;The Lean Startup&amp;rdquo; by Eric Reis&lt;/a&gt;, so I decided to finally give it a go.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-04-09-1.jpg&#34;
  alt=&#34;Picture of &amp;amp;ldquo;The Lean Startup&amp;amp;rdquo; by Eric Ries book&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The Lean Startup&amp;rdquo; is an easy to read/listen-to publication. It is full of great tips which are applicable for a bedroom programmer who is baking their first side hustle but also for a group of serious-looking professionals, making millions of pounds worth decisions in a boardroom. From the concept of MVP (Minimal Viable Product), through to the quick iteration cycle, A/B testing, &amp;ldquo;Five Whys Rule&amp;rdquo; to very high-level considerations about the role of a startup in the market. Although it&amp;rsquo;s written by an entrepreneur with a software development background, the insights from this book are super useful regardless of the industry. I highly recommend this book to not only to people interested in running a new startup but also to everyone who is involved in the process of building a quality product.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new in ECMAScript 2020</title>
      <link>https://pawelgrzybek.com/whats-new-in-ecmascript-2020/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/whats-new-in-ecmascript-2020/</guid>
      <description>&lt;p&gt;The list of new ECMAScript 2020 features is set in stone. Similarly, how I did it in &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2016-es7/&#34;&gt;2016&lt;/a&gt;, &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2017/&#34;&gt;2017&lt;/a&gt;, &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2018/&#34;&gt;2018&lt;/a&gt; and &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2019/&#34;&gt;2019&lt;/a&gt;, let&amp;rsquo;s have a look at what&amp;rsquo;s coming this year and a few practical examples.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#stringprototypematchall-by-jordan-harband&#34;&gt;String.prototype.matchAll by Jordan Harband&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#import-by-domenic-denicola&#34;&gt;import() by Domenic Denicola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bigint--arbitrary-precision-integers-by-daniel-ehrenberg&#34;&gt;BigInt – arbitrary precision integers by Daniel Ehrenberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#promiseallsettled-by-jason-williams-robert-pamely-and--mathias-bynens&#34;&gt;Promise.allSettled by Jason Williams, Robert Pamely and  Mathias Bynens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#globalthis-by-jordan-harband&#34;&gt;globalThis by Jordan Harband&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#for-in-mechanics-by-kevin-gibbons&#34;&gt;for-in mechanics by Kevin Gibbons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optional-chaining-by-gabriel-isenberg-claude-pache-dustin-savery&#34;&gt;Optional chaining by Gabriel Isenberg, Claude Pache, Dustin Savery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nullish-coalescing-operator-by-gabriel-isenberg&#34;&gt;Nullish coalescing Operator by Gabriel Isenberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#importmeta-by-domenic-denicola&#34;&gt;import.meta by Domenic Denicola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#export--as-ns-from-mod&#34;&gt;export * as ns from &amp;ldquo;mod&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stringprototypematchall-by-jordan-harband&#34;&gt;String.prototype.matchAll by Jordan Harband &lt;a href=&#34;#stringprototypematchall-by-jordan-harband&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;match()&lt;/code&gt; method from &lt;code&gt;String.prototype&lt;/code&gt; returns only complete matches, but doesn&amp;rsquo;t return any information about particular Regex groups. Thanks to &lt;a href=&#34;https://twitter.com/ljharb&#34;&gt;Jordan Harband&lt;/a&gt; for the &lt;a href=&#34;https://github.com/tc39/proposal-string-matchall&#34;&gt;&lt;code&gt;String.prototype.matchAll&lt;/code&gt; proposal&lt;/a&gt; that returns a lot more info than &lt;code&gt;match()&lt;/code&gt;. The returned iterator apart from exact matches give us an access to all Regex pattern capture groups. Do you remember &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2018/#regexp-named-capture-groups-by-gorkem-yakin-and-daniel-ehrenberg&#34;&gt;named capture groups by Gorkem Yakin&lt;/a&gt; and Daniel Ehrenberg added to ECMAScript 2018? The &lt;code&gt;matchAll()&lt;/code&gt; method works really well with it. The example will clarify it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;From 2019.01.29 to 2019.01.30&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/(?&amp;lt;year&amp;gt;\d{4}).(?&amp;lt;month&amp;gt;\d{2}).(?&amp;lt;day&amp;gt;\d{2})/gu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;regexp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ &amp;#39;2019.01.29&amp;#39;, &amp;#39;2019.01.30&amp;#39; ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;From 2019.01.29 to 2019.01.30&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/(?&amp;lt;year&amp;gt;\d{4}).(?&amp;lt;month&amp;gt;\d{2}).(?&amp;lt;day&amp;gt;\d{2})/gu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matchAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;regexp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   [
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     &amp;#39;2019.01.29&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     &amp;#39;2019&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     &amp;#39;01&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     &amp;#39;29&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     index: 5,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     input: &amp;#39;From 2019.01.29 to 2019.01.30&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     groups: [Object: null prototype] { year: &amp;#39;2019&amp;#39;, month: &amp;#39;01&amp;#39;, day: &amp;#39;29&amp;#39; }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   ],
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   [
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     &amp;#39;2019.01.30&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     &amp;#39;2019&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     &amp;#39;01&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     &amp;#39;30&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     index: 19,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     input: &amp;#39;From 2019.01.29 to 2019.01.30&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     groups: [Object: null prototype] { year: &amp;#39;2019&amp;#39;, month: &amp;#39;01&amp;#39;, day: &amp;#39;30&amp;#39; }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   ]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;import-by-domenic-denicola&#34;&gt;import() by Domenic Denicola &lt;a href=&#34;#import-by-domenic-denicola&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In contrast to static modules introduced in ECMAScript 2015, &lt;a href=&#34;https://github.com/tc39/proposal-dynamic-import&#34;&gt;dynamic imports&lt;/a&gt; proposed by &lt;a href=&#34;https://twitter.com/domenic&#34;&gt;Domenic Denicola&lt;/a&gt; can be fetched on-demand. This function-like format (it doesn&amp;rsquo;t inherit from &lt;code&gt;Function.prototype&lt;/code&gt;) returns a promise and it is very powerful. Things like: on-demand import, computed module name and execution inside of a script became possible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;modulePage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;page.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;modulePage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helpersModule&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;helpers.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helpersModule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bigint--arbitrary-precision-integers-by-daniel-ehrenberg&#34;&gt;BigInt – arbitrary precision integers by Daniel Ehrenberg &lt;a href=&#34;#bigint--arbitrary-precision-integers-by-daniel-ehrenberg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/littledan&#34;&gt;Daniel Ehrenberg&lt;/a&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; is no longer a restriction in JavaScript land. &lt;a href=&#34;https://github.com/tc39/proposal-bigint&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt; is a new primitive&lt;/a&gt; that can represent integers with arbitrary precision. You can convert a number to new &lt;code&gt;bigint&lt;/code&gt; type using &lt;code&gt;BigInt&lt;/code&gt; function or by appending &lt;code&gt;n&lt;/code&gt; suffix to a numeric value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MAX_SAFE_INTEGER&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 9007199254740991
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MAX_SAFE_INTEGER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 9007199254740990 👎
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;BigInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MAX_SAFE_INTEGER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 9007199254740991n 👍
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;promiseallsettled-by-jason-williams-robert-pamely-and--mathias-bynens&#34;&gt;Promise.allSettled by Jason Williams, Robert Pamely and  Mathias Bynens &lt;a href=&#34;#promiseallsettled-by-jason-williams-robert-pamely-and--mathias-bynens&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since the ECMAScript ES2015 JavaScript has supported only two promise combinators: &lt;code&gt;Promise.all()&lt;/code&gt; and &lt;code&gt;Promise.race()&lt;/code&gt;. Thanks to Jason Williams, Robert Pamely and  &lt;a href=&#34;https://twitter.com/mathias&#34;&gt;Mathias Bynens&lt;/a&gt; we now have access to &lt;a href=&#34;https://github.com/tc39/proposal-promise-allSettled&#34;&gt;&lt;code&gt;Promise.allSettled()&lt;/code&gt;&lt;/a&gt;. Use it to handle when all promises are settled regardless of the result (fulfilled or rejected). Look ma, no catch!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;allSettled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/pawelgrzybek&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/danjordan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`All profile settled`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a &lt;code&gt;Promise.any()&lt;/code&gt; potentially joining ECMAScript language soon. I described them all in &lt;a href=&#34;https://pawelgrzybek.com/promise-combinators-explained/&#34;&gt;&amp;ldquo;Promise combinators explained&amp;rdquo;&lt;/a&gt; some time ago.&lt;/p&gt;
&lt;h2 id=&#34;globalthis-by-jordan-harband&#34;&gt;globalThis by Jordan Harband &lt;a href=&#34;#globalthis-by-jordan-harband&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So what is a global &lt;code&gt;this&lt;/code&gt; in JavaScript? It is a &lt;code&gt;window&lt;/code&gt; in the browser, &lt;code&gt;self&lt;/code&gt; in a worker, &lt;code&gt;global&lt;/code&gt; in Node.js and what else… This mess is over! Thanks to &lt;a href=&#34;https://twitter.com/ljharb&#34;&gt;Jordan Harband&lt;/a&gt; we now have access to &lt;a href=&#34;https://github.com/tc39/proposal-global&#34;&gt;&lt;code&gt;globalThis&lt;/code&gt; keyword&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;for-in-mechanics-by-kevin-gibbons&#34;&gt;for-in mechanics by Kevin Gibbons &lt;a href=&#34;#for-in-mechanics-by-kevin-gibbons&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ECMAScript left behind a detailed description of for-in loop order. Thanks to &lt;a href=&#34;https://twitter.com/bakkoting&#34;&gt;Kevin Gibbons&lt;/a&gt; who finally put some &lt;a href=&#34;https://www.urbandictionary.com/define.php?term=TLC&#34;&gt;TLC&lt;/a&gt; and defined a set in stone &lt;a href=&#34;https://github.com/bakkot/for-in-exploration&#34;&gt;set of rules for for-in mechanics&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;optional-chaining-by-gabriel-isenberg-claude-pache-dustin-savery&#34;&gt;Optional chaining by Gabriel Isenberg, Claude Pache, Dustin Savery &lt;a href=&#34;#optional-chaining-by-gabriel-isenberg-claude-pache-dustin-savery&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Long chains of object property accesses can be error-prone and unconformable to read. Thanks to &lt;a href=&#34;https://twitter.com/the_gisenberg&#34;&gt;Gabriel Isenberg&lt;/a&gt;, &lt;a href=&#34;https://github.com/claudepache&#34;&gt;Claude Pache&lt;/a&gt; and Dustin Savery this thing cannot be simpler now. If you are a TypeScript user you won&amp;rsquo;t find anything new here because this feature has been implemented in &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining&#34;&gt;version 3.7&lt;/a&gt;. Love it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// before
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;article&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// after
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nullish-coalescing-operator-by-gabriel-isenberg&#34;&gt;Nullish coalescing Operator by Gabriel Isenberg &lt;a href=&#34;#nullish-coalescing-operator-by-gabriel-isenberg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tc39/proposal-nullish-coalescing&#34;&gt;The nullish coalescing proposal&lt;/a&gt; adds a new short-circuiting operator to handle default values. &lt;a href=&#34;https://twitter.com/the_gisenberg&#34;&gt;Gabriel Isenberg&lt;/a&gt; did fantastic work. This feature goes hand in hand with optional chaining. In contrast to &lt;code&gt;||&lt;/code&gt; operator, nullish coalescing operator &lt;code&gt;??&lt;/code&gt; evaluating only when left-hand side value is strictly &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default value&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// default value
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default value&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;What&amp;#39;s new in ECMAScript 2020&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;importmeta-by-domenic-denicola&#34;&gt;import.meta by Domenic Denicola &lt;a href=&#34;#importmeta-by-domenic-denicola&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/tc39/proposal-import-meta&#34;&gt;import.meta proposal&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/domenic&#34;&gt;Domenic Denicola&lt;/a&gt; adds a host-specific metadata object to the currently running module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// file:///Users/pawelgrzybek/main.js
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;export--as-ns-from-mod&#34;&gt;export * as ns from &amp;ldquo;mod&amp;rdquo; &lt;a href=&#34;#export--as-ns-from-mod&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a &lt;a href=&#34;https://spectranaut.github.io/proposal-export-ns-from/&#34;&gt;useful addition to the specification&lt;/a&gt; that allows developers to export another module&amp;rsquo;s namespace exotic object under the new name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ns&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mod&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Top picks — 2020 March</title>
      <link>https://pawelgrzybek.com/top-picks-2020-march/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2020-march/</guid>
      <description>&lt;h2 id=&#34;why-the-govuk-design-system-team-changed-the-input-type-for-numbershttpstechnologybloggovuk20200224why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers&#34;&gt;&lt;a href=&#34;https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/&#34;&gt;Why the GOV.UK Design System team changed the input type for numbers&lt;/a&gt; &lt;a href=&#34;#why-the-govuk-design-system-team-changed-the-input-type-for-numbershttpstechnologybloggovuk20200224why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few consideration behind the number type input. This article provides a solutions for well articulated problems. I love accessibility reads like this, especially from Gov UK team.&lt;/p&gt;
&lt;h2 id=&#34;monolisa---a-font-family-designed-for-software-developers-font-follows-functionhttpsmonolisadev&#34;&gt;&lt;a href=&#34;https://monolisa.dev&#34;&gt;MonoLisa - A font family designed for software developers. Font follows function&lt;/a&gt; &lt;a href=&#34;#monolisa---a-font-family-designed-for-software-developers-font-follows-functionhttpsmonolisadev&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is not a lot of great font choices for developers. Mono Lisa looks very modern, supports all ligatures that some developers love (some hate), nice wider footprint and is presented on a stunning presentational website. Check this one out.&lt;/p&gt;
&lt;h2 id=&#34;npm-is-joining-githubhttpsgithubblog2020-03-16-npm-is-joining-github&#34;&gt;&lt;a href=&#34;https://github.blog/2020-03-16-npm-is-joining-github/&#34;&gt;npm is joining GitHub&lt;/a&gt; &lt;a href=&#34;#npm-is-joining-githubhttpsgithubblog2020-03-16-npm-is-joining-github&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitHub acquires npm! Main focus after the deal closes will be to improve the platform infrastructure, make the core experiences better and engage more with JavaScript community. In a long run we may expect massively improved security of a registry and smoother integration with GitHub Packages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The amazing energy and creativity of millions of JavaScript developers is evident every day in the work that appears in npm. We are honored to support that community in a new way. The future of npm and the JavaScript ecosystem is very bright.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;different-favicon-for-developmenthttpscss-trickscomdifferent-favicon-for-development&#34;&gt;&lt;a href=&#34;https://css-tricks.com/different-favicon-for-development/&#34;&gt;Different Favicon for Development&lt;/a&gt; &lt;a href=&#34;#different-favicon-for-developmenthttpscss-trickscomdifferent-favicon-for-development&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Chris Coyier gives a great tip to differentiate a production and development websites. Apart from a great tip he expresses his frustration about the favicon standard and I cannot agree more with this gentleman.&lt;/p&gt;
&lt;h2 id=&#34;css-nth-of-class-selectorhttpswwwbramus20200316css-nth-of-class-selector&#34;&gt;&lt;a href=&#34;https://www.bram.us/2020/03/16/css-nth-of-class-selector/&#34;&gt;CSS :nth-of-class selector&lt;/a&gt; &lt;a href=&#34;#css-nth-of-class-selectorhttpswwwbramus20200316css-nth-of-class-selector&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;:nth-of-class&lt;/code&gt; CSS selector is one of the most frequently requested features. Turns out that there is a feature that will help us to achieve this (and a lot more). This great article by &lt;a href=&#34;https://twitter.com/bramusblog&#34;&gt;Bram(us) Van Damme&lt;/a&gt; explains it very well.&lt;/p&gt;
&lt;h2 id=&#34;css-can-influence-screenreadershttpsblogbenmyersdevcss-can-influence-screenreaders&#34;&gt;&lt;a href=&#34;https://blog.benmyers.dev/css-can-influence-screenreaders/&#34;&gt;CSS Can Influence Screenreaders&lt;/a&gt; &lt;a href=&#34;#css-can-influence-screenreadershttpsblogbenmyersdevcss-can-influence-screenreaders&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Shocking impact of CSS on screen readers. Ben Myers did a fantastic job of illustrating potential accessibility issue that we may accidentally introduce by CSS. One of the best accessibility articles that I have read in a while.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RSS feed for youtube channels and GitHub project</title>
      <link>https://pawelgrzybek.com/rss-feed-for-youtube-channels-and-github-project/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/rss-feed-for-youtube-channels-and-github-project/</guid>
      <description>&lt;p&gt;Today a quick tip but a massive time saver in the long run. I often check YouTube to watch a new video made by my favourite creator. Then, two more. Uuu, this review of the latest Bose headphones looks interesting. &amp;ldquo;What&amp;rsquo;s in my bag&amp;rdquo; by Peter McKinnon — I must know what is inside his bag! &amp;ldquo;Why Casey Neistat Stopped Posting Videos&amp;rdquo; — how did I live my life without watching this one before.&lt;/p&gt;
&lt;p&gt;You know the drill. Let&amp;rsquo;s stop it and watch only what we really care about. The pattern to get the RSS channel feed looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://www.youtube.com/feeds/videos.xml?channel_id={{CHANNEL_ID}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-03-18-1.jpg&#34;
  alt=&#34;Feedly and Reeder is my favourite RSS combo&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;881&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Now add it to your RSS subscription service of choice and Bob&amp;rsquo;s your uncle. Personally, I use the free version of &lt;a href=&#34;http://feedly.com/&#34;&gt;Feedly&lt;/a&gt;. I heard just great things about &lt;a href=&#34;https://feedbin.com&#34;&gt;Feedbin&lt;/a&gt; too. My RSS client of choice is &lt;a href=&#34;https://www.reederapp.com&#34;&gt;Reeder by Silvio Rizzi&lt;/a&gt;. If you are too stingy and don&amp;rsquo;t want to support amazing independent developers you will like &lt;a href=&#34;https://ranchero.com/netnewswire/&#34;&gt;NetNewsWire&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bonus-tip--rss-for-github-project-releases--tags&#34;&gt;Bonus tip — RSS for GitHub project releases / tags &lt;a href=&#34;#bonus-tip--rss-for-github-project-releases--tags&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the geeky part of my audience, I have got something special. GitHub gives us RSS feeds for project releases and tags. Thats my preferred way of finding out about my followed projects fixed bugs and new features.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/{{username}}/{{repository}}/releases.atom
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;https://github.com/{{username}}/{{repository}}/tags.atom
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Stay productive 👋&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: Endurance by Scott Kelly</title>
      <link>https://pawelgrzybek.com/book-review-endurance-by-scott-kelly/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-endurance-by-scott-kelly/</guid>
      <description>&lt;p&gt;You go to school, finish a mildly interesting university, find an average job that pays your bills and enjoy the rest of your life&amp;hellip;until you die. At the same time you&amp;rsquo;re doing this there are incredibly driven, determined and hard-working people conducting spacewalks around 300km above the Earth&amp;rsquo;s surface. Even thinking about something like that feels like sci-fi but it&amp;rsquo;s not! I have always been curious about the subject of space travel, living in such a distant place and the daily life and routines out there.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-03-13-1.jpg&#34;
  alt=&#34;Picture of a &amp;amp;ldquo;Endurance&amp;amp;rdquo; by Scott Kelly book&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;933&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;I couldn&amp;rsquo;t have picked a better book to satisfy my curiosity than &lt;a href=&#34;https://www.goodreads.com/book/show/29947651-endurance&#34;&gt;&amp;ldquo;Endurance: A Year in Space, A Lifetime of Discovery&amp;rdquo;&lt;/a&gt;, it&amp;rsquo;s a stellar memoir written by a military pilot, an engineer, a retired astronaut and U.S. Navy Captain — &lt;a href=&#34;https://twitter.com/StationCDRKelly&#34;&gt;Scott Kelly&lt;/a&gt;. It&amp;rsquo;s a fascinating behind the scenes look into a life of an immensely hard-working human in space and his record-breaking year on the International Space Station (ISS). A large part of a book covers the past decades of Scott&amp;rsquo;s life and the exhaustive process of physical and mental preparation. What I found interesting was the detailed descriptions of his everyday life that he shared with a few colleagues whilst orbiting the Earth, from spacewalks to fixing the ISS toilet! I listened to the audiobook, narrated by Scott Kelly himself, and was hooked from start to finish!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2020 February</title>
      <link>https://pawelgrzybek.com/top-picks-2020-february/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2020-february/</guid>
      <description>&lt;h2 id=&#34;building-the-web-we-wanthttpscss-trickscombuilding-the-web-we-want&#34;&gt;&lt;a href=&#34;https://css-tricks.com/building-the-web-we-want/&#34;&gt;Building the Web We Want&lt;/a&gt; &lt;a href=&#34;#building-the-web-we-wanthttpscss-trickscombuilding-the-web-we-want&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A new initiative in collaboration with Microsoft, Google, Mozilla, Samsung Internet and Igalia committed to make the open web a better place. Since now on, this fantastic movement can be supported by the web community, called &lt;a href=&#34;https://webwewant.fyi&#34;&gt;The Web We Want&lt;/a&gt;. This article on &lt;a href=&#34;https://css-tricks.com&#34;&gt;CSS-Tricks&lt;/a&gt; elaborates about the idea and explains how to get involved.&lt;/p&gt;
&lt;h2 id=&#34;https-is-easyhttpshttpsiseasycom&#34;&gt;&lt;a href=&#34;https://httpsiseasy.com&#34;&gt;HTTPS Is Easy!&lt;/a&gt; &lt;a href=&#34;#https-is-easyhttpshttpsiseasycom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A little guide by amazing &lt;a href=&#34;https://twitter.com/troyhunt&#34;&gt;Troy Hunt&lt;/a&gt; about the HTTPS configuration with CloudFlare. Subjects like fully encrypted SSL, automatic rewrites, TLS and HSTS are very well explained. I love all the things that Troy is doing for the web platform.&lt;/p&gt;
&lt;h2 id=&#34;esbuildhttpsgithubcomevanwesbuild&#34;&gt;&lt;a href=&#34;https://github.com/evanw/esbuild/&#34;&gt;esbuild&lt;/a&gt; &lt;a href=&#34;#esbuildhttpsgithubcomevanwesbuild&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Brand new JavaScript bundler coded entirely in a go language. The first comparison to industry-standard tools is looking very promising. Space worth to follow.&lt;/p&gt;
&lt;h2 id=&#34;announcing-typescript-38httpsdevblogsmicrosoftcomtypescriptannouncing-typescript-3-8&#34;&gt;&lt;a href=&#34;https://devblogs.microsoft.com/typescript/announcing-typescript-3-8/&#34;&gt;Announcing TypeScript 3.8&lt;/a&gt; &lt;a href=&#34;#announcing-typescript-38httpsdevblogsmicrosoftcomtypescriptannouncing-typescript-3-8&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This release looks rather revolutionary to me. Something that I struggled with a lot in my current project has now been resolved by type-only imports and exports. Another game-changer is top-level await implemented in the same manner as it is in modern runtimes (Chromium dev tools for example). ECMAScript native private class fields number of new possibilities too. A very solid release that you want to use on your project.&lt;/p&gt;
&lt;h2 id=&#34;introducing-firefox-and-edge-support-in-cypress-40httpswwwcypressioblog20200206introducing-firefox-and-edge-support-in-cypress-4-0&#34;&gt;&lt;a href=&#34;https://www.cypress.io/blog/2020/02/06/introducing-firefox-and-edge-support-in-cypress-4-0/&#34;&gt;Introducing Firefox and Edge Support in Cypress 4.0&lt;/a&gt; &lt;a href=&#34;#introducing-firefox-and-edge-support-in-cypress-40httpswwwcypressioblog20200206introducing-firefox-and-edge-support-in-cypress-4-0&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cypress running on anything other than Google Chrome has been the most anticipated feature request in the history of this project. With the release of version 4.0, the dream comes true by adding support for Firefox and Microsoft Edge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: Humble Pi: A Comedy of Maths Errors by Matt Parker</title>
      <link>https://pawelgrzybek.com/book-review-humble-pi-a-comedy-of-maths-errors-by-matt-parker/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-humble-pi-a-comedy-of-maths-errors-by-matt-parker/</guid>
      <description>&lt;p&gt;Despite the fact that I have never had a trophy for being the best maths student at school, I always enjoyed mathematics. An understanding of the basics has helped me a lot in a real-life and probably not harmed my career either. I can get through some simple equations but everything more challenging than trigonometry or matrices normally ends up being a spectacular fiasco. My failures are very insignificant compared to the ones described in the book that I just read.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-02-27-1.jpg&#34;
  alt=&#34;Picture of a &amp;amp;ldquo;Humble Pi: A Comedy of Maths Errors&amp;amp;rdquo; by Matt Parker book&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/39074550-humble-pi&#34;&gt;&amp;ldquo;Humble Pi: A Comedy of Maths Errors&amp;rdquo;&lt;/a&gt; by &lt;a href=&#34;&#34;&gt;Matt Parker&lt;/a&gt; is all about what happens when maths goes wrong. Short, humorous (with a few exceptions) real-life anecdotes from various fields like finance, internet, big data, architecture, electronics, statistics and more. The publication by itself is full of real geek touches like pages following reversed order. I have a signed hardcopy and if you are quick you can still get yours from the &lt;a href=&#34;https://mathsgear.co.uk/collections/books/products/humble-pi-a-comedy-of-maths-errors&#34;&gt;Maths Gear online store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-02-27-2.jpg&#34;
  alt=&#34;Picture of a &amp;amp;ldquo;Humble Pi: A Comedy of Maths Errors&amp;amp;rdquo; signed by Matt Parker book&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: Gravitas by Caroline Goyder</title>
      <link>https://pawelgrzybek.com/book-review-gravitas-by-caroline-goyder/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-gravitas-by-caroline-goyder/</guid>
      <description>&lt;p&gt;I am a constant joker! Most of the time there&amp;rsquo;s nothing bad about this, but in a senior-level position in a big software company, some level of seriousness can be helpful. The power to be a great communicator lies somewhere in-between, doesn&amp;rsquo;t it?&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-02-03-1.jpg&#34;
  alt=&#34;Picture of a &amp;amp;ldquo;Gravitas: Communicate with Confidence, Influence and Authority&amp;amp;rdquo; book&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;I decided to dedicate some time to find that sweet spot and picked up &lt;a href=&#34;https://www.goodreads.com/book/show/18685594-gravitas&#34;&gt;&amp;ldquo;Gravitas: Communicate with Confidence, Influence and Authority&amp;rdquo; by Caroline Goyder&lt;/a&gt;. It was a great choice! It&amp;rsquo;s a combination of bite-sized chapters about multiple subjects involved in finding your own &amp;ldquo;gravitas&amp;rdquo;. A great read for everyone who is willing to enhance their influence, become a better writer or perhaps a public speaker or presenter. It is very well written but for fans of audiobooks, I can assure you that Caroline&amp;rsquo;s voice on the Audible version is pleasant and easy to listen to. Until next time, bye :-*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2020 January</title>
      <link>https://pawelgrzybek.com/top-picks-2020-january/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2020-january/</guid>
      <description>&lt;h2 id=&#34;tsconf-2019---watch-the-whole-conferencehttpstsconfiovideoshtml&#34;&gt;&lt;a href=&#34;https://tsconf.io/videos.html&#34;&gt;TSConf 2019 - Watch the Whole Conference&lt;/a&gt; &lt;a href=&#34;#tsconf-2019---watch-the-whole-conferencehttpstsconfiovideoshtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All talks from TSConf 2019 are now online. They are all very insightful and I highly encourage you to watch them all. If you have no time and want to pick just one — &amp;ldquo;Deno is a New Way to JavaScript&amp;rdquo; by Ryan Dahl &amp;amp; Kitson Kelly would be my pick.&lt;/p&gt;
&lt;h2 id=&#34;goodbye-clean-codehttpsoverreactediogoodbye-clean-code&#34;&gt;&lt;a href=&#34;https://overreacted.io/goodbye-clean-code/&#34;&gt;Goodbye, Clean Code&lt;/a&gt; &lt;a href=&#34;#goodbye-clean-codehttpsoverreactediogoodbye-clean-code&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/dan_abramov&#34;&gt;Dan Abramov&lt;/a&gt; from React core team explains why striving for the cleanest and &amp;ldquo;DRYiest&amp;rdquo; implementation of your new feature is not always the best idea.&lt;/p&gt;
&lt;h2 id=&#34;animate-text-along-a-path-on-scrollhttpsyoutubetae96ze3xwy&#34;&gt;&lt;a href=&#34;https://youtu.be/Tae96ze3xwY&#34;&gt;Animate text along a path on scroll&lt;/a&gt; &lt;a href=&#34;#animate-text-along-a-path-on-scrollhttpsyoutubetae96ze3xwy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/shshaw&#34;&gt;Stephen Shaw&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/keyframers&#34;&gt;the @keyframers&lt;/a&gt; team gives a quick and concise explanation to animate text along the svg path on scroll event. Neat and simple method.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Tae96ze3xwY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;new-year-new-browser--the-new-microsoft-edge-is-out-of-preview-and-now-available-for-downloadhttpsblogswindowscomwindowsexperience20200115new-year-new-browser-the-new-microsoft-edge-is-out-of-preview-and-now-available-for-download&#34;&gt;&lt;a href=&#34;https://blogs.windows.com/windowsexperience/2020/01/15/new-year-new-browser-the-new-microsoft-edge-is-out-of-preview-and-now-available-for-download/&#34;&gt;New year, new browser – The new Microsoft Edge is out of preview and now available for download&lt;/a&gt; &lt;a href=&#34;#new-year-new-browser--the-new-microsoft-edge-is-out-of-preview-and-now-available-for-downloadhttpsblogswindowscomwindowsexperience20200115new-year-new-browser-the-new-microsoft-edge-is-out-of-preview-and-now-available-for-download&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally landed — Microsoft Edge based on Chromium engine is officially announced. Am I happy about it? I don&amp;rsquo;t know. I am a bit sceptical about a single-engine that drives them all and that probably explains the reason why I am such a big fan of Mozilla politics and day-in-day-out Safari user. One thing became much easier though — frontend development.&lt;/p&gt;
&lt;h2 id=&#34;jetbrains-mono-a-free-and-open-source-typeface-for-developershttpswwwjetbrainscomlpmono&#34;&gt;&lt;a href=&#34;https://www.jetbrains.com/lp/mono/&#34;&gt;JetBrains Mono: A free and open source typeface for developers&lt;/a&gt; &lt;a href=&#34;#jetbrains-mono-a-free-and-open-source-typeface-for-developershttpswwwjetbrainscomlpmono&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A free, open-source typeface for developers from JetBrains. Increased height for a better reading experience, adapted to reading code and supports ligatures. Ready to be used in your code editor, on your next poster design, website and mobile app. You can even design your own font based on it. Sick!&lt;/p&gt;
&lt;h2 id=&#34;introducing-yarn-2-httpsdevtoarcanisintroducing-yarn-2-4eh1&#34;&gt;&lt;a href=&#34;https://dev.to/arcanis/introducing-yarn-2-4eh1&#34;&gt;Introducing Yarn 2 !&lt;/a&gt; &lt;a href=&#34;#introducing-yarn-2-httpsdevtoarcanisintroducing-yarn-2-4eh1&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is finally coming! The second version of &lt;code&gt;yarn&lt;/code&gt; has just been announced and it is full of new features and improvement over the first one. Rewritten entirely in TypeScript, with improved CLI output, massively better workflow with workspaces and something that I am super excited about, &lt;code&gt;yarn dlx&lt;/code&gt; (dlx stands for download and execute).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TIL — git switch &amp; git restore</title>
      <link>https://pawelgrzybek.com/til-git-switch-git-restore/</link>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/til-git-switch-git-restore/</guid>
      <description>&lt;p&gt;It was such an ordinary day at work. I was pair programming with my friend (hi &lt;a href=&#34;https://www.instagram.com/fidalgodev/&#34;&gt;Pedro&lt;/a&gt;), we finished a feature and then he jumped to the command line to type &lt;code&gt;git switch&lt;/code&gt;. Instant WTF moment! I have been using &lt;code&gt;git&lt;/code&gt; for years and I have never come across this one. I jumped on the docs, learned a thing and now it is time to share it with you.&lt;/p&gt;
&lt;h2 id=&#34;new-stuff-in-git-223&#34;&gt;New stuff in Git 2.23 &lt;a href=&#34;#new-stuff-in-git-223&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Switching branches and restoring files to its initial state are very common operations. Why the hell should we use a single &lt;code&gt;git checkout&lt;/code&gt; command to perform such different actions? Turns out that &lt;a href=&#34;https://github.com/git/git/blob/master/Documentation/RelNotes/2.23.0.txt&#34;&gt;Git 2.23&lt;/a&gt; added much more descriptive commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git switch&lt;/code&gt; to switch branches&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore&lt;/code&gt; to restore working tree files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nice and simple! Let&amp;rsquo;s have a look at the related part of release notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two new commands &amp;ldquo;git switch&amp;rdquo; and &amp;ldquo;git restore&amp;rdquo; are introduced to split &amp;ldquo;checking out a branch to work on advancing its history&amp;rdquo; and &amp;ldquo;checking out paths out of the index and/or a tree-ish to work on advancing the current history&amp;rdquo; out of the single &amp;ldquo;git checkout&amp;rdquo; command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples &lt;a href=&#34;#examples&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some examples of how to use commands that we have learned today. Enjoy!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# switch to new-feature branch&lt;/span&gt;
git switch new-feature

&lt;span class=&#34;c1&#34;&gt;# create and switch to new-feature branch&lt;/span&gt;
git switch -c new-feature

&lt;span class=&#34;c1&#34;&gt;# create and switch to blank new-feature branch&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# all tracked files are removed&lt;/span&gt;
git switch --orphan new-feature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# discard index.js changes&lt;/span&gt;
git restore index.js

&lt;span class=&#34;c1&#34;&gt;# discard all files in the current directory&lt;/span&gt;
git restore .

&lt;span class=&#34;c1&#34;&gt;# restore index.js from master branch&lt;/span&gt;
git restore --source master index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Book review: Peter Pan</title>
      <link>https://pawelgrzybek.com/book-review-peter-pan/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-peter-pan/</guid>
      <description>&lt;p&gt;Yes, &lt;a href=&#34;https://www.goodreads.com/book/show/34268.Peter_Pan&#34;&gt;&amp;ldquo;Peter Pan&amp;rdquo;&lt;/a&gt;, a kids book. It’s not me being childish, it’s you being boring — sorry for being brutally honest. After the last decade that I’ve spent reading serious, mature, programming and science-related books, I decided to re-experience that feeling of pure adventure and make-believe which comes from reading a children’s book. I don&amp;rsquo;t regret this decision and I am sure I am going to read more toddler novels soon.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-01-11-1.jpg&#34;
  alt=&#34;Picture of a &amp;amp;ldquo;Peter Pan&amp;amp;rdquo; book&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Peter Pan took me to a higher level of fantasy and imagination more than any other story that I have read or listened to in last few years. It’s a world of speaking trees, grumpy fairies, flying boys who never want to grow up — everything that I need. Despite the fact that the audiobook that I listened to varies slightly from the original version from 1911, it delivers a great recipe to forget about the system around us. To top it off &lt;a href=&#34;https://www.audible.co.uk/pd/Peter-Pan-Audiobook/B081HH7XNL&#34;&gt;&amp;ldquo;Peter Pan&amp;rdquo; on Audible&lt;/a&gt; was free a few weeks ago.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: Atomic Habits: An Easy &amp; Proven Way to Build Good Habits &amp; Break Bad Ones by James Clear</title>
      <link>https://pawelgrzybek.com/book-review-atomic-habits-an-easy-proven-way-to-build-good-habits-break-bad-ones-by-james-clear/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/book-review-atomic-habits-an-easy-proven-way-to-build-good-habits-break-bad-ones-by-james-clear/</guid>
      <description>&lt;p&gt;Welcome back in 2020. I have always been reading a ton but this year I am planning to make a subject shift. Less nerdy technical gibberish and more stuff that can help me to be a better version of myself. Let&amp;rsquo;s start 2020 with the &lt;a href=&#34;https://www.goodreads.com/book/show/40121378-atomic-habits&#34;&gt;&amp;ldquo;Atomic Habits: An Easy &amp;amp; Proven Way to Build Good Habits &amp;amp; Break Bad Ones&amp;rdquo; by James Clear&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This book is a framework that helps in creating new habits that, repeated over time, can significantly improve the quality of your life. James Clear deeply analyzes four building blocks of every single life routine — cue, craving, response and reward. Along the way, he shares entertaining anecdotes of Olympic gold medalists, scientists and world-leading CEOs who achieved their goals by following the rules detailed in this book. &amp;ldquo;Atomic Habits&amp;rdquo; is clear, concise and full of real-life practical tips.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2020-01-06-1.jpg&#34;
  alt=&#34;Picture of a book&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;835&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;This book gave me a different point of view of my day-to-day life. Literally, moments after going through the first few chapters I started questioning my behaviours and catching myself on doing some things that I do for years on autopilot. It helped me to redefined my annual goals to be more process-oriented over being blindly focused on achievement. Overall it is a great read and well worth of a few hours of my weekend sit back.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 December</title>
      <link>https://pawelgrzybek.com/top-picks-2019-december/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-december/</guid>
      <description>&lt;h2 id=&#34;what-is-a-screen-readerhttpsaxesslabcomwhat-is-a-screen-reader&#34;&gt;&lt;a href=&#34;https://axesslab.com/what-is-a-screen-reader/&#34;&gt;What is a screen reader?&lt;/a&gt; &lt;a href=&#34;#what-is-a-screen-readerhttpsaxesslabcomwhat-is-a-screen-reader&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Screen reader basics explained, how they work and how people with vision impairments use them. This post is full of practical pieces of advice about frontend techniques to improve the accessibility of our web projects. Very helpful resource.&lt;/p&gt;
&lt;h2 id=&#34;explaining-graphql-connectionshttpsblogapollographqlcomexplaining-graphql-connections-c48b7c3d6976&#34;&gt;&lt;a href=&#34;https://blog.apollographql.com/explaining-graphql-connections-c48b7c3d6976&#34;&gt;Explaining GraphQL Connections&lt;/a&gt; &lt;a href=&#34;#explaining-graphql-connectionshttpsblogapollographqlcomexplaining-graphql-connections-c48b7c3d6976&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I have been working with GraphQL, the concept of &lt;a href=&#34;https://facebook.github.io/relay/graphql/connections.htm&#34;&gt;Relay-like connections&lt;/a&gt; using &lt;code&gt;edge&lt;/code&gt;s and &lt;code&gt;node&lt;/code&gt;s was always a bit confusing to me. After reading this article by &lt;a href=&#34;https://twitter.com/calebmer&#34;&gt;Caleb Meredith&lt;/a&gt; it clicked. Very good explanation.&lt;/p&gt;
&lt;h2 id=&#34;quoting-in-html-quotations-citations-and-blockquoteshttpscss-trickscomquoting-in-html-quotations-citations-and-blockquotes&#34;&gt;&lt;a href=&#34;https://css-tricks.com/quoting-in-html-quotations-citations-and-blockquotes/&#34;&gt;Quoting in HTML: Quotations, Citations, and Blockquotes&lt;/a&gt; &lt;a href=&#34;#quoting-in-html-quotations-citations-and-blockquoteshttpscss-trickscomquoting-in-html-quotations-citations-and-blockquotes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first article by &lt;a href=&#34;https://twitter.com/storykaboom&#34;&gt;John Rhea&lt;/a&gt; on &lt;a href=&#34;https://css-tricks.com&#34;&gt;CSS-Tricks&lt;/a&gt; and I am already looking forward to the next one. Good, in-depth read about quotations in HTML.&lt;/p&gt;
&lt;h2 id=&#34;the-state-of-javascript-2019https2019stateofjscom&#34;&gt;&lt;a href=&#34;https://2019.stateofjs.com&#34;&gt;The State of JavaScript 2019&lt;/a&gt; &lt;a href=&#34;#the-state-of-javascript-2019https2019stateofjscom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every year I look at the result of the annual State of JavaScript with excitement. It is nice to go through this amazingly curated set of data. As always, data visualization is second to none.&lt;/p&gt;
&lt;h2 id=&#34;const-assertions-in-literal-expressions-in-typescripthttpsmariusschulzcomblogconst-assertions-in-literal-expressions-in-typescript&#34;&gt;&lt;a href=&#34;https://mariusschulz.com/blog/const-assertions-in-literal-expressions-in-typescript&#34;&gt;Const Assertions in Literal Expressions in TypeScript&lt;/a&gt; &lt;a href=&#34;#const-assertions-in-literal-expressions-in-typescripthttpsmariusschulzcomblogconst-assertions-in-literal-expressions-in-typescript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Avoid types widening using const assertion. This is a great explainer by &lt;a href=&#34;https://twitter.com/mariusschulz&#34;&gt;Marius Schulz&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;20-ways-to-become-a-better-nodejs-developer-in-2020httpsmediumcomme_3728620-ways-to-become-a-better-node-js-developer-in-2020-d6bd73fcf424&#34;&gt;&lt;a href=&#34;https://medium.com/@me_37286/20-ways-to-become-a-better-node-js-developer-in-2020-d6bd73fcf424&#34;&gt;20 ways to become a better Node.js developer in 2020&lt;/a&gt; &lt;a href=&#34;#20-ways-to-become-a-better-nodejs-developer-in-2020httpsmediumcomme_3728620-ways-to-become-a-better-node-js-developer-in-2020-d6bd73fcf424&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;List of solid directions for all Node.js developers. I found tons of great ideas and inspirations here. I cannot recommend enough a series of GitHub repositories by &lt;a href=&#34;https://twitter.com/goldbergyoni&#34;&gt;Yoni Goldberg&lt;/a&gt; about best testing practices. Worth checking!&lt;/p&gt;
&lt;h2 id=&#34;helping-browsers-optimize-with-the-css-contain-propertyhttpswwwsmashingmagazinecom201912browsers-containment-css-contain-property&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2019/12/browsers-containment-css-contain-property/&#34;&gt;Helping Browsers Optimize With The CSS Contain Property&lt;/a&gt; &lt;a href=&#34;#helping-browsers-optimize-with-the-css-contain-propertyhttpswwwsmashingmagazinecom201912browsers-containment-css-contain-property&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Amazing &lt;a href=&#34;https://twitter.com/rachelandrew&#34;&gt;Rachel Andrew&lt;/a&gt; explains &lt;a href=&#34;https://www.w3.org/TR/css-contain-1/&#34;&gt;The CSS Containment Specification&lt;/a&gt;. The CSS &lt;code&gt;contain&lt;/code&gt; property has been added to specification for optimization reasons, but can cause some confusion when browser builds and recalculates layout.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A look back at 2019</title>
      <link>https://pawelgrzybek.com/a-look-back-at-2019/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/a-look-back-at-2019/</guid>
      <description>&lt;p&gt;Like I did in &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2016/&#34;&gt;2016&lt;/a&gt;, &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2017/&#34;&gt;2017&lt;/a&gt; and &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2018/&#34;&gt;2018&lt;/a&gt;, I am not going to break with this tradition, so I am going to share some personal thoughts about this year as well. The end of a December is a fantastic opportunity to slow down, enjoy Christmas with family, hang out with best friends, summarize achievements and failures of the last year and think about some goals for the upcoming year. Last time I committed myself to a few goals, and even though I didn&amp;rsquo;t manage to tick the box next to every single one of them, this year was great. A lot of accomplishments that I am proud of, some little breakdowns and number of inspirations to keep on working on my fulfilment.&lt;/p&gt;
&lt;h2 id=&#34;professional&#34;&gt;Professional &lt;a href=&#34;#professional&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking back, joining &lt;a href=&#34;&#34;&gt;Mindera&lt;/a&gt; in &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2018/#professional&#34;&gt;2018&lt;/a&gt; was one of the best decisions of my life. I am extremely privileged to work with a bunch of the most talented programmers under the sun. People who I work with, apart from being ridiculously skilled are also funny, helpful and emphatic friends. I would like to thank every single one of you for being you.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-12-28-1.jpg&#34;
  alt=&#34;Plant at Mindera&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Let me share a quick story. It was a cloudy February afternoon when I picked up a phone call from my good friend &lt;a href=&#34;https://twitter.com/tsbnunes&#34;&gt;Tiago Nunes&lt;/a&gt;. Simple question…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi dude. Would you like to host an international conference in Portugal?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My answer was also simple — yes! So instead of giving a conference talk like I initially planned, on Friday 29th of March, I stood on an &lt;a href=&#34;https://www.ccalfandegaporto.com/en/&#34;&gt;Alfândega do Porto&lt;/a&gt; stage in front of hundreds of people being an MC of the initial &lt;a href=&#34;https://typeofconf.com&#34;&gt;typeof&lt;/a&gt; conference. It was an unforgettable experience and you better stay tuned because the continuation of this story is coming shortly next year.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-12-28-2.jpg&#34;
  alt=&#34;Organizers of typeof conference on the stage&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;After a few years of working on the web platform as a front end developer, this year threw me into the deep end of server-side. I am currently working on a transition from monolithic, outdated codebase to modern, serverless architecture for a huge UK based client (sorry, cannot reveal a name). I am extremely happy to have an opportunity to embrace the web from the backend perspective but the first few months were not smooth. Being surrounded by engineers familiar with concepts that I have never heard of wasn&amp;rsquo;t fun. My understanding of the new stack quickly improved. I managed to transition anxiety to an opportunity to learn. I am glad and confident to say that I am a much better programmer than I use to be twelve months ago.&lt;/p&gt;
&lt;p&gt;For some people, &amp;ldquo;work&amp;rdquo; is something that only happens between 9:00 AM and 5:00 PM. That&amp;rsquo;s not the case for me. I manage to accomplish some of the best pieces of productive work outside of these boundaries. The website that you are reading now has been created outside of my day-to-day job and has become one of my biggest achievements ever. It exploded this year and it is bigger than ever before, counting around 8 thousands unique visitors every single day. I published around 30 articles this year, received hundreds of comments and some of my articles has been reposted on multiple reputable websites. Overall it was another fantastic year for me being a contributor to the open web platform and I would like to thank you all for reading, your feedback and your support.&lt;/p&gt;
&lt;h2 id=&#34;personal&#34;&gt;Personal &lt;a href=&#34;#personal&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;People say that a &amp;ldquo;change&amp;rdquo; is a good thing, but I am glad that not a lot changed in my &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2018/#personal&#34;&gt;personal life since the last year&lt;/a&gt; — I am still a truly happy man. I am always surrounded by a bunch of good friends who I can count on. Despite some relationship ups and downs, &lt;a href=&#34;https://zuzannarupinska.com&#34;&gt;Zuzanna&lt;/a&gt; keeps tolerating her annoying boyfriend pretty well. One more thing! Our household recently welcomed this little princess — her name is Yoko, she is messy as f**k and loves jumping on my face when I am asleep. Most charming pussycat ever!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-12-28-3.jpg&#34;
  alt=&#34;My cat Yoko&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Even living in the break-neck paced software industry, life would be boring without some non-technical passions. I neglected my passion for cycling for a few years and this year it has been reborn. A bunch of friends, hilly north England and my beloved titanium &lt;a href=&#34;https://www.planetx.co.uk/i/q/CBPXTEMV3FOR1700/planet-x-tempest-sram-force1-titanium-gravel-bike&#34;&gt;Planet X Tempest&lt;/a&gt; gravel bike is everything that I need after a mind-bending week. Feel free to follow my rides on &lt;a href=&#34;https://www.strava.com/athletes/12877553&#34;&gt;Strava&lt;/a&gt; or &lt;a href=&#34;https://www.komoot.com/user/833144369959&#34;&gt;Komoot&lt;/a&gt; and follow me on &lt;a href=&#34;https://www.instagram.com/pawelgrzybek/&#34;&gt;Instagram&lt;/a&gt; for some muddy cycling pictures.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-12-28-4.jpg&#34;
  alt=&#34;My titanium Planet X Tempest bike&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Power-Habit-What-Life-Business/dp/081298160X&#34;&gt;&amp;ldquo;The Power of Habit&amp;rdquo; by Charles Duhigg&lt;/a&gt; is full of extremely great tips for improving life. One routine that I managed to stick to very effectively is drinking 2500ml of water every single day. Since the beginning of a year, I haven&amp;rsquo;t hit my target 4 times — no real biggie. I created a simple iOS shortcut that helps me to track my daily intake in the Health app. I noticed a big improvement just by following this trivial habit. My skin looks healthier and my digestion is better. Drink water, please! No, coke doesn&amp;rsquo;t count.&lt;/p&gt;
&lt;p&gt;My life is not always the land of milk and honey and there is one thing that makes me truly sad. Living in the UK for the last few years I truly miss my family and Szczecin —  my hometown in Poland. There is nothing that I can do about it in my current life situation apart from trying to visit my beautiful country more often.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-12-28-5.jpg&#34;
  alt=&#34;My hometown Szczecin&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;in-2020-i-will&#34;&gt;In 2020 I will… &lt;a href=&#34;#in-2020-i-will&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I love planning some goals for the new year and put them down on a paper (pixels on the screen in this case). There are quite a few things that would be cool to cross off my bucket list soon.&lt;/p&gt;
&lt;p&gt;Professionally I want to grow, become a better developer, finish my side-project that I spent the last few months on and redesign this website. This website deserves some 2020 look and feel.&lt;/p&gt;
&lt;p&gt;Personally, I wish to lose some weight and keep this state instead of following this rollercoaster-like graph on Apple Health app. Smashing some 100km bike ride sounds like something that I would love to do. Following up my failure from the last year, half-marathon is still on the list to do. Surprisingly reading non-technical books helps me on professional and personal facets so I am planning to do it more often.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t know why but I have this gut feeling that 2020 will bring some big change in my life. I don&amp;rsquo;t know what it is going to be but it is going to be big. Stay safe, healthy and keep on working on yourself. Until next time folks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Attach Visual Studio Code debugger to SAM (Serverless Application Model) local endpoint</title>
      <link>https://pawelgrzybek.com/attach-visual-studio-code-debugger-to-sam-serverless-application-model-local-endpoint/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/attach-visual-studio-code-debugger-to-sam-serverless-application-model-local-endpoint/</guid>
      <description>&lt;p&gt;Hi! I am not going to go through the basics of debugging or AWS SAM framework. At this point you are most likely familiar with those — otherwise, you would’ve not landed on this page. I am going to share with you how to attach &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt; debugger to local endpoint served by &lt;a href=&#34;https://aws.amazon.com/serverless/sam/&#34;&gt;AWS SAM (Serverless Application Model)&lt;/a&gt;. Let&amp;rsquo;s start with a simple server-less example app.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── src
│   └── index.js
└── template.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# template.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2010-09-09&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AWS&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Serverless&lt;span class=&#34;m&#34;&gt;-2016-10-31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RandomNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AWS&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Serverless&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Function&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CodeUri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;src/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;index.handler&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nodejs10.x&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HelloWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;get&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getRandomNumber&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;randomNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getRandomNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And to spin it up on a local endpoint using SAM CLI we have to…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sam local start-api
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see we built this sophisticated server-less program that each time when we hit &lt;code&gt;http://127.0.0.1:3000/api&lt;/code&gt; with a &lt;code&gt;GET&lt;/code&gt; request gives us a random number between 1 and 10. Maybe it isn&amp;rsquo;t a million dollars idea but should do the job as an example for this article.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-12-01-1.jpg&#34;
  alt=&#34;Random number generator built using AWS SAM framework&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;688&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;attach-visual-studio-code-debugger-to-sam-local-endpoint&#34;&gt;Attach Visual Studio Code debugger to SAM local endpoint &lt;a href=&#34;#attach-visual-studio-code-debugger-to-sam-local-endpoint&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A debugger is my favourite way of stepping through the logic of a codebase. Some time ago I used to use mainly the one built into Google Chrome developer tools but nowadays I rarely use anything else than Visual Studio Code. Luckily, &lt;a href=&#34;https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-reference.html#serverless-sam-cli&#34;&gt;SAM CLI&lt;/a&gt; allows us to &lt;a href=&#34;https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-invoke.html&#34;&gt;launch our local API in a debug mode&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sam local start-api -d 5858
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From now on, whenever we execute a request to our endpoint, the program will pause to let us hook up into its internals. To do so using &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt; we need a bit of a config inside &lt;code&gt;.vscode/launch.json&lt;/code&gt; file — I got you covered!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;attach&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Attach to SAM CLI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5858&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;localRoot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;${workspaceRoot}/src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;remoteRoot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/task&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inspector&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;stopOnEntry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, as long as your API is running in debug mode you can attach your IDE to your program by hitting play button on debugger tab or by pressing &lt;!-- raw HTML omitted --&gt;F5&lt;!-- raw HTML omitted --&gt;. Add a breakpoint where you want your execution to pause and voila!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-12-01-2.jpg&#34;
  alt=&#34;Attach Viusal Studio Code debugger to JavaScript file&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;892&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;debug-typescript-codebase&#34;&gt;Debug TypeScript codebase &lt;a href=&#34;#debug-typescript-codebase&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nowadays, I very rarely write JavaScript that doesn&amp;rsquo;t go through any additional transformation before hitting production. &lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt; is my preferred way of writing JavaScript code and even though the debugging setup is a tiny bit more complicated, it is possible and works like a charm. Let&amp;rsquo;s recreate our program using TypeScript.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── dist
│   ├── index.js
│   └── index.js.map
├── src
│   └── index.ts
├── template.yaml
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2010-09-09&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AWS&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Serverless&lt;span class=&#34;m&#34;&gt;-2016-10-31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RandomNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AWS&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Serverless&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Function&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CodeUri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dist/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;index.handler&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nodejs10.x&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HelloWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;get&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getBody&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IEvent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;.exports.handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;IEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;getBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;attach&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Attach to SAM CLI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5858&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;localRoot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;${workspaceRoot}/dist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;outFiles&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;${workspaceFolder}/dist/**/*.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;remoteRoot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/task&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inspector&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;stopOnEntry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It really doesn&amp;rsquo;t matter how you compile your &lt;code&gt;.ts&lt;/code&gt; files to &lt;code&gt;.js&lt;/code&gt; for this article so I skipped this implementation detail for clarity. Compiled version of our program landed in &lt;code&gt;dist&lt;/code&gt; directory and this change has been reflected in &lt;code&gt;CodeUri&lt;/code&gt; value inside the template file. Pay attention to &lt;code&gt;index.js.map&lt;/code&gt; that lives directly next to the compiled version of a program — otherwise, our debugger won&amp;rsquo;t be able to map compiled code to the one inside &lt;code&gt;src&lt;/code&gt; directory. Changes in files tree are reflected in the debugger config file that has been decorated with &lt;code&gt;outFiles&lt;/code&gt; property that helps VSCode to identify the location of transpiled files.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-12-01-3.jpg&#34;
  alt=&#34;Attach Viusal Studio Code debugger to TypeScript file&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;892&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Happy debugging! The same patterns can be reused for tons of other frameworks and build tools. Hopefully, this quick article helped you out. Bye :-*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 November</title>
      <link>https://pawelgrzybek.com/top-picks-2019-november/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-november/</guid>
      <description>&lt;h2 id=&#34;variable-fonts-what-web-authors-need-to-knowhttpsrwtiotypography-tipsvariable-fonts-what-web-authors-need-know&#34;&gt;&lt;a href=&#34;https://rwt.io/typography-tips/variable-fonts-what-web-authors-need-know&#34;&gt;Variable Fonts: What web authors need to know&lt;/a&gt; &lt;a href=&#34;#variable-fonts-what-web-authors-need-to-knowhttpsrwtiotypography-tipsvariable-fonts-what-web-authors-need-know&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A great guide on using CSS Variable Fonts in 2019 by &lt;a href=&#34;https://twitter.com/jpamental&#34;&gt;Jason Pamental&lt;/a&gt;. If you are building a modern type system this resource comes very handy.&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-onlinehttpsvisualstudiomicrosoftcomservicesvisual-studio-online&#34;&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/services/visual-studio-online/&#34;&gt;Visual Studio Online&lt;/a&gt; &lt;a href=&#34;#visual-studio-onlinehttpsvisualstudiomicrosoftcomservicesvisual-studio-online&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is happening! My favourite code editor built using web technologies is moving to the place where it belongs to — to the web. Microsoft team just announced a cloud-powered version of Visual Studio Code!&lt;/p&gt;
&lt;h2 id=&#34;the-facetime-bug-and-the-dangers-of-implicit-state-machineshttpsmediumcomdavidkpianothe-facetime-bug-and-the-dangers-of-implicit-state-machines-a5f0f61bdaa2&#34;&gt;&lt;a href=&#34;https://medium.com/@DavidKPiano/the-facetime-bug-and-the-dangers-of-implicit-state-machines-a5f0f61bdaa2&#34;&gt;The FaceTime Bug and the Dangers of Implicit State Machines&lt;/a&gt; &lt;a href=&#34;#the-facetime-bug-and-the-dangers-of-implicit-state-machineshttpsmediumcomdavidkpianothe-facetime-bug-and-the-dangers-of-implicit-state-machines-a5f0f61bdaa2&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/DavidKPiano&#34;&gt;David K. Piano&lt;/a&gt; explains finite state machines using a famous iOS FaceTime bug as an example. It was introduced in one of the past versions of Apple operating system by not paying enough attention to applications state. It is a great, practical explanation of a machine state concept. I have been intrigued by the paradigm for a little while and after reading this article it clicked.&lt;/p&gt;
&lt;h2 id=&#34;announcing-typescript-37httpsdevblogsmicrosoftcomtypescriptannouncing-typescript-3-7&#34;&gt;&lt;a href=&#34;https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/&#34;&gt;Announcing TypeScript 3.7&lt;/a&gt; &lt;a href=&#34;#announcing-typescript-37httpsdevblogsmicrosoftcomtypescriptannouncing-typescript-3-7&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tons of awesome new language, compiler, and tooling features landed to TypeScript 3.7. Optional chaining and nullish coalescing as are those that you are going to see in my codebases a lot.&lt;/p&gt;
&lt;h2 id=&#34;chrome-dev-summit-2019httpswwwyoutubecomplaylistlistplnykxof6rcida1ughqy45bqlul0vcvkmr&#34;&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNYkxOF6rcIDA1uGhqy45bqlul0VcvKMr&#34;&gt;Chrome Dev Summit 2019&lt;/a&gt; &lt;a href=&#34;#chrome-dev-summit-2019httpswwwyoutubecomplaylistlistplnykxof6rcida1ughqy45bqlul0vcvkmr&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Chrome Dev Summit 2019 videos are live and you can find them all in this one handy playlist. One of these events in the web industry that we should pay attention to. I am planning to watch probably the majority of these talks.&lt;/p&gt;
&lt;h2 id=&#34;stringprototypereplaceallhttpsv8devfeaturesstring-replaceall&#34;&gt;&lt;a href=&#34;https://v8.dev/features/string-replaceall&#34;&gt;String.prototype.replaceAll&lt;/a&gt; &lt;a href=&#34;#stringprototypereplaceallhttpsv8devfeaturesstring-replaceall&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have been writing JavaScript for a while now you know that replacing all the instances of the matching pattern in a string can become tricky. To simplify exactly this such a common need &lt;code&gt;replaceAll()&lt;/code&gt; is coming to V8.&lt;/p&gt;
&lt;h2 id=&#34;metricshttpswebdevmetrics&#34;&gt;&lt;a href=&#34;https://web.dev/metrics/&#34;&gt;Metrics&lt;/a&gt; &lt;a href=&#34;#metricshttpswebdevmetrics&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google team presented on Google Dev Summit a very cool resource by Philip Walton. This website describes in a very detailed way all the metrics that Google takes into consideration. Handy resource.&lt;/p&gt;
&lt;h2 id=&#34;css-logical-propertieshttpsadrianrosellicom201911css-logical-propertieshtml&#34;&gt;&lt;a href=&#34;https://adrianroselli.com/2019/11/css-logical-properties.html&#34;&gt;CSS Logical Properties&lt;/a&gt; &lt;a href=&#34;#css-logical-propertieshttpsadrianrosellicom201911css-logical-propertieshtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/aardrian&#34;&gt;Adrian Roselli&lt;/a&gt; published this explainer of logical properties. It is full of interactive demos that help to understand the particular concept better. I am super excited about this set of new properties in CSS specification.&lt;/p&gt;
&lt;h2 id=&#34;new-for-aws-lambda--sqs-fifo-as-an-event-sourcehttpsawsamazoncomblogscomputenew-for-aws-lambda-sqs-fifo-as-an-event-source&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/new-for-aws-lambda-sqs-fifo-as-an-event-source/&#34;&gt;New for AWS Lambda – SQS FIFO as an event source&lt;/a&gt; &lt;a href=&#34;#new-for-aws-lambda--sqs-fifo-as-an-event-sourcehttpsawsamazoncomblogscomputenew-for-aws-lambda-sqs-fifo-as-an-event-source&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First-in-first-out finally supported by Amazon Simple Queue Service (SQS). Such a useful addition for server-less architects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Does JavaScript keep you too busy to care about CSS? Here are recent features you want to know about!</title>
      <link>https://pawelgrzybek.com/does-javascript-keep-you-too-busy-to-care-about-css-here-are-recent-features-you-want-to-know-about/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/does-javascript-keep-you-too-busy-to-care-about-css-here-are-recent-features-you-want-to-know-about/</guid>
      <description>&lt;p&gt;For the last few years, I have been busy exploring the world of JavaScript to the point that I neglected my passion for CSS. I am sure there are more people like me out there. I owe CSS a debt so I curated a list of recent features that you may want to know about if you didn&amp;rsquo;t follow this space for a little while.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-11-27-1.jpg&#34;
  alt=&#34;Modern exciting CSS features&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1142&#34;
/&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#css-custom-properties-css-variables&#34;&gt;CSS custom properties (CSS variables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#css-grid-layout&#34;&gt;CSS Grid Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variable-fonts&#34;&gt;Variable fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#css-scroll-snap&#34;&gt;CSS Scroll Snap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#css-logical-properties-and-values&#34;&gt;CSS Logical Properties and Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#position-sticky&#34;&gt;Position sticky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#houdini&#34;&gt;Houdini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#feature-query-with-supports&#34;&gt;Feature query with @supports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#preprocessors-and-the-css-in-js-drama&#34;&gt;Preprocessors and the CSS-in-JS drama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extra-stuff&#34;&gt;Extra stuff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-custom-properties-css-variables&#34;&gt;CSS custom properties (CSS variables) &lt;a href=&#34;#css-custom-properties-css-variables&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We got used to assigning reusable values to variables using pre-processors like &lt;a href=&#34;https://sass-lang.com&#34;&gt;Sass&lt;/a&gt;, &lt;a href=&#34;http://lesscss.org&#34;&gt;LESS&lt;/a&gt; and &lt;a href=&#34;http://stylus-lang.com&#34;&gt;Stylus&lt;/a&gt;. This feature became popular to the point that &lt;a href=&#34;https://drafts.csswg.org/css-variables/&#34;&gt;CSS Custom Properties&lt;/a&gt; became a thing and the &lt;a href=&#34;https://caniuse.com/#feat=css-variables&#34;&gt;browsers support&lt;/a&gt; nowadays is satisfactory. I published &lt;a href=&#34;https://pawelgrzybek.com/css-custom-properties-explained/&#34;&gt;&amp;ldquo;CSS Custom Properties explained&amp;rdquo;&lt;/a&gt; around three years ago where I go in-depth about this feature and show some practical example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--cool-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;hotpink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;hover&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--cool-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;lime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;css-grid-layout&#34;&gt;CSS Grid Layout &lt;a href=&#34;#css-grid-layout&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Layout is a thing that CSS has never been good at. From terrible hack using tables, neither nice use of &lt;code&gt;float&lt;/code&gt;s through to more understandable &lt;code&gt;flex&lt;/code&gt; layout. We finally got a legit way of doing it right — &lt;a href=&#34;https://drafts.csswg.org/css-grid/&#34;&gt;CSS Grid Layout&lt;/a&gt;. I published &lt;a href=&#34;https://pawelgrzybek.com/lets-get-into-the-basics-of-css-grid-layout-model/&#34;&gt;&amp;ldquo;Let&amp;rsquo;s get into the basics of CSS Grid Layout Model&amp;rdquo;&lt;/a&gt; in 2015 when this specification was slowly shaping out. Today we have a great &lt;a href=&#34;https://caniuse.com/#feat=css-grid&#34;&gt;browser adoption for CSS Grid&lt;/a&gt; and it gives me a wide smile on my face because I see more and more websites using it. It is close to impossible to show you a snippet that works as a holistic explainer because the specification is humongous. If you want to dip your toes into CSS Grid I cannot recommend enough &lt;a href=&#34;https://cssgrid.io&#34;&gt;&amp;ldquo;CSS Grid&amp;rdquo; course&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wesbos&#34;&gt;Wes Bos&lt;/a&gt;. For people interested in the subject I recommend to follow &lt;a href=&#34;https://twitter.com/rachelandrew&#34;&gt;Rachel Andrew&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jensimmons&#34;&gt;Jen Simmons&lt;/a&gt; on Twitter. If you are after lazy copy-and-paste reference, &lt;a href=&#34;https://css-tricks.com/snippets/css/complete-guide-grid/&#34;&gt;&amp;ldquo;A Complete Guide to Grid&amp;rdquo;&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/css&#34;&gt;CSS Tricks&lt;/a&gt; is everything you need. Let&amp;rsquo;s have a quick look at a basic example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;wrapper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fr&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;sidebar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;footer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;variable-fonts&#34;&gt;Variable fonts &lt;a href=&#34;#variable-fonts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since the inception of the web platform, we have been able to use a web-safe subset of font families. This became a design restriction, so we got support for custom typefaces via &lt;code&gt;@font-face&lt;/code&gt; at-rule. &lt;a href=&#34;https://drafts.csswg.org/css-fonts-4/&#34;&gt;CSS Fonts Module Level 4&lt;/a&gt; adds a concept of Variable Fonts that puts custom fonts to the whole new level. Rather than fetching separate font file for every width, weight, or style, we get many different variations of a typeface incorporated into a single file. Performance without compromising design requirements at the same time — yes, please! To control basic typeface characteristics (weight, width, slant, italic, and optical size) we can use one of the registered axes. On top of that typographers can register custom variation axis that gives them almost infinite possibilities. &lt;a href=&#34;https://twitter.com/jpamental&#34;&gt;Jason Pamental&lt;/a&gt; maintains an amazing resource titled &lt;a href=&#34;https://rwt.io/typography-tips/variable-fonts-what-web-authors-need-know&#34;&gt;&amp;ldquo;Variable Fonts: What web authors need to know&amp;rdquo;&lt;/a&gt; which is the best guide to use Variable Fonts. Presented on CSSconf EU 2019 by the same author &lt;a href=&#34;https://youtu.be/0AsAjHPupKQ&#34;&gt;&amp;ldquo;Modern Typographic Systems With Variable Fonts&amp;rdquo;&lt;/a&gt; is very informative talk for sexy typography fans. Time for quick example and little interactive demo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;font-face&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;Inter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Inter.woff2&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Inter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;line-height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;font-variation-settings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;wght&amp;#39;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;slnt&amp;#39;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/0AsAjHPupKQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;css-scroll-snap&#34;&gt;CSS Scroll Snap &lt;a href=&#34;#css-scroll-snap&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Historically we have been throwing tons of JavaScript on our web projects to achieve some sort of scroll snapping. You can partially blame me for that because I am the creator of one of the most popular carousel libraries out there — &lt;a href=&#34;https://github.com/pawelgrzybek/siema&#34;&gt;Siema.js&lt;/a&gt;. Let me tell you a thing — do not use it! All the JavaScript solution come with some sort of performance and accessibility drawbacks. &lt;a href=&#34;https://drafts.csswg.org/css-scroll-snap-1/&#34;&gt;CSS Scroll Snap&lt;/a&gt; is a native implementation that solves a majority of carousel-obsessed designers requirements. Even if your projects requirement is outside of boundaries of &lt;a href=&#34;https://caniuse.com/#feat=css-snappoints&#34;&gt;browsers support range for CSS Scroll Snap&lt;/a&gt; you don&amp;rsquo;t need to worry too much. It gracefully falls back to regular scroll experience without breaking your layout whatsoever. Quick demo time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;overflow-y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;scroll-snap-type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;mandatory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;app__section&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scroll-snap-align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;css-logical-properties-and-values&#34;&gt;CSS Logical Properties and Values &lt;a href=&#34;#css-logical-properties-and-values&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/css-logical-1/&#34;&gt;CSS Logical Properties and Values&lt;/a&gt; enforce authors to control layout through logical, rather than physical direction and dimension mappings. It vastly improves working on projects that support multiple &lt;a href=&#34;https://www.w3.org/TR/css-writing-modes-4/&#34;&gt;writing modes&lt;/a&gt;. For example, &lt;code&gt;border-inline-start&lt;/code&gt; in &lt;code&gt;horizontal-tb&lt;/code&gt; draws a border on the left-hand side of an element but for &lt;code&gt;vertical-lr&lt;/code&gt; it will appear on the bottom of a node. This is a well-thought system designed with accessibility and internationalization in mind. I cannot recommend enough &lt;a href=&#34;https://adrianroselli.com/2019/11/css-logical-properties.html&#34;&gt;&amp;ldquo;CSS Logical Properties&amp;rdquo; by Adrian Roselli&lt;/a&gt; – easily the best resource out there. This CodePen taken from Adrian&amp;rsquo;s post is a fantastic visual explainer.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;position-sticky&#34;&gt;Position sticky &lt;a href=&#34;#position-sticky&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I can&amp;rsquo;t count how many approaches of building a sticky header element I came across during my career. They always relied on window sizes combined with &lt;code&gt;scroll&lt;/code&gt; event. Later on, &lt;code&gt;IntersectionObserver&lt;/code&gt; improved a bit — if you are not familiar with this fantastic interface, you should give my &lt;a href=&#34;https://pawelgrzybek.com/the-intersection-observer-api-explained/&#34;&gt;&amp;ldquo;The Intersection Observer API explained&amp;rdquo;&lt;/a&gt; a read. Wouldn&amp;rsquo;t it be cool to achieve this effect using just CSS? Good news is coming — it is possible now and the &lt;a href=&#34;https://caniuse.com/#feat=css-sticky&#34;&gt;browser support for &lt;code&gt;position: sticky&lt;/code&gt;&lt;/a&gt; is sufficient for some. Look how simple it is!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;sticky&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;houdini&#34;&gt;Houdini &lt;a href=&#34;#houdini&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This one deserves a whole separated article but briefly… &lt;a href=&#34;https://drafts.css-houdini.org&#34;&gt;Houdini&lt;/a&gt; is a set of low-level APIs that exposes access to CSSOM (CSS Object Model) enabling developers to extend CSS by hooking into the styling and layout process of a browser’s engine. With this set of interfaces, only two restrictions come into play: your imagination and the browser support presented on &lt;a href=&#34;https://ishoudinireadyyet.com&#34;&gt;&amp;ldquo;Is Houdini ready yet‽&amp;quot;&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/DasSurma&#34;&gt;Surma&lt;/a&gt;. To find out about the power of Houdini I highly encourage you to check &lt;a href=&#34;https://css-houdini.rocks&#34;&gt;&amp;ldquo;CSS Houdini Experiments&amp;rdquo;&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/iamvdo&#34;&gt;Vincent De Oliveira&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/GhRE3rML9t4&#34;&gt;&amp;ldquo;CSS Houdini &amp;amp; The Future of Styling by Una Kravets&amp;rdquo;&lt;/a&gt; is great and up-to-date introduction video. I would be careful using it in production yet, but it is a space to watch.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/GhRE3rML9t4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;feature-query-with-supports&#34;&gt;Feature query with @supports &lt;a href=&#34;#feature-query-with-supports&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are wondering if the browser support for features listed above is sufficient, I have something that will give you a better motivation to start using them. Native feature detection that I elaborated on in my article &lt;a href=&#34;https://pawelgrzybek.com/native-feature-detection-with-csssupports-api/&#34;&gt;&amp;ldquo;Native feature detection with CSS.supports() API&amp;rdquo;&lt;/a&gt; is a CSS / JS native way to check if your browser supports feature of interest. Look how cool it is!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;supports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;grid-gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;preprocessors-and-the-css-in-js-drama&#34;&gt;Preprocessors and the CSS-in-JS drama &lt;a href=&#34;#preprocessors-and-the-css-in-js-drama&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I mentioned in the foreword that, I regret neglecting my passion for CSS for the last few years. The CSS-in-JS drama is a thing that I am glad I missed. My take! If you need one, &lt;a href=&#34;https://github.com/styled-components/styled-components&#34;&gt;styled-components&lt;/a&gt;, &lt;a href=&#34;https://emotion.sh/&#34;&gt;Emotion&lt;/a&gt; and &lt;a href=&#34;https://github.com/css-modules/css-modules&#34;&gt;css-modules&lt;/a&gt; are safe bets to work with and I will pick one of these when I need it. For now, I don&amp;rsquo;t need it and I am happy.&lt;/p&gt;
&lt;p&gt;CSS preprocessors like &lt;a href=&#34;https://sass-lang.com&#34;&gt;Sass&lt;/a&gt;, &lt;a href=&#34;http://lesscss.org&#34;&gt;LESS&lt;/a&gt; and &lt;a href=&#34;http://stylus-lang.com&#34;&gt;Stylus&lt;/a&gt; are not dead yet but slowly losing popularity simply because CSS by itself is getting much more powerful. I see a significant amount of people working with &lt;a href=&#34;https://postcss.org&#34;&gt;PostCSS&lt;/a&gt; that deserves to make it to this list. Probably one of the most exciting recent events from this space is the announcement of Sass modules. &lt;a href=&#34;https://css-tricks.com/author/miriam/&#34;&gt;Miriam Suzanne&lt;/a&gt; posted recently &lt;a href=&#34;https://css-tricks.com/author/miriam/&#34;&gt;&amp;ldquo;Introducing Sass Modules&amp;rdquo;&lt;/a&gt; on CSS Tricks that explains the concept (shouldn&amp;rsquo;t be alien for JavaScript developers familiar with modules).&lt;/p&gt;
&lt;h2 id=&#34;extra-stuff&#34;&gt;Extra stuff &lt;a href=&#34;#extra-stuff&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I lot more stuff could be included on this list but I didn&amp;rsquo;t want to make this article miles long. I highly encourage you to follow &lt;a href=&#34;https://www.youtube.com/MozillaDeveloper&#34;&gt;Mozilla Developer&lt;/a&gt; where team members dig into obscure features of CSS. Another cool resource to watch to quickly catch up some freshness is a great talk by &lt;a href=&#34;https://twitter.com/Una&#34;&gt;Una Kravets&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/argyleink&#34;&gt;Adam Argyle&lt;/a&gt; &lt;a href=&#34;https://youtu.be/-oyeaIirVC0&#34;&gt;&amp;ldquo;Next-generation web styling&amp;rdquo;&lt;/a&gt; from Chrome Dev Summit 2019.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/-oyeaIirVC0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;keep-on-building-beautiful-things&#34;&gt;Keep on building beautiful things &lt;a href=&#34;#keep-on-building-beautiful-things&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope that this list helped you out to modernize stylesheets of your current project. Let me know what is your favorite modern piece of CSS. Keep on building beautiful things and I will see you next time. Peace!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 October</title>
      <link>https://pawelgrzybek.com/top-picks-2019-october/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-october/</guid>
      <description>&lt;h2 id=&#34;introducing-sass-moduleshttpscss-trickscomintroducing-sass-modules&#34;&gt;&lt;a href=&#34;https://css-tricks.com/introducing-sass-modules/&#34;&gt;Introducing Sass Modules&lt;/a&gt; &lt;a href=&#34;#introducing-sass-moduleshttpscss-trickscomintroducing-sass-modules&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everything that is happening within a CSS in JS space excites me so much but good old plain Sass is still one of my favourite ways of authoring styling. I am very glad to see this software is still actively maintained and new features are being added. Sass Modules is a fascinating concept that should be familiar to developers proficient with any programming language that has a concept of modules. &lt;a href=&#34;https://twitter.com/mirisuzanne&#34;&gt;Miriam Suzanne&lt;/a&gt; published a great introduction to the new feature on &lt;a href=&#34;https://twitter.com/css&#34;&gt;CSS-Tricks&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;stephen-cook---100-css-mario-karthttpsvimeocom364369506&#34;&gt;&lt;a href=&#34;https://vimeo.com/364369506&#34;&gt;Stephen Cook - 100% CSS Mario Kart&lt;/a&gt; &lt;a href=&#34;#stephen-cook---100-css-mario-karthttpsvimeocom364369506&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/StephenCookDev&#34;&gt;Stephen Cook&lt;/a&gt; built Mario Kart using CSS only. The idea of using &lt;code&gt;:valid&lt;/code&gt; and &lt;code&gt;:invalid&lt;/code&gt; &lt;code&gt;input&lt;/code&gt; for controlling Mario is just genius! This is a very non-production-ready piece of code is amazing and reminds me of one very important thing about my job — keep it fun!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/364369506&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id=&#34;faces-of-open-sourcehttpwwwfacesofopensourcecom&#34;&gt;&lt;a href=&#34;http://www.facesofopensource.com&#34;&gt;Faces of Open Source&lt;/a&gt; &lt;a href=&#34;#faces-of-open-sourcehttpwwwfacesofopensourcecom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a beautiful project! Look and read some info about the creators of projects that you use all the time. I am a big fan — instant follow on Instagram!&lt;/p&gt;
&lt;h2 id=&#34;introducing-concurrent-mode-experimentalhttpsreactjsorgdocsconcurrent-mode-introhtml&#34;&gt;&lt;a href=&#34;https://reactjs.org/docs/concurrent-mode-intro.html&#34;&gt;Introducing Concurrent Mode (Experimental)&lt;/a&gt; &lt;a href=&#34;#introducing-concurrent-mode-experimentalhttpsreactjsorgdocsconcurrent-mode-introhtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A great guide to get your hands dirty in the experimental concurrent mode in &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;. This is an update that developers are waiting for since the big famous announcement last year. This is still and work in progress so bear that in mind and do not include any of the patterns presented in this article in production-ready codebase.&lt;/p&gt;
&lt;h2 id=&#34;the-two-value-syntax-of-the-css-display-propertyhttpshacksmozillaorg201910the-two-value-syntax-of-the-css-display-property&#34;&gt;&lt;a href=&#34;https://hacks.mozilla.org/2019/10/the-two-value-syntax-of-the-css-display-property/&#34;&gt;The two-value syntax of the CSS Display property&lt;/a&gt; &lt;a href=&#34;#the-two-value-syntax-of-the-css-display-propertyhttpshacksmozillaorg201910the-two-value-syntax-of-the-css-display-property&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are using single value for CSS &lt;code&gt;display&lt;/code&gt; property you are so old-school. Rachel Andrew explains the new part of the CSS specification that introduced two-value syntax. Very well explained as always.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thanks to React Advanced London</title>
      <link>https://pawelgrzybek.com/thanks-to-react-advanced-london/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/thanks-to-react-advanced-london/</guid>
      <description>&lt;p&gt;I couldn&amp;rsquo;t be happier when organizers reached out to me to invite me to the &lt;a href=&#34;https://reactadvanced.com&#34;&gt;React Advanced London&lt;/a&gt;. When it comes to frontend apps React has always been my preference for building interactive experiences. Having an opportunity to spend a day surrounded by industry leaders and creators of my favourite open-source projects is an irreplaceable experience.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-10-26-1.jpg&#34;
  alt=&#34;React Advanced London stage&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Checking some React docs on a stage during a live demo and keeping it relaxed, only hilarious &lt;a href=&#34;https://twitter.com/ken_wheeler&#34;&gt;Ken Wheeler&lt;/a&gt; could do it. Rebuilding React with &lt;a href=&#34;https://twitter.com/swyx&#34;&gt;Shawn Swyx Wang&lt;/a&gt; was extremely helpful to understand frameworks internals. &lt;a href=&#34;https://twitter.com/jaredpalmer&#34;&gt;Jared Palmer&lt;/a&gt; announcing long-awaited &lt;a href=&#34;https://jaredpalmer.com/formik/&#34;&gt;Formik 2.0&lt;/a&gt; — checked!  &lt;a href=&#34;https://twitter.com/nikgraf&#34;&gt;Nik Graf&lt;/a&gt; shared with the audience a list of helpful recommendations about GraphQL Schemas design. &lt;a href=&#34;https://twitter.com/davidrfgomes&#34;&gt;David Gomes&lt;/a&gt; demystified statically typing variants of JavScript. The list goes on and on…&lt;/p&gt;
&lt;p&gt;It was a big pleasure and I am looking forward to the next events put together by this amazing people! Possibly see you very soon in Amsterdam :-*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TIL — The power of JSON.stringify replacer parameter</title>
      <link>https://pawelgrzybek.com/til-the-power-of-json-stringify-replacer-parameter/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/til-the-power-of-json-stringify-replacer-parameter/</guid>
      <description>&lt;p&gt;I had an interesting problem that melted my brain a bit. Let me share what I have learned and maybe save you a few moments when you come across a similar challenge. Lets have some fun with &lt;code&gt;JSON.stringify()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;friends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Dan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pedro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mr Gregory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {&amp;#34;name&amp;#34;:&amp;#34;Pawel&amp;#34;,&amp;#34;friends&amp;#34;:[&amp;#34;Dan&amp;#34;,&amp;#34;Pedro&amp;#34;,&amp;#34;Mr Gregory&amp;#34;]}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No surprises here. Unfortunately, the architecture used on my project (AWS DynamoDB for curious beasts) forced me to deal with &lt;a href=&#34;https://www.ecma-international.org/ecma-262/6.0/#sec-set-objects&#34;&gt;ECMAScript &lt;code&gt;Set&lt;/code&gt;s&lt;/a&gt; and things became more interesting. Just look at this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;friends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Dan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pedro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mr Gregory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {&amp;#34;name&amp;#34;:&amp;#34;Pawel&amp;#34;,&amp;#34;friends&amp;#34;:{}}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I assumed that a set of values is going to be converted to a good old plain array. As you may have guessed I was wrong — &lt;code&gt;Set&lt;/code&gt;s, &lt;code&gt;WeakSet&lt;/code&gt;s, &lt;code&gt;Map&lt;/code&gt;s and &lt;code&gt;WeakMap&lt;/code&gt;s are ignored or replaced by &lt;code&gt;null&lt;/code&gt;. There is hope though — the optional second argument of &lt;a href=&#34;https://www.ecma-international.org/ecma-262/6.0/#sec-json.stringify&#34;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; allows us to escape all &lt;code&gt;Set&lt;/code&gt;s and convert them to an array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;friends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Dan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pedro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mr Gregory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {&amp;#34;name&amp;#34;:&amp;#34;Pawel&amp;#34;,&amp;#34;friends&amp;#34;:[&amp;#34;Dan&amp;#34;,&amp;#34;Pedro&amp;#34;,&amp;#34;Mr Gregory&amp;#34;]}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Problem solved 👏&lt;/p&gt;
&lt;h2 id=&#34;til-today-i-learned&#34;&gt;(TIL) Today I learned &lt;a href=&#34;#til-today-i-learned&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt; takes a second optional argument that can be a recursive replacer function or an array of white-listed keys to be stringified. Like so…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Second argument as a replacer function
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Dan&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {&amp;#34;name&amp;#34;:&amp;#34;Pawel&amp;#34;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Second argument as an array of white-listed keywords
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;friends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Dan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pedro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mr Gregory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {&amp;#34;name&amp;#34;:&amp;#34;Pawel&amp;#34;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Third argument can be a &lt;code&gt;string&lt;/code&gt; or a &lt;code&gt;number&lt;/code&gt;. It decides about the number of spaces or text to used as a delimiter. Look!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Third argument as a number
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;friends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Dan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pedro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mr Gregory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   &amp;#34;name&amp;#34;: &amp;#34;Pawel&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   &amp;#34;friends&amp;#34;: [
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//       &amp;#34;Dan&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//       &amp;#34;Pedro&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//       &amp;#34;Mr Gregory&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   ]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Third argument as a string
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;friends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Dan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pedro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mr Gregory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;🍆&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dudeStringified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 🍆&amp;#34;name&amp;#34;: &amp;#34;Pawel&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 🍆&amp;#34;friends&amp;#34;: [
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 🍆🍆&amp;#34;Dan&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 🍆🍆&amp;#34;Pedro&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 🍆🍆&amp;#34;Mr Gregory&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 🍆]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Until next time, stay curious 💋&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 September</title>
      <link>https://pawelgrzybek.com/top-picks-2019-september/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-september/</guid>
      <description>&lt;h2 id=&#34;pitching-your-writing-to-publicationshttpswwwsmashingmagazinecom201908pitching-writing-publications&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2019/08/pitching-writing-publications/&#34;&gt;Pitching Your Writing To Publications&lt;/a&gt; &lt;a href=&#34;#pitching-your-writing-to-publicationshttpswwwsmashingmagazinecom201908pitching-writing-publications&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recording videos, running personal blog and tweeting helpful stuff are helpful to gain a recognition but writing for reputable services is a next step in leveling up in this industry. &lt;a href=&#34;https://twitter.com/rachelandrew&#34;&gt;Rachel Andrew&lt;/a&gt; writes down a great article full of advices how to do it right. From submitting a post, writing pitch, outlining article to creating a quick bio. Very helpful article!&lt;/p&gt;
&lt;h2 id=&#34;command-line-heroeshttpswwwredhatcomencommand-line-heroes&#34;&gt;&lt;a href=&#34;https://www.redhat.com/en/command-line-heroes&#34;&gt;Command Line Heroes&lt;/a&gt; &lt;a href=&#34;#command-line-heroeshttpswwwredhatcomencommand-line-heroes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I listen to a lot of podcast but very rarely I come across one that I am willing to recommend and share with other people on my website. This one definitely deserves for this recognition. Command Line Heroes by &lt;a href=&#34;https://www.redhat.com/&#34;&gt;Red Hat&lt;/a&gt; is podcast about the history of programming languages. Short informative and very interesting.&lt;/p&gt;
&lt;h2 id=&#34;typescript-vs-reasonml--a-comparisonhttpsblogdubenkodevtypescript-vs-reason&#34;&gt;&lt;a href=&#34;https://blog.dubenko.dev/typescript-vs-reason/&#34;&gt;TypeScript vs ReasonML – A Comparison&lt;/a&gt; &lt;a href=&#34;#typescript-vs-reasonml--a-comparisonhttpsblogdubenkodevtypescript-vs-reason&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/dubenko_&#34;&gt;Oleksandr Dubenko&lt;/a&gt; published a comparison between my beloved &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; and &lt;a href=&#34;https://reasonml.github.io/&#34;&gt;ReasonML&lt;/a&gt;. It was my first exposure to ReasonML and beside the fact that I don&amp;rsquo;t have a time to learn deeply this language now, I found it very interesting to see a side by side comparison.&lt;/p&gt;
&lt;h2 id=&#34;advice-for-technical-writinghttpscss-trickscomadvice-for-technical-writing&#34;&gt;&lt;a href=&#34;https://css-tricks.com/advice-for-technical-writing/&#34;&gt;Advice for Technical Writing&lt;/a&gt; &lt;a href=&#34;#advice-for-technical-writinghttpscss-trickscomadvice-for-technical-writing&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/chriscoyier&#34;&gt;Chris Coyier&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/css&#34;&gt;CSS-Tricks&lt;/a&gt; put together a great list of advices for technical publishers. It is worth to go through this list from time to time. Very helpful resource that deserves for a place in bookmarks list.&lt;/p&gt;
&lt;h2 id=&#34;caniuse-and-mdn-compatibility-data-collaborationhttpshacksmozillaorg201909caniuse-and-mdn-compat-data-collaboration&#34;&gt;&lt;a href=&#34;https://hacks.mozilla.org/2019/09/caniuse-and-mdn-compat-data-collaboration/&#34;&gt;Caniuse and MDN compatibility data collaboration&lt;/a&gt; &lt;a href=&#34;#caniuse-and-mdn-compatibility-data-collaborationhttpshacksmozillaorg201909caniuse-and-mdn-compat-data-collaboration&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since my early days on exploring the web platform, &lt;a href=&#34;https://caniuse.com/&#34;&gt;Caniuse&lt;/a&gt; was my place to to find out about particular feature support across predominant browsers. In terms of documentation, &lt;a href=&#34;https://developer.mozilla.org&#34;&gt;MDN Web Docs (previously known as MDN — the Mozilla Developer Network)&lt;/a&gt; is my favorite place to visit. It is amazing to see that these two services are merging their databases to provide even more accurate and detailed results to web creators.&lt;/p&gt;
&lt;h2 id=&#34;announcing-the-faunadb-add-on-for-netlifyhttpswwwnetlifycomblog20190910announcing-the-faunadb-add-on-for-netlify&#34;&gt;&lt;a href=&#34;https://www.netlify.com/blog/2019/09/10/announcing-the-faunadb-add-on-for-netlify/&#34;&gt;Announcing the FaunaDB Add-on for Netlify&lt;/a&gt; &lt;a href=&#34;#announcing-the-faunadb-add-on-for-netlifyhttpswwwnetlifycomblog20190910announcing-the-faunadb-add-on-for-netlify&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fauna.com&#34;&gt;FaunaDB&lt;/a&gt; is a low latency serverless cloud database with a native GraphQL interface. &lt;a href=&#34;https://www.netlify.com&#34;&gt;Neflity&lt;/a&gt; is your best friend when it comes to static website hosting. FaunaDB add-on for Netlify allows these to to communicate so we can start building stateful applications using our beloved JAM stack.&lt;/p&gt;
&lt;h2 id=&#34;can-i-emailhttpswwwcaniemailcom&#34;&gt;&lt;a href=&#34;https://www.caniemail.com&#34;&gt;Can I email&lt;/a&gt; &lt;a href=&#34;#can-i-emailhttpswwwcaniemailcom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&#34;https://caniuse.com&#34;&gt;Can I use&lt;/a&gt; always when I am not sure about browser support for particular feature. Luckily I don&amp;rsquo;t have to build email campaigns anymore, but if I had too, this new service would be my best friend.&lt;/p&gt;
&lt;h2 id=&#34;headhttpshtmlheaddev&#34;&gt;&lt;a href=&#34;https://htmlhead.dev&#34;&gt;Head&lt;/a&gt; &lt;a href=&#34;#headhttpshtmlheaddev&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A free guide to HTML5 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; elements. Amazing resource for all web creators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thanks to MongoDB.local London 2019</title>
      <link>https://pawelgrzybek.com/thanks-to-mongodb-local-london-2019/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/thanks-to-mongodb-local-london-2019/</guid>
      <description>&lt;p&gt;Thanks to my good friend &lt;a href=&#34;https://www.instagram.com/fidalgodev/&#34;&gt;Pedro Fidalgo&lt;/a&gt; I had the opportunity to attend &lt;a href=&#34;https://www.mongodb.com/local/london&#34;&gt;MongoDB.local London 2019&lt;/a&gt;. The data layer of my current side project (stay tuned because more info is coming soon) lives on &lt;a href=&#34;https://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt; so it would be silly not to join this one.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-09-26-1.jpg&#34;
  alt=&#34;MongoDB.local London 2019 badge&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;933&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Having an opportunity to learn the subject from its creators is irreplaceable and this time it wasn&amp;rsquo;t an exception. I came back home full of new knowledge that I am eager to translate to my codebase. Best practices in data modeling, &lt;a href=&#34;https://www.mongodb.com/cloud/atlas&#34;&gt;MongoDB Atlas&lt;/a&gt; full-text search, client side encryption announced in version 4.2 and and lot more.&lt;/p&gt;
&lt;p&gt;Being quite regular attendee to technical conferences and meetups, I can say only superlatives about this event. Outstanding organization, fantastic venue, awesome swag and absolutely delish food! Positive vibe, always smiling and willing to help team members just shows that MongoDB is a great place to work and a great community to be a part of. Thanks for cool swag bag &lt;a href=&#34;https://twitter.com/BeckFastAtTiffs&#34;&gt;Rebecca&lt;/a&gt; :-)&lt;/p&gt;
&lt;p&gt;Thanks to everyone for this amazing opportunity. I will see you next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 August</title>
      <link>https://pawelgrzybek.com/top-picks-2019-august/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-august/</guid>
      <description>&lt;h2 id=&#34;what-webmasters-should-know-about-googles-core-updateshttpswebmastersgoogleblogcom201908core-updateshtml&#34;&gt;&lt;a href=&#34;https://webmasters.googleblog.com/2019/08/core-updates.html&#34;&gt;What webmasters should know about Google’s “core updates”&lt;/a&gt; &lt;a href=&#34;#what-webmasters-should-know-about-googles-core-updateshttpswebmastersgoogleblogcom201908core-updateshtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Webmaster Central Blog published a great bullet-point list of great SEO practices. Pretty much what I do on my website. Worth to skim through for every single content editor and website owner.&lt;/p&gt;
&lt;h2 id=&#34;how-to-get-experience-as-a-software-engineerhttpskentcdoddscombloghow-to-get-experience-as-a-software-engineer&#34;&gt;&lt;a href=&#34;https://kentcdodds.com/blog/how-to-get-experience-as-a-software-engineer&#34;&gt;How to get experience as a software engineer&lt;/a&gt; &lt;a href=&#34;#how-to-get-experience-as-a-software-engineerhttpskentcdoddscombloghow-to-get-experience-as-a-software-engineer&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/kentcdodds/&#34;&gt;Kent C. Dodds&lt;/a&gt; writes about gaining a new experience as a software engineer. It is not full of advices that will make you a top developer in no time — totally opposite. It contains just a one solid advice that I am not going to spoil to you — you give it a read.&lt;/p&gt;
&lt;h2 id=&#34;webkit-tracking-prevention-policyhttpswebkitorgtracking-prevention-policy&#34;&gt;&lt;a href=&#34;https://webkit.org/tracking-prevention-policy/&#34;&gt;WebKit Tracking Prevention Policy&lt;/a&gt; &lt;a href=&#34;#webkit-tracking-prevention-policyhttpswebkitorgtracking-prevention-policy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Stateful, covert stateful, navigational, fingerprinting and covert tracking are just few popular methods of spying on a user. New WebKit engine prevents all of them out of the box and this policy document goes in depth about them and explains what it means for a platform. Brave but great step forward Apple.&lt;/p&gt;
&lt;h2 id=&#34;optional-chaininghttpsv8devfeaturesoptional-chaining&#34;&gt;&lt;a href=&#34;https://v8.dev/features/optional-chaining&#34;&gt;Optional chaining&lt;/a&gt; &lt;a href=&#34;#optional-chaininghttpsv8devfeaturesoptional-chaining&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Optional chaining is coming to JavaScript and it allows us to ditch old hacky solutions to get a value from deeply nested objects. Nice and clean.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Promise combinators explained</title>
      <link>https://pawelgrzybek.com/promise-combinators-explained/</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/promise-combinators-explained/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects&#34;&gt;Promises added to ECMAScript 2015 specification&lt;/a&gt; gave us a new way of dealing with deferred computations. In &lt;a href=&#34;https://pawelgrzybek.com/from-a-callback-hell-through-promises-to-async-functions/&#34;&gt;&amp;ldquo;From callback hell
through promises to
async functions&amp;rdquo;&lt;/a&gt; I explained the differences between the common methods of dealing with asynchronous code. Today I would like to go through &lt;code&gt;Promise&lt;/code&gt; &lt;a href=&#34;https://wiki.haskell.org/Combinator_pattern&#34;&gt;combinators&lt;/a&gt; — static methods that take compound promises as an argument.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-08-08-1.jpg&#34;
  alt=&#34;Promise&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;676&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;prerequisite--basic-promise-states-and-methods&#34;&gt;Prerequisite — basic promise states and methods &lt;a href=&#34;#prerequisite--basic-promise-states-and-methods&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;then&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; methods should already feel comfortable by now but just in case you need a refresher, let&amp;rsquo;s have a quick glance at this simple example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/pawelgrzybek&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dataJSON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dataJSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Finally resolved / rejected! Uff!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Promise object like this can live in &lt;a href=&#34;https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects&#34;&gt;four distinguished states&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;pending&amp;rdquo; - still waiting&lt;/li&gt;
&lt;li&gt;&amp;ldquo;fulfilled&amp;rdquo; - promise succeeded&lt;/li&gt;
&lt;li&gt;&amp;ldquo;rejected&amp;rdquo; - promise failed&lt;/li&gt;
&lt;li&gt;&amp;ldquo;settled&amp;rdquo; - succeeded or failed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To orchestrate its lifecycle, promises are using a few methods from it&amp;rsquo;s prototype:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;then&lt;/code&gt; - adds callback to fulfilled promise&lt;/li&gt;
&lt;li&gt;&lt;code&gt;catch&lt;/code&gt; - adds callback to rejected promise&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt; - adds callback to settled promise&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course all of these are much more complicated, but to comfortably grasp the concepts explained in the rest of this article this should be more than enough.&lt;/p&gt;
&lt;h2 id=&#34;four-combinators&#34;&gt;Four combinators &lt;a href=&#34;#four-combinators&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Promise.all&lt;/code&gt; and &lt;code&gt;Promise.race&lt;/code&gt; are part of a JavaScript since 2015. In 2020 &lt;code&gt;Promise.allSettled&lt;/code&gt; joins the gang. &lt;code&gt;Promise.any&lt;/code&gt; is nearly there (TBC).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Promise.all&lt;/code&gt; - ES 2015&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.race&lt;/code&gt; - ES 2015&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.allSettled&lt;/code&gt; - ES 2020 (&lt;a href=&#34;https://github.com/tc39/proposal-promise-allSettled&#34;&gt;proposal&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.any&lt;/code&gt; - TBC (&lt;a href=&#34;https://github.com/tc39/proposal-promise-any&#34;&gt;proposal&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;promiseall&#34;&gt;Promise.all() &lt;a href=&#34;#promiseall&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;Promise.all&lt;/code&gt; when you want to check whether all promises fulfilled or if one of them rejected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/pawelgrzybek&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/gabriel403&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Cool dudes are: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; and &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;promiserace&#34;&gt;Promise.race() &lt;a href=&#34;#promiserace&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;Promise.race&lt;/code&gt; when you want to handle the first fulfilled promise or if one of them rejected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;race&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/pawelgrzybek&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/danjordan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`The winner is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;promiseallsettled&#34;&gt;Promise.allSettled() &lt;a href=&#34;#promiseallsettled&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;Promise.allSettled&lt;/code&gt; when you want to handle when all promises are settled regardless of the result (fulfilled or rejected). Look ma, no catch!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;allSettled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/pawelgrzybek&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/danjordan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`All settled`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;promiseany&#34;&gt;Promise.any() &lt;a href=&#34;#promiseany&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;Promise.any&lt;/code&gt; when you want to handle the first promise that fulfills. In contrast to &lt;code&gt;Promise.race&lt;/code&gt; it doesn&amp;rsquo;t reject when one of the promises fail.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/pawelgrzybek&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/users/gabriel403&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Cool dude is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;to-recapitulate&#34;&gt;To recapitulate &lt;a href=&#34;#to-recapitulate&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully this article helped you out. This should help pull it all together for you.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-08-08-2.jpg&#34;
  alt=&#34;Comparison table: Promise.all, Promise.race, Promise.allSettled and Promise.any&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 July</title>
      <link>https://pawelgrzybek.com/top-picks-2019-july/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-july/</guid>
      <description>&lt;h2 id=&#34;how-do-javascripts-global-variables-really-workhttps2alitycom201907global-scopehtml&#34;&gt;&lt;a href=&#34;https://2ality.com/2019/07/global-scope.html&#34;&gt;How do JavaScript’s global variables really work?&lt;/a&gt; &lt;a href=&#34;#how-do-javascripts-global-variables-really-workhttps2alitycom201907global-scopehtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dr. Axel Rauschmayer explains how global variables really work. I learned a ton from this short article despite the fact that I work with JavaScript on daily basis for few years. As always very concise top explanation.&lt;/p&gt;
&lt;h2 id=&#34;netlify-analytics---accurate-insights-without-performance-impactshttpswwwnetlifycomblog20190710netlify-analytics---accurate-insights-without-performance-impacts&#34;&gt;&lt;a href=&#34;https://www.netlify.com/blog/2019/07/10/netlify-analytics---accurate-insights-without-performance-impacts/&#34;&gt;Netlify Analytics - Accurate insights without performance impacts&lt;/a&gt; &lt;a href=&#34;#netlify-analytics---accurate-insights-without-performance-impactshttpswwwnetlifycomblog20190710netlify-analytics---accurate-insights-without-performance-impacts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no chance that I will ever ask my users to download expensive client-side scripts in order to give me some very inaccurate insights about my traffic. My beloved hosting company &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; just announced something that caught my interest though — &lt;a href=&#34;https://www.netlify.com/products/analytics/&#34;&gt;Netlify Analytics&lt;/a&gt;. It is privacy-sensitive, with no performance penalty, doesn&amp;rsquo;t require configuration, server-side tool to monitor trends in page-views, visitors, sources and more. All this available for $9 per site per month. Maybe it is not the cheapest solution but definitely the one closest to my requirements. I will be more than happy to openly share some numbers about this website very soon.&lt;/p&gt;
&lt;h2 id=&#34;announcing-aws-toolkit-for-visual-studio-codehttpsawsamazoncomblogsdeveloperannouncing-aws-toolkit-for-visual-studio-code&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/developer/announcing-aws-toolkit-for-visual-studio-code/&#34;&gt;Announcing AWS Toolkit for Visual Studio Code&lt;/a&gt; &lt;a href=&#34;#announcing-aws-toolkit-for-visual-studio-codehttpsawsamazoncomblogsdeveloperannouncing-aws-toolkit-for-visual-studio-code&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS toolkit for Visual Studio Code users. Yes please!&lt;/p&gt;
&lt;h2 id=&#34;algebraic-effects-for-the-rest-of-ushttpsoverreactedioalgebraic-effects-for-the-rest-of-us&#34;&gt;&lt;a href=&#34;https://overreacted.io/algebraic-effects-for-the-rest-of-us/&#34;&gt;Algebraic Effects for the Rest of Us&lt;/a&gt; &lt;a href=&#34;#algebraic-effects-for-the-rest-of-ushttpsoverreactedioalgebraic-effects-for-the-rest-of-us&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://mobile.twitter.com/dan_abramov&#34;&gt;Dan Abramov&lt;/a&gt; explains to JavaScript developers concept known from programming languages like &lt;a href=&#34;https://www.eff-lang.org/&#34;&gt;Eff&lt;/a&gt; and &lt;a href=&#34;https://www.microsoft.com/en-us/research/project/koka/&#34;&gt;Koka&lt;/a&gt; — algebraic effects. It is interesting conceptual write up. Don&amp;rsquo;t be tricked by the code examples on this article — this thing doesn&amp;rsquo;t exist and potentially never will.&lt;/p&gt;
&lt;h2 id=&#34;css-lists-markers-and-countershttpswwwsmashingmagazinecom201907css-lists-markers-counters&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2019/07/css-lists-markers-counters/&#34;&gt;CSS Lists, Markers, And Counters&lt;/a&gt; &lt;a href=&#34;#css-lists-markers-and-countershttpswwwsmashingmagazinecom201907css-lists-markers-counters&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Usually when I come across explainer articles about another CSS property I totally ignore it and assume that I know the subject well enough. Articles by amazing &lt;a href=&#34;https://twitter.com/rachelandrew&#34;&gt;Rachel Andrew&lt;/a&gt; are different though. I just read all of them and this one is another example of a post that is full of hidden little details that I didn&amp;rsquo;t have a clue about.&lt;/p&gt;
&lt;h2 id=&#34;everything-you-need-to-know-about-css-marginshttpswwwsmashingmagazinecom201907margins-in-css&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2019/07/margins-in-css/&#34;&gt;Everything You Need To Know About CSS Margins&lt;/a&gt; &lt;a href=&#34;#everything-you-need-to-know-about-css-marginshttpswwwsmashingmagazinecom201907margins-in-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Did I mention that &lt;a href=&#34;https://twitter.com/rachelandrew&#34;&gt;Rachel Andrew&lt;/a&gt; is amazing? Another one full of little CSS gems.&lt;/p&gt;
&lt;h2 id=&#34;es-proposal-optional-chaininghttps2alitycom201907optional-chaininghtml&#34;&gt;&lt;a href=&#34;https://2ality.com/2019/07/optional-chaining.html&#34;&gt;ES proposal: optional chaining&lt;/a&gt; &lt;a href=&#34;#es-proposal-optional-chaininghttps2alitycom201907optional-chaininghtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tc39/proposal-optional-chaining&#34;&gt;Optional Chaining proposal&lt;/a&gt; recently hit a stage 3. Most likely this alternative to popular &lt;code&gt;get&lt;/code&gt;  method from lodash will be a part of a future ECMAScript 2020 specification. This article by &lt;a href=&#34;https://twitter.com/rauschma&#34;&gt;Dr. Axel Rauschmayer&lt;/a&gt; explains ins and outs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I built a thing! Instagram line break!</title>
      <link>https://pawelgrzybek.com/i-built-a-thing-instagram-line-break/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-built-a-thing-instagram-line-break/</guid>
      <description>&lt;p&gt;It was a great day cycling around Peak District with my friends. I came back home very keen to share on Instagram a few pictures that I took that day. I prepared a few really cool pictures but I really struggled to add a description in a format that I wanted it to be. Turns out that Instagram doesn&amp;rsquo;t want you to insert line breaks between caption paragraphs (apparently the same restriction applies to bio). &amp;ldquo;There must be a way to do it&amp;rdquo; I thought, and two hours later I came out with…&lt;/p&gt;
&lt;h2 id=&#34;instagram-line-break&#34;&gt;Instagram line break &lt;a href=&#34;#instagram-line-break&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using &lt;a href=&#34;https://instagram-line-break.app/&#34;&gt;Instagram line break&lt;/a&gt; is as simple as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write your caption / bio in the text box.&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Copy to clipboard&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Paste into Instagram.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-07-11-1.jpg&#34;
  alt=&#34;Instagram line break app&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;942&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;If you add it to your home-screen, you should get a native app experience — thanks to PWA (Progressive Web App). No need to download anything from Google Play / AppStore. As always, &lt;a href=&#34;https://github.com/pawelgrzybek/instagram-line-break.app&#34;&gt;the source code of this little project&lt;/a&gt; is open sourced on Github. Thanks for help &lt;a href=&#34;https://www.instagram.com/fidalgodev/&#34;&gt;Pedro&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/danjordan&#34;&gt;Dan&lt;/a&gt;. Enjoy :-*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure a local WordPress development using Docker</title>
      <link>https://pawelgrzybek.com/configure-a-local-wordpress-development-using-docker/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/configure-a-local-wordpress-development-using-docker/</guid>
      <description>&lt;p&gt;One of the most popular articles on my website is &lt;a href=&#34;https://pawelgrzybek.com/configure-a-local-wordpress-development-on-macos-from-scratch/&#34;&gt;&amp;ldquo;Configure a local WordPress development on macOS from scratch&amp;rdquo;&lt;/a&gt;. I have recently used &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; a lot so I decided to tackle the same subject again but this time using containers.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-07-04-1.jpg&#34;
  alt=&#34;Wordpress and Docker websites&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;955&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;This is not a Docker tutorial although by following along you learn how helpful this tool can be. I highly encourage you to familiarize yourself with few basic concepts like: &lt;a href=&#34;https://docs.docker.com/glossary/?term=image&#34;&gt;images&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/glossary/?term=container&#34;&gt;containers&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/config/containers/container-networking/&#34;&gt;networks&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/glossary/?term=volume&#34;&gt;volumes&lt;/a&gt;. Having a &lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker app&lt;/a&gt; installed makes a lot of sense too. Regular readers know that &lt;a href=&#34;https://pawelgrzybek.com/homebrew-the-best-friend-of-the-macos-user/&#34;&gt;I am a great friend with Homebrew&lt;/a&gt;. Yes, you can use it to download Docker too.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew cask install docker
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;wordpress--mysql--phpmyadmin&#34;&gt;Wordpress + MySQL + phpMyAdmin &lt;a href=&#34;#wordpress--mysql--phpmyadmin&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To comfortably work with WordPress in a bare-bones local environment two components are required, although a third one is nice to have in some circumstances.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://wordpress.org/&#34;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt; or &lt;a href=&#34;https://mariadb.org/&#34;&gt;MariaDB&lt;/a&gt; database&lt;/li&gt;
&lt;li&gt;Database GUI like &lt;a href=&#34;https://www.phpmyadmin.net/&#34;&gt;phpMyAdmin&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-07-04-2.jpg&#34;
  alt=&#34;Wordpress &amp;#43; MySQL &amp;#43; phpMyAdmin&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1116&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/overview/&#34;&gt;Docker compose&lt;/a&gt; is a tool for creating multi-container Docker applications defined using single &lt;code&gt;docker-compose.yml&lt;/code&gt; file (&lt;code&gt;.yml&lt;/code&gt; and &lt;code&gt;.yaml&lt;/code&gt; extension works just fine). Sounds like a fantastic method to connect our three building blocks together. I will do my best to provide helpful descriptions and comments to each of the core building blocks. Start by making a new directory for your website, create a &lt;code&gt;docker-compose.yml&lt;/code&gt; in there and let&amp;rsquo;s finally get into the meat of this article.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir wp &amp;amp;&amp;amp; cd $_ &amp;amp;&amp;amp; touch docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Version of the Compose file format&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Version 3 is the most current and recommended one&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Top building block that defines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# All containers used for this service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Container 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://hub.docker.com/_/mysql&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Image name (optinally version)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mysql&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5.7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Define restart policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#restart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;always&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Volumes definition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Named volume, allows persisted data but without caring where locally it is stored&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://nickjanetakis.com/blog/docker-tip-28-named-volumes-vs-path-based-volumes&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- db_data&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/var/lib/mysql&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Add environment variables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#environment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;password&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wordpress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MYSQL_USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wordpress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wordpress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# List of networks to join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- wp&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Container 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://hub.docker.com/_/wordpress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;wordpress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# List of dependencies&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- db&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Image name (optinally version)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Feel free to add a version of WordPress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# I.e. wordpress:5.2.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wordpress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Define restart policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#restart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;always&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Volumes definition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#volumes&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Maps your local folder, to path in a container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Useful for file edits&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# I like to map only wp-content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# We should not care about WP core files&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./:/var/www/html/wp-content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Add environment variables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#environment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORDPRESS_DB_HOST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;db&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3306&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORDPRESS_DB_USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wordpress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wordpress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Ports mapping&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# List of networks to join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- wp&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Container 3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://hub.docker.com/r/phpmyadmin/phpmyadmin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This one is optional&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;phpmyadmin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# List of dependencies&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- db&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Image name (optinally version)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;phpmyadmin/phpmyadmin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Define restart policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#restart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;always&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Ports mapping&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Add environment variables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.docker.com/compose/compose-file/#environment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PMA_HOST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;db&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;password&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# List of networks to join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- wp&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Top building block that defines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# All networks used for this service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;wp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Top building block that defines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# All volumes used for this service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;db_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it — time to build our stack! Bear in mind that when you run it for a first time it is going to download all necessary stack images. Every subsequent invocation is going to be almost instant.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up -d 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-07-04-3.jpg&#34;
  alt=&#34;Run docker-compose command to spin up a WordPress website&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1018&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;voilà&#34;&gt;Voilà! &lt;a href=&#34;#voil%c3%a0&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully you found this helpful. This simple setup helps me a lot to spin up a new WordPress from scratch in absolutely no time.&lt;/p&gt;
&lt;p&gt;Ps. For simple websites like this one don&amp;rsquo;t use Wordpress. Use &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; instead :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 June</title>
      <link>https://pawelgrzybek.com/top-picks-2019-june/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-june/</guid>
      <description>&lt;h2 id=&#34;wwdc19---apple-developerhttpsdeveloperapplecomwwdc19&#34;&gt;&lt;a href=&#34;https://developer.apple.com/wwdc19/&#34;&gt;WWDC19 - Apple Developer&lt;/a&gt; &lt;a href=&#34;#wwdc19---apple-developerhttpsdeveloperapplecomwwdc19&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Annual Apple event for developers brought lots of great things. My top highlights are: &lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;SwiftUI&lt;/a&gt;, Apple as an identity provider (login with Apple) and this little section of docs about &lt;a href=&#34;https://support.apple.com/en-ca/HT208050&#34;&gt;changing the default shell on your Mac to zsh&lt;/a&gt;. I highly encourage all developers interested in this ecosystem to watch at least an opening ceremony.&lt;/p&gt;
&lt;h2 id=&#34;plugins-are-coming-to-figmahttpswwwfigmacomblogplugins-are-coming-to-figma&#34;&gt;&lt;a href=&#34;https://www.figma.com/blog/plugins-are-coming-to-figma/&#34;&gt;Plugins are coming to Figma&lt;/a&gt; &lt;a href=&#34;#plugins-are-coming-to-figmahttpswwwfigmacomblogplugins-are-coming-to-figma&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sketch plugin ecosystem is an incredible place to find a little code snippets to boost our workflow — similar concept is coming to Figma. Built with technologies that we all know and like (HTML &amp;amp; JavaScript) we can start building plugins for Figma. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h2 id=&#34;firefox-the-evolution-of-a-brandhttpsblogmozillaorgopendesignfirefox-the-evolution-of-a-brand&#34;&gt;&lt;a href=&#34;https://blog.mozilla.org/opendesign/firefox-the-evolution-of-a-brand/&#34;&gt;Firefox: The Evolution Of A Brand&lt;/a&gt; &lt;a href=&#34;#firefox-the-evolution-of-a-brandhttpsblogmozillaorgopendesignfirefox-the-evolution-of-a-brand&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Firefox has always been a browsers. Great one, fast, reliable. It is time for a change and Firefox becomes a brand. A family brand for multiple security and privacy oriented products: browser, encrypted tool to exchange huge files, password manager and a data breach guard. Announcement of range of new products is a great opportunity to present to the world a new branding.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/eYvsIenveTY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Apple changed the default shell from bash to zsh, so did I</title>
      <link>https://pawelgrzybek.com/apple-changed-the-default-shell-from-bash-to-zsh-so-did-i/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/apple-changed-the-default-shell-from-bash-to-zsh-so-did-i/</guid>
      <description>&lt;p&gt;Announced at &lt;a href=&#34;https://developer.apple.com/wwdc19/&#34;&gt;WWDC 2019 (Worldwide Developers Conference)&lt;/a&gt;, &lt;a href=&#34;https://www.apple.com/macos/catalina-preview/&#34;&gt;macOS Catalina&lt;/a&gt; comes with a lot of changes but in all honesty, I didn&amp;rsquo;t expect &lt;a href=&#34;https://support.apple.com/en-ca/HT208050&#34;&gt;switching the default shell to zsh (Z shell)&lt;/a&gt;. Since OS X 10.2 Jaguar released in 2002 bash has been the primary operating system shell, so why all the sudden this change? Long story short — licensing.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-06-06-1.jpg&#34;
  alt=&#34;Bash in version 3.2.57 on macOS Mojave&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;794&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Newer versions of Bash are licensed under the GPLv3 (GNU General Public License version 3) which says you can&amp;rsquo;t use it on a system that blocks 3rd party software installation. That&amp;rsquo;s the reason why macOS stuck with 3.2.57 version released under GPLv2 which dates back to 2007. Licensed under the MIT License &lt;a href=&#34;http://zsh.sourceforge.net&#34;&gt;Z shell&lt;/a&gt; allows Apple to ship regular updates to this command language and keep a great level of compatibility with Bash.&lt;/p&gt;
&lt;p&gt;Because this is the future of my operating system, I spent some time to explore a new shell. Let me share with you how to do it and point out some things that I like the most about the new default shell language.&lt;/p&gt;
&lt;h2 id=&#34;change-your-default-shell&#34;&gt;Change your default shell &lt;a href=&#34;#change-your-default-shell&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fresh installation of &lt;a href=&#34;https://www.apple.com/macos/catalina/&#34;&gt;macOS Catalina&lt;/a&gt; will default to Z shell but an update from the previous version of Apple OS will persist your preference. It is very simple to update this setting though. You have a few options to do so: &lt;code&gt;chsh&lt;/code&gt; CLI tool, Users &amp;amp; Groups panel of System Preferences or Directory Utility built-in app.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-06-06-2.jpg&#34;
  alt=&#34;Change the default login shell on macOS&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1152&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;cool-things-about-zsh&#34;&gt;Cool things about zsh &lt;a href=&#34;#cool-things-about-zsh&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While zsh is mostly feature-compatible with bash there are some minor differences between them. On top of that modern Z shell comes with a lot of useful user experience improvements. Let me share a few of my favourite bits.&lt;/p&gt;
&lt;h3 id=&#34;flexibility-and-open-source-resources&#34;&gt;Flexibility and open-source resources &lt;a href=&#34;#flexibility-and-open-source-resources&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Z shell comes with tons of &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Options.html#Options&#34;&gt;options&lt;/a&gt; that allow you to make your prompt really yours. If you are not a big fan of crafting config files manually, there is several popular open-source tools that help you manage your Zsh configuration. Bundled with hundreds of helpers, plugins and themes &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;Oh My ZSH&lt;/a&gt; is by far the most popular one.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-06-06-3.jpg&#34;
  alt=&#34;Several great zsh frameworks&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1258&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;supercharged-auto-completion&#34;&gt;Supercharged auto-completion &lt;a href=&#34;#supercharged-auto-completion&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not only can you skip &lt;code&gt;cd&lt;/code&gt; to change your current working directory but you can type a path in an extremely lazy way and press then &lt;!-- raw HTML omitted --&gt;tab&lt;!-- raw HTML omitted --&gt;. No need for &lt;code&gt;cd Sites/projectname/src&lt;/code&gt; anymore because &lt;code&gt;s/p/s&lt;/code&gt; is more than enough. This feature is enabled by default on Oh My ZSH framework but you can control it manually using &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Options.html#Description-of-Options-1&#34;&gt;&lt;code&gt;AUTO_CD&lt;/code&gt;&lt;/a&gt; option. Look!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-06-06-4.jpg&#34;
  alt=&#34;Supercharged auto-completion with zsh&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;780&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;This feature is mind-bending. To explore current location just press &lt;!-- raw HTML omitted --&gt;tab&lt;!-- raw HTML omitted --&gt; twice to traverse through inner folders using arrow keys. This feature is part of Oh My ZSH.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-06-06-5.gif&#34;
  alt=&#34;Supercharged auto-completion with zsh&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;800&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;discover-a-commands-options--flags&#34;&gt;Discover a commands options / flags &lt;a href=&#34;#discover-a-commands-options--flags&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is no need to check the man page of a particular command to find a flag that you want to pass. Just type command name - and press tab to discover all possible options and flags.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-06-06-6.jpg&#34;
  alt=&#34;Supercharged auto-completion with zsh&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1402&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;it-is-the-default-on-macos&#34;&gt;It is the default on macOS &lt;a href=&#34;#it-is-the-default-on-macos&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since macOS Catalina it&amp;rsquo;s the default one, so you don&amp;rsquo;t have to do anything to use it. It is fantastic, isn&amp;rsquo;t it?&lt;/p&gt;
&lt;h2 id=&#34;what-do-you-think-about-zsh&#34;&gt;What do you think about zsh? &lt;a href=&#34;#what-do-you-think-about-zsh&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What is your take about Apples recent decision? Do you use zsh or bash? What are your favourite features? Let me know in the comments below. Until next time, happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 May</title>
      <link>https://pawelgrzybek.com/top-picks-2019-may/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-may/</guid>
      <description>&lt;h2 id=&#34;flutter-a-portable-ui-framework-for-mobile-web-embedded-and-desktophttpsdevelopersgoogleblogcom201905flutter-io19html&#34;&gt;&lt;a href=&#34;https://developers.googleblog.com/2019/05/Flutter-io19.html&#34;&gt;Flutter: a Portable UI Framework for Mobile, Web, Embedded, and Desktop&lt;/a&gt; &lt;a href=&#34;#flutter-a-portable-ui-framework-for-mobile-web-embedded-and-desktophttpsdevelopersgoogleblogcom201905flutter-io19html&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google I/O every year brings a lot of exciting news in the software and hardware world. One of the coolest one is Flutter that is no longer a tool to build efficient multi-platform mobile applications but also for Web and desktop platforms. I have a very little experience with this Dart-based framework but I am extremely keen to have a great purpose to get my hands dirty with it. Some time ago React Native would be me my platform of choice to build a mobile app. Things changed — thanks to Flutter.&lt;/p&gt;
&lt;h2 id=&#34;announcing-wsl-2httpsdevblogsmicrosoftcomcommandlineannouncing-wsl-2&#34;&gt;&lt;a href=&#34;https://devblogs.microsoft.com/commandline/announcing-wsl-2/&#34;&gt;Announcing WSL 2&lt;/a&gt; &lt;a href=&#34;#announcing-wsl-2httpsdevblogsmicrosoftcomcommandlineannouncing-wsl-2&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Windows Subsystem for Linux 2 (WSL 2) instead of emulating the API of Linux kernel, will be shipped with optimized for size and performance Linux. Like every other Linux distributions, this will live on GitHub ready for open source contributions. The first preview of WSL 2 is due to ship in June 2019.&lt;/p&gt;
&lt;h2 id=&#34;introducing-windows-terminalhttpsdevblogsmicrosoftcomcommandlineintroducing-windows-terminal&#34;&gt;&lt;a href=&#34;https://devblogs.microsoft.com/commandline/introducing-windows-terminal/&#34;&gt;Introducing Windows Terminal&lt;/a&gt; &lt;a href=&#34;#introducing-windows-terminalhttpsdevblogsmicrosoftcomcommandlineintroducing-windows-terminal&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Microsoft comes with lots of love and care for developers and power users. Next to WSL 2, another big announcement is new, modern, fast, efficient, powerful, and productive terminal application for users of command-line tools and shells. If you like beautiful pictures just watch this sweet promo video.&lt;/p&gt;
&lt;h2 id=&#34;codesandbox-raises-24m-seed-round-led-by-kleiner-perkinshttpscodesandboxiopostcodesandbox-raises-2-4m-seed-round-led-by-kleiner-perkins&#34;&gt;&lt;a href=&#34;https://codesandbox.io/post/CodeSandbox-Raises-2-4M-Seed-Round-led-by-Kleiner-Perkins&#34;&gt;CodeSandbox Raises $2.4M Seed Round led by Kleiner Perkins&lt;/a&gt; &lt;a href=&#34;#codesandbox-raises-24m-seed-round-led-by-kleiner-perkinshttpscodesandboxiopostcodesandbox-raises-2-4m-seed-round-led-by-kleiner-perkins&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had a pleasure to meet &lt;a href=&#34;https://twitter.com/compuives&#34;&gt;Ives van Hoorne&lt;/a&gt; on &lt;a href=&#34;https://typeofconf.com/&#34;&gt;typeof conference&lt;/a&gt; in March. This young and extremely talented dude built a CodeSandbox because he was bored on Java lectures at uni. Today CodeSandbox raises $2.4M and I am really looking forward to the future of this amazing tool. Every single time I use it, it welcomes me with a bunch of new powerful features. Keep on doing amazing job CodeSandbox team!&lt;/p&gt;
&lt;h2 id=&#34;google-fonts-supports-setting-font-displayhttpstwittercomaddyosmanistatus1128548064287952896&#34;&gt;&lt;a href=&#34;https://twitter.com/addyosmani/status/1128548064287952896&#34;&gt;Google Fonts supports setting font-display&lt;/a&gt; &lt;a href=&#34;#google-fonts-supports-setting-font-displayhttpstwittercomaddyosmanistatus1128548064287952896&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks &lt;a href=&#34;https://twitter.com/addyosmani&#34;&gt;Addy&lt;/a&gt; for this amazing news! We have been waiting for this feature for ages. No more tricky fonts loading strategies for all Google Fonts users.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;hands-on-with-portals-seamless-navigations-on-the-webhttpswebdevhands-on-portals&#34;&gt;&lt;a href=&#34;https://web.dev/hands-on-portals/&#34;&gt;Hands-on with Portals: seamless navigations on the Web&lt;/a&gt; &lt;a href=&#34;#hands-on-with-portals-seamless-navigations-on-the-webhttpswebdevhands-on-portals&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the most appealing parts of SPAa (single page applications) are the transitions between pages. New HTML &lt;code&gt;portal&lt;/code&gt; tag opens this feature to MPAs (multi page applications). I am surprised how easy it is to implement and use. I cannot wait to see this feature used in the wild.&lt;/p&gt;
&lt;h2 id=&#34;introducing-github-package-registryhttpsgithubblog2019-05-10-introducing-github-package-registry&#34;&gt;&lt;a href=&#34;https://github.blog/2019-05-10-introducing-github-package-registry/&#34;&gt;Introducing GitHub Package Registry&lt;/a&gt; &lt;a href=&#34;#introducing-github-package-registryhttpsgithubblog2019-05-10-introducing-github-package-registry&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looks like Microsoft is planning to standardize the way how package managers work an keep them closer to the source code of our projects — on GitHub. I am very curious about this idea and cannot wait for more information to be revealed soon. The waitlist for GitHub Package Registry is now open.&lt;/p&gt;
&lt;h2 id=&#34;aws-lambda-adds-support-for-nodejs-v10httpsawsamazoncomabout-awswhats-new201905aws_lambda_adds_support_for_node_js_v10&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2019/05/aws_lambda_adds_support_for_node_js_v10/&#34;&gt;AWS Lambda adds support for Node.js v10&lt;/a&gt; &lt;a href=&#34;#aws-lambda-adds-support-for-nodejs-v10httpsawsamazoncomabout-awswhats-new201905aws_lambda_adds_support_for_node_js_v10&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After release of node version &lt;code&gt;8.10&lt;/code&gt; in AWS Lambda runtime more than a year ago, it is a good time to update to version &lt;code&gt;10.x&lt;/code&gt;. For me the biggest feature of Node &lt;code&gt;10.x&lt;/code&gt; is a new version of &lt;code&gt;npm&lt;/code&gt; that comes with some powerful features. In node by itself there is a lot new things related with error handling, native add-ons, HTTP protocol improvements and a massive performance boost.&lt;/p&gt;
&lt;h2 id=&#34;w3c-and-the-whatwg-signed-an-agreement-to-collaborate-on-a-single-version-of-html-and-domhttpswwww3orgblognewsarchives7753&#34;&gt;&lt;a href=&#34;https://www.w3.org/blog/news/archives/7753&#34;&gt;W3C and the WHATWG signed an agreement to collaborate on a single version of HTML and DOM&lt;/a&gt; &lt;a href=&#34;#w3c-and-the-whatwg-signed-an-agreement-to-collaborate-on-a-single-version-of-html-and-domhttpswwww3orgblognewsarchives7753&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A single version of the HTML and DOM specifications is a result of an agreement between W3C and the WHATWG. Since now on, HTML and DOM Living Standards are going to be maintained by WHATWG on community-facing repositories. &lt;a href=&#34;https://www.w3.org/blog/2019/05/w3c-and-whatwg-to-work-together-to-advance-the-open-web-platform/&#34;&gt;&amp;ldquo;W3C and WHATWG to work together to advance the open Web platform&amp;rdquo;&lt;/a&gt; by Jeff Jaffe goes in depth about the further collaboration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript interface vs. type</title>
      <link>https://pawelgrzybek.com/typescript-interface-vs-type/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/typescript-interface-vs-type/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not an expert in the field of TypeScript by any means but I have worked with it every single day for the last few months and I am really enjoying the ride. Beneath its straight-forward set of features there are some confusing concepts as well. Should it be an &lt;code&gt;interface&lt;/code&gt; or a &lt;code&gt;type&lt;/code&gt; alias? This is a question asked a lot by newcomers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;kr&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DudeInterface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pawel&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;DudeInterface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;31&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DudeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pawel&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;DudeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;31&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both methods are correct to describe a structure of an object but which one should we use? As always — it depends. Let me compare and contrast them.&lt;/p&gt;
&lt;h2 id=&#34;misleading-section-of-the-official-typescript-handbook&#34;&gt;Misleading section of the official TypeScript Handbook &lt;a href=&#34;#misleading-section-of-the-official-typescript-handbook&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.typescriptlang.org/docs/handbook/advanced-types.html#interfaces-vs-type-aliases&#34;&gt;&amp;ldquo;Interfaces vs. Type Aliases&amp;rdquo;&lt;/a&gt; section of the official TypeScript Handbook explains the characteristics and differences between both of them.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Interfaces create a new name, type aliases don’t&lt;/li&gt;
&lt;li&gt;Type aliases cannot be extended or implemented from&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since &lt;a href=&#34;https://github.com/microsoft/TypeScript-Handbook/commit/939650d392f389090b663bc5117234cfda5d4812&#34;&gt;June 2016&lt;/a&gt; when this part of the documentation was last updated, TypeScript has had a major version bump and lots of functionality has changed. Unfortunately none of these points are true anymore. It is a great time to update this obsolete part of the documentation. I will try to do a better job at explaining the difference. Hopefully the TypeScript Handbook will be updated eventually, then I will get rid of this section of the article.&lt;/p&gt;
&lt;p class=&#34;update&#34;&gt;Microsoft actively works on &lt;a href=&#34;https://microsoft.github.io/TypeScript-New-Handbook/everything/#interface-vs-alias&#34;&gt;a brand new TypeScript Handbook&lt;/a&gt; that does a much better job at explaining the subject. It is a work in progress and we don&amp;rsquo;t know the date when it is going to replace the current Handbook.&lt;/p&gt;

&lt;h2 id=&#34;interfaces-are-restricted-to-an-object-type&#34;&gt;Interfaces are restricted to an object type &lt;a href=&#34;#interfaces-are-restricted-to-an-object-type&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Interface declarations can exclusively represent the shape of an object-like data structures. Type alias declarations can create a name for all kind of types including primitives (&lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt;), union, and intersection types. In a way, this difference makes the &lt;code&gt;type&lt;/code&gt; more flexible. In theory every type declaration that you can express with an &lt;code&gt;interface&lt;/code&gt;, you can recreate using a &lt;code&gt;type&lt;/code&gt; alias. Lets have a look at an example that can be represented using a &lt;code&gt;type&lt;/code&gt; alias but is beyond the power of an &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;you-can-merge-interfaces-but-not-types&#34;&gt;You can merge interfaces but not types &lt;a href=&#34;#you-can-merge-interfaces-but-not-types&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Multiple declarations with the same name are valid only when used with &lt;code&gt;interface&lt;/code&gt;. Doing so doesn&amp;rsquo;t override previous one but produces a merged result containing members from all declarations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;kr&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DudeInterface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DudeInterface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pawel&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;DudeInterface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel Grzybek&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;31&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attempting to merge &lt;code&gt;type&lt;/code&gt;s results in a &lt;code&gt;Duplicate identifier&lt;/code&gt; compiler error.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-05-28-1.jpg&#34;
  alt=&#34;Compiler error caused by attempting to merge type aliases&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;980&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;type-aliases-can-use-computed-properties&#34;&gt;Type aliases can use computed properties &lt;a href=&#34;#type-aliases-can-use-computed-properties&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; keyword can be used to iterate over all of the items in an union of keys. We can use this feature to programmatically generate &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types&#34;&gt;mapped types&lt;/a&gt;. Have a look at this example using &lt;code&gt;type&lt;/code&gt; aliases.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Keys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;firstname&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;surname&amp;#34;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DudeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;DudeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;firstname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Grzybek&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately we cannot take advantage of computed properties in an &lt;code&gt;interface&lt;/code&gt; declaration.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-05-28-2.jpg&#34;
  alt=&#34;Compiler error caused by using computed properties on an interface&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1052&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;deferred-type-resolution-of-interfaces-vs-eager-type-aliases&#34;&gt;&lt;del&gt;Deferred type resolution of interfaces vs. eager type aliases&lt;/del&gt; &lt;a href=&#34;#deferred-type-resolution-of-interfaces-vs-eager-type-aliases&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p class=&#34;update&#34;&gt;This is no longer truth. Since I wrote this article, TypeScript behavior changed slightly and now the resolution of both (types and interfaces) happens in the same phase. Looks like both of them are deferred so the example from the image below is now perfectly valid TypeScript code.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Another difference is when a type is resolved by the compiler. Resolution of an &lt;code&gt;interface&lt;/code&gt; is deferred, means that you can use them to recursively chain types. Resolution of &lt;code&gt;type&lt;/code&gt; aliases is eager and compiler goes crazy when you try to resolve recursively nested types. Look!&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Pals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Pals&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;del&gt;We are allowed to do it, because type of &lt;code&gt;interface&lt;/code&gt;s is deferred. Equivalent with &lt;code&gt;type&lt;/code&gt; alias results with &lt;code&gt;Type alias circularly references itself&lt;/code&gt; compiler error.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-05-28-3.jpg&#34;
  alt=&#34;Recursively chained type aliases result in &amp;amp;ldquo;circularly references itself&amp;amp;rdquo; compiler error&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;860&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;be-consistent&#34;&gt;Be consistent &lt;a href=&#34;#be-consistent&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just because in many situations you can use either of them, it doesn&amp;rsquo;t mean you should use them interchangeably. As an active open source contributor I see some advantages of using &lt;code&gt;interface&lt;/code&gt; for authoring a public API and I tend to use it more often. The &lt;code&gt;type&lt;/code&gt; alias is irreplaceable in some circumstances mentioned in this article. Most importantly — keep it consistent. Hopefully this article helped you out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 April</title>
      <link>https://pawelgrzybek.com/top-picks-2019-april/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-april/</guid>
      <description>&lt;h2 id=&#34;inspect-network-activity---chrome-devtools-101httpsyoutubee1gayquifqo&#34;&gt;&lt;a href=&#34;https://youtu.be/e1gAyQuIFQo&#34;&gt;Inspect Network Activity - Chrome DevTools 101&lt;/a&gt; &lt;a href=&#34;#inspect-network-activity---chrome-devtools-101httpsyoutubee1gayquifqo&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Made by Google Chrome Developers great tutorial about Google Chrome Network tab. Despite the fact that I use it on daily basis I learned few things from it and I believe that you can get one or two things out of it too.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/e1gAyQuIFQo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;fixed-headers-on-page-links-and-overlapping-content-oh-myhttpscss-trickscomfixed-headers-on-page-links-and-overlapping-content-oh-my&#34;&gt;&lt;a href=&#34;https://css-tricks.com/fixed-headers-on-page-links-and-overlapping-content-oh-my/&#34;&gt;Fixed Headers, On-Page Links, and Overlapping Content, Oh My!&lt;/a&gt; &lt;a href=&#34;#fixed-headers-on-page-links-and-overlapping-content-oh-myhttpscss-trickscomfixed-headers-on-page-links-and-overlapping-content-oh-my&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Have you every tried to create an on-page link to anchor element but it didn&amp;rsquo;t play nice with your fixed elements? There is a great solution for that now: &lt;code&gt;scroll-margin&lt;/code&gt; and &lt;code&gt;scroll-padding&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;native-image-lazy-loading-for-the-webhttpsaddyosmanicombloglazy-loading&#34;&gt;&lt;a href=&#34;https://addyosmani.com/blog/lazy-loading/&#34;&gt;Native image lazy-loading for the web!&lt;/a&gt; &lt;a href=&#34;#native-image-lazy-loading-for-the-webhttpsaddyosmanicombloglazy-loading&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the best news for performance oriented frontend developers. Addy Osmani shared a gist of an upcoming &lt;code&gt;loading&lt;/code&gt; attribute that can be attached to HTML &lt;code&gt;img&lt;/code&gt; and &lt;code&gt;iframe&lt;/code&gt; tag. Apart from that, this article explains the fallback strategies for browsers that lack support of this feature. Really great news and can&amp;rsquo;t wait to add &lt;code&gt;loading=&amp;quot;lazy&amp;quot;&lt;/code&gt; to every single image on this website!&lt;/p&gt;
&lt;h2 id=&#34;front-end-developer-handbook-2019httpsfrontendmasterscombooksfront-end-handbook2019&#34;&gt;&lt;a href=&#34;https://frontendmasters.com/books/front-end-handbook/2019/&#34;&gt;Front-end Developer Handbook 2019&lt;/a&gt; &lt;a href=&#34;#front-end-developer-handbook-2019httpsfrontendmasterscombooksfront-end-handbook2019&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://frontendmasters.com/&#34;&gt;Frontend Master&lt;/a&gt; released very comprehensive guide to start your a journey as a Front End Developer in 2019. It is definitely not a 5 minutes read tho.&lt;/p&gt;
&lt;h2 id=&#34;optimizing-performance-with-resource-hintshttpswwwsmashingmagazinecom201904optimization-performance-resource-hints&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2019/04/optimization-performance-resource-hints/&#34;&gt;Optimizing Performance With Resource Hints&lt;/a&gt; &lt;a href=&#34;#optimizing-performance-with-resource-hintshttpswwwsmashingmagazinecom201904optimization-performance-resource-hints&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/drewm&#34;&gt;Drew McLellan&lt;/a&gt; published this insanely helpful article about resource hints. Everything that you want to know about DNS prefetching, preconnecting, resource prefetching and prerendering put together in a single article. This article is a golden for all performance maniacs!&lt;/p&gt;
&lt;h2 id=&#34;application-state-management-with-reacthttpskentcdoddscomblogapplication-state-management-with-react&#34;&gt;&lt;a href=&#34;https://kentcdodds.com/blog/application-state-management-with-react&#34;&gt;Application State Management with React&lt;/a&gt; &lt;a href=&#34;#application-state-management-with-reacthttpskentcdoddscomblogapplication-state-management-with-react&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/kentcdodds/&#34;&gt;Kent C. Dodds&lt;/a&gt; about the state management in React applications again! This short article is full of very modern approaches for historically painful to solve problem. Kent is a good teacher!&lt;/p&gt;
&lt;h2 id=&#34;announcing-a-new---experimental-moduleshttpsmediumcomnodejsannouncing-a-new-experimental-modules-1be8d2d6c2ff&#34;&gt;&lt;a href=&#34;https://medium.com/@nodejs/announcing-a-new-experimental-modules-1be8d2d6c2ff&#34;&gt;Announcing a new &amp;ndash;experimental-modules&lt;/a&gt; &lt;a href=&#34;#announcing-a-new---experimental-moduleshttpsmediumcomnodejsannouncing-a-new-experimental-modules-1be8d2d6c2ff&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; version 12 is coming soon and new ECMAScript modules implementation is coming with it. The &lt;code&gt;--experimental-modules&lt;/code&gt; flag landed back in 2017 in version 8.9.0. The next iteration of it is a big update and this article goes in depth about all the details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I built a thing — httpsc (Simple HTTP status codes reference CLI)</title>
      <link>https://pawelgrzybek.com/i-built-a-thing-httpsc-simple-http-status-codes-reference-cli/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-built-a-thing-httpsc-simple-http-status-codes-reference-cli/</guid>
      <description>&lt;p&gt;How often do you visit a Wikipedia for a definition of a HTTP status code? I don&amp;rsquo;t know how about you but it happens to me at least once a week. To make it a bit easier I created a &lt;a href=&#34;https://www.npmjs.com/package/httpsc&#34;&gt;httpsc — simple HTTP status codes reference CLI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-04-06-1.jpg&#34;
  alt=&#34;Screenshot of httpsc CLI&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1068&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;httpsc-cli&#34;&gt;httpsc CLI &lt;a href=&#34;#httpsc-cli&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;httpsc&lt;/code&gt; was built using &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt; — presumably majority of my readers already have it installed but if not, give &lt;a href=&#34;https://pawelgrzybek.com/install-nodejs-installer-vs-homebrew-vs-nvm/&#34;&gt;&amp;ldquo;Install Node.js — installer vs. Homebrew vs. NVM&amp;rdquo;&lt;/a&gt; a quick read. Prerequisites out of the way, lets get into the CLI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npx httpsc&lt;/code&gt; to get the whole reference&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npx httpsc 4&lt;/code&gt; to get a short info about all &lt;code&gt;4xx&lt;/code&gt; codes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npx httpsc 40&lt;/code&gt; to get a short info about all &lt;code&gt;40x&lt;/code&gt; codes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npx httpsc 404&lt;/code&gt; to get a detailed info about &lt;code&gt;404&lt;/code&gt; code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsc-nodejs-api&#34;&gt;httpsc Node.js API &lt;a href=&#34;#httpsc-nodejs-api&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do you want to use this info on your project? Here you go.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add httpsc
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;httpsc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;httpsc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httpsc&lt;/code&gt; to get the whole reference&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getCode()&lt;/code&gt; to get the info about particular status code (i.e. &lt;code&gt;getCode(404)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy :*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 March</title>
      <link>https://pawelgrzybek.com/top-picks-2019-march/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-march/</guid>
      <description>&lt;h2 id=&#34;css-math-functionshttpstwittercombdcstatus1100921258839953408&#34;&gt;&lt;a href=&#34;https://twitter.com/bdc/status/1100921258839953408&#34;&gt;CSS math functions&lt;/a&gt; &lt;a href=&#34;#css-math-functionshttpstwittercombdcstatus1100921258839953408&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Are you waiting for the next big thing in CSS? There you go.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;kv-storage-the-webs-first-built-in-modulehttpsdevelopersgooglecomwebupdates201903kv-storage&#34;&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2019/03/kv-storage&#34;&gt;KV Storage, the Web&amp;rsquo;s First Built-in Module&lt;/a&gt; &lt;a href=&#34;#kv-storage-the-webs-first-built-in-modulehttpsdevelopersgooglecomwebupdates201903kv-storage&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web platform offers few ways of storing data. The most popular is slow and synchronous &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&#34;&gt;&lt;code&gt;localStorage&lt;/code&gt;&lt;/a&gt; followed by pain-full to use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&#34;&gt;IndexedDB&lt;/a&gt;. The first standard JavaScript library (built-in module) is coming to address this issues — &lt;a href=&#34;https://wicg.github.io/kv-storage/&#34;&gt;KV Storage&lt;/a&gt;. &lt;a href=&#34;https://github.com/WICG/import-maps&#34;&gt;Import maps&lt;/a&gt; are here to help to resolve a path to a module. This great article by &lt;a href=&#34;https://twitter.com/philwalton&#34;&gt;Phil Walton&lt;/a&gt; explains all of these.&lt;/p&gt;
&lt;h2 id=&#34;sketch-raises-20m-in-series-a-funding-from-benchmarkhttpsblogsketchappcomsketch-raises-20m-in-series-a-funding-from-benchmark-ea298764d7d1&#34;&gt;&lt;a href=&#34;https://blog.sketchapp.com/sketch-raises-20m-in-series-a-funding-from-benchmark-ea298764d7d1&#34;&gt;Sketch raises $20m in Series A funding from Benchmark&lt;/a&gt; &lt;a href=&#34;#sketch-raises-20m-in-series-a-funding-from-benchmarkhttpsblogsketchappcomsketch-raises-20m-in-series-a-funding-from-benchmark-ea298764d7d1&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A big announcement and official confirmation — team collaboration and Sketch in the browser are coming in 2019. I cannot wait for it.&lt;/p&gt;
&lt;h2 id=&#34;designing-an-aspect-ratio-unit-for-csshttpswwwsmashingmagazinecom201903aspect-ratio-unit-css&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2019/03/aspect-ratio-unit-css/&#34;&gt;Designing An Aspect Ratio Unit For CSS&lt;/a&gt; &lt;a href=&#34;#designing-an-aspect-ratio-unit-for-csshttpswwwsmashingmagazinecom201903aspect-ratio-unit-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do you remember a CSS padding hack to implement responsive &lt;code&gt;iframe&lt;/code&gt; / &lt;code&gt;embed&lt;/code&gt;? The CSS Working Group is working on much more elegant solution for this issue — &lt;code&gt;aspect-ratio&lt;/code&gt; property. &lt;a href=&#34;https://twitter.com/rachelandrew&#34;&gt;Rachel Andrew&lt;/a&gt; does a fantastic job by presenting a problem and suggesting a solution. This is part of very early drafts of &lt;a href=&#34;https://drafts.csswg.org/css-sizing-4/#ratios&#34;&gt;CSS Sizing Specification Level 4&lt;/a&gt; — please, don&amp;rsquo;t event try using it yet. It has not been implemented to any browser yet.&lt;/p&gt;
&lt;h2 id=&#34;stadiahttpsstoregooglecommagazinestadia&#34;&gt;&lt;a href=&#34;https://store.google.com/magazine/stadia&#34;&gt;Stadia&lt;/a&gt; &lt;a href=&#34;#stadiahttpsstoregooglecommagazinestadia&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am super excited about the &lt;a href=&#34;https://youtu.be/W7hc4R8JAJY&#34;&gt;concept that Google presented at GDC 2019&lt;/a&gt;. Streaming service, with no box required, cross platform and cross device. I am looking forward to an official public announcement.&lt;/p&gt;
&lt;h2 id=&#34;new-amazon-s3-storage-class--glacier-deep-archivehttpsawsamazoncomblogsawsnew-amazon-s3-storage-class-glacier-deep-archive&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-amazon-s3-storage-class-glacier-deep-archive/&#34;&gt;New Amazon S3 Storage Class – Glacier Deep Archive&lt;/a&gt; &lt;a href=&#34;#new-amazon-s3-storage-class--glacier-deep-archivehttpsawsamazoncomblogsawsnew-amazon-s3-storage-class-glacier-deep-archive&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Amazon Web Services announced new storage class — Glacier Deep Archive. Even more cost effective cold storage service that costs up to 75% less than the previously the cheapest Glacier. It is just an amazing news for all that use this service as a data backup like I do — &lt;a href=&#34;https://pawelgrzybek.com/my-amazon-s3-photo-backup-solution/&#34;&gt;&amp;ldquo;My Amazon S3 photo backup solution&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build your first AWS Serverless app</title>
      <link>https://pawelgrzybek.com/build-your-first-aws-serverless-app/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/build-your-first-aws-serverless-app/</guid>
      <description>&lt;p&gt;After years of frontend experience, through building AR / VR applications I recently landed a backend-focused role. Luckily I&amp;rsquo;ve found myself being a part of a team of super talented people working on serverless microservices on the &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS (Amazon Web Services) platform&lt;/a&gt;. Having no previous experience in this field, let me share with you what I&amp;rsquo;ve learnt during my initial exploration into this arena and build a little serverless app with you.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites &lt;a href=&#34;#prerequisites&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t have one, go ahead and &lt;a href=&#34;https://portal.aws.amazon.com/billing/signup&#34;&gt;create an AWS account&lt;/a&gt;. A credit card is needed to set one up, but be assured that you won&amp;rsquo;t be charged a single penny for the stuff that I will go through here as the &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;AWS free tier&lt;/a&gt; is pretty generous.&lt;/p&gt;
&lt;p&gt;AWS Lambda supports multiple languages (JavaScript, Python, Ruby, Java, Go and C#) so a rudimental understanding of any of these is necessary. I will be using JavaScript in this tutorial.&lt;/p&gt;
&lt;p&gt;Familiarity with the command line, a code editor and a REST client will help you to create, deploy and test your application. If you don&amp;rsquo;t have a preference, I highly recommend &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&#34;https://insomnia.rest/&#34;&gt;Insomnia&lt;/a&gt; — both of these tools are free, easy to use and very feature-full.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-1.jpg&#34;
  alt=&#34;Screenshot of AWS account, Visual Studio Code and Insomnia website&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1337&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;stack&#34;&gt;Stack &lt;a href=&#34;#stack&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The AWS platform contains hundreds of services which are categorised into tens of different types. We are going to use only a few of them without needing to ever visit the not-so-intuitive web interface — we&amp;rsquo;ll do it like the pros! We are going to use the &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS Command Line Interface&lt;/a&gt; to manage all the services. Lets have a closer look at what we need.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-2.jpg&#34;
  alt=&#34;AWS services in use&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1850&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;amazon-simple-storage-service-amazon-s3&#34;&gt;Amazon Simple Storage Service (Amazon S3) &lt;a href=&#34;#amazon-simple-storage-service-amazon-s3&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;Amazon S3&lt;/a&gt;, being the oldest tool on the platform, allows the user to store objects of any kind inside &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html&#34;&gt;&amp;ldquo;buckets&amp;rdquo;&lt;/a&gt;. You can use it to store the source files of your website, securely hold some private documents or as a &lt;a href=&#34;https://pawelgrzybek.com/my-amazon-s3-photo-backup-solution/&#34;&gt;photo backup solution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to use this service to store a bundled zip file containing some project files.&lt;/p&gt;
&lt;h3 id=&#34;aws-lambda&#34;&gt;AWS Lambda &lt;a href=&#34;#aws-lambda&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; is a computing power provider that removes the overhead of server maintenance — that&amp;rsquo;s the reason why its functions are termed &amp;ldquo;serverless&amp;rdquo;. Lambda functions are stateless and can be invoked using multiple triggers, for example: a database stream, an API request or an event emited by other AWS services. Lambdas are very cost effective because we only pay for the computational duration — not for any idle time.&lt;/p&gt;
&lt;p&gt;We are going to use this service to compute the final output based on the input sent within a &lt;code&gt;POST&lt;/code&gt; request. To create the REST APIs we are going to use…&lt;/p&gt;
&lt;h3 id=&#34;amazon-api-gateway&#34;&gt;Amazon API Gateway &lt;a href=&#34;#amazon-api-gateway&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34;&gt;Amazon API Gateway&lt;/a&gt; allows users to create, maintain, and secure APIs. It is extremely easy to use. Creating endpoints and attaching the HTTP verbs (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt;) to it has never been easier.&lt;/p&gt;
&lt;p&gt;We are going to use this service to define an endpoint that triggers a lambda function with a defined payload — the body of a &lt;code&gt;POST&lt;/code&gt; request.&lt;/p&gt;
&lt;h3 id=&#34;aws-identity-and-access-management-iam&#34;&gt;AWS Identity and Access Management (IAM) &lt;a href=&#34;#aws-identity-and-access-management-iam&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having an account doesn&amp;rsquo;t give you access to whatever you want, only the things that your role allows you to do. &lt;a href=&#34;https://aws.amazon.com/iam/&#34;&gt;AWS Identity and Access Management&lt;/a&gt; is a service to manage only that — access to AWS services and resources.&lt;/p&gt;
&lt;p&gt;We are going to use this service to create an account that allows us to manage AWS services using a CLI (programmatic access). Implicitly a new role that allows a Lambda function interact with other services will be created.&lt;/p&gt;
&lt;h3 id=&#34;aws-cloudformation&#34;&gt;AWS Cloud​Formation &lt;a href=&#34;#aws-cloudformation&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cloudformation/&#34;&gt;AWS Cloud​Formation&lt;/a&gt; is the best! &lt;a href=&#34;https://en.wikipedia.org/wiki/Infrastructure_as_code&#34;&gt;Infrastructure as code, also referred to as IaC&lt;/a&gt;, allows the user to describe and provision all of the infrastructure resources.&lt;/p&gt;
&lt;p&gt;We are going to use this service to describe all of the resources for the app inside a single YAML file (JSON format is supported as well). A &amp;ldquo;stack&amp;rdquo; of services created using Cloud​Formation is very easy to deploy, update and delete.&lt;/p&gt;
&lt;h2 id=&#34;aws-cli-setup&#34;&gt;AWS CLI setup &lt;a href=&#34;#aws-cli-setup&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although it is possible to do everything that we need using the AWS console (website interface) I strongly suggest using &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt;. It is a very powerful, fast and easy-to-use command line tool. If you have read some of my previous articles, you know that &lt;a href=&#34;https://pawelgrzybek.com/homebrew-the-best-friend-of-the-macos-user/&#34;&gt;I love Homebrew&lt;/a&gt; so I am going to use it to install AWS CLI. Installation instructions for other operating systems are provided on the &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;official AWS CLI website&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install awscli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A new &lt;code&gt;aws&lt;/code&gt; command is ready to use but it doesn&amp;rsquo;t know how to speak to our account yet. To fix this we need to configure the CLI. Before doing so, please make sure that you have a &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html&#34;&gt;IAM user&lt;/a&gt; with programmatic access and sufficient privileges created. &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html&#34;&gt;Creating an IAM User in Your AWS Account&lt;/a&gt; is well documented on an official documentation. If this is in place, you should have your &lt;code&gt;aws_access_key_id&lt;/code&gt; and &lt;code&gt;aws_secret_access_key&lt;/code&gt; that enables you to grant programmatic access. Configure your default account using the &lt;code&gt;aws configure&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-3.jpg&#34;
  alt=&#34;Configure AWS CLI tool&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;848&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;This setup creates a &lt;code&gt;.aws&lt;/code&gt; directory in your user root location (&lt;code&gt;~/.aws&lt;/code&gt;) with two files: &lt;code&gt;credentials&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt;. You can add as many users as you want using the &lt;code&gt;configure&lt;/code&gt; command. To find out more about creating new users and particular options, visit the &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html&#34;&gt;&amp;ldquo;Configuring the AWS CLI&amp;rdquo;&lt;/a&gt; section on the official documentation.&lt;/p&gt;
&lt;h2 id=&#34;build-a-serverless-greetings-app&#34;&gt;Build a serverless greetings app &lt;a href=&#34;#build-a-serverless-greetings-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The function of this app will be to send your name and get some kind of greeting back. I know, it&amp;rsquo;s a dumb example, but the concepts and tools that we are going to use are a great basis for your million dollar, serverless project.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-4.jpg&#34;
  alt=&#34;Screenshot of an app example inside Insomnia REST client&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1048&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a directory and place two files in it — &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;template.yaml&lt;/code&gt;. The JavaScript file describes the business logic and &lt;code&gt;template.yaml&lt;/code&gt; is needed to define the resources of the AWS stack.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir hi &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; hi &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch index.js template.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;hi/
├── index.js
└── template.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-the-lambda-function&#34;&gt;Create the Lambda function &lt;a href=&#34;#create-the-lambda-function&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html&#34;&gt;A Lambda function signature in Node.js&lt;/a&gt; is straight forward. It takes three arguments: &lt;code&gt;event&lt;/code&gt; for the data provided from the trigger, &lt;code&gt;context&lt;/code&gt; which stores information about the execution environment and an optional &lt;code&gt;callback&lt;/code&gt; function very commonly used in Node.js. The structure is similar in other runtimes supported by AWS Lambda, but please check for details regarding your programming language of choice on the &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/welcome.html&#34;&gt;official AWS Lambda Developer Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;handler&lt;/code&gt; function for our greetings app is as simple as that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// index.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Hi &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please, spare your comments about error handling strategies, syntax and stylistic details. I am here not to teach you best practice programming but help you to create your first serverless app.&lt;/p&gt;
&lt;h3 id=&#34;create-the-cloudformation-template&#34;&gt;Create the CloudFormation template &lt;a href=&#34;#create-the-cloudformation-template&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Despite the fact it looked like black magic for me at first, today one of my favourite parts of AWS are the CloudFormation templates. A simple file that describes the whole architecture that&amp;rsquo;s easy to deploy, update and delete. The &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html&#34;&gt;anatomy of a CloudFormation template&lt;/a&gt; is simple and becomes as complex as your projects needs to be.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# template.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AWS&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Serverless&lt;span class=&#34;m&#34;&gt;-2016-10-31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Greetings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AWS&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Serverless&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;Function&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;index.handler&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nodejs8&lt;span class=&#34;m&#34;&gt;.10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HelloWorldApi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;POST&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html&#34;&gt;&lt;code&gt;Transform&lt;/code&gt; section&lt;/a&gt; defines the macros that AWS CloudFormation uses to process your template. &lt;code&gt;AWS::Serverless-2016-10-31&lt;/code&gt; means that the template is written in the &lt;a href=&#34;https://docs.aws.amazon.com/serverless-application-model/index.html#lang/en_us&#34;&gt;AWS Serverless Application Model (AWS SAM)&lt;/a&gt; syntax. It simplifies the declaration of a Lambda function and its execution role. Without this transformation, CloudFormation templates are much more verbose.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html&#34;&gt;&lt;code&gt;Resources&lt;/code&gt; section&lt;/a&gt; is the only required section and defines stack resources and their properties. In our case the only resource is a &lt;code&gt;AWS::Serverless::Function&lt;/code&gt; described by a &lt;code&gt;Greetings&lt;/code&gt; logical ID. Properties define the path to a &lt;code&gt;handler&lt;/code&gt;, runtime and event that triggers an invocation.&lt;/p&gt;
&lt;h3 id=&#34;package-the-serverless-app&#34;&gt;Package the serverless app &lt;a href=&#34;#package-the-serverless-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the AWS services that I mentioned we are going to use is S3. We need a bucket to store the bundled application files. The AWS CLI &lt;code&gt;mb&lt;/code&gt; command comes in handy when we need to create one (&lt;code&gt;mb&lt;/code&gt; probably stands for &amp;ldquo;make bucket&amp;rdquo;). Keep in mind that the name of every bucket in S3 must be unique. I have one called &lt;code&gt;pawelgrzybek-cloudformation&lt;/code&gt; where I store all of my cloudformation stacks.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws s3 mb s3://YOUR_BUCKET_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now everything&amp;rsquo;s ready it&amp;rsquo;s time to package things up. The AWS CLI comes with a helpful command that bundles all the resources in a zip file, sends it to S3, adds a bucket location path to the output template file and returns a copy of it. We are going to use a new file (&lt;code&gt;packaged.yaml&lt;/code&gt;) to deploy the app in a further step.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket YOUR_BUCKET_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-5.jpg&#34;
  alt=&#34;AWS CLI — CloudFormation package output&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1252&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-6.jpg&#34;
  alt=&#34;AWS Console S3 — Confirmation that package has been uploaded successfully&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;922&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;deploy-serverless-app&#34;&gt;Deploy serverless app &lt;a href=&#34;#deploy-serverless-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now all the files are on a S3 bucket and we have a &lt;code&gt;packaged.yaml&lt;/code&gt; file that contains the information about its resources. Great, time to deploy the stack.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation deploy --template-file packaged.yaml --capabilities CAPABILITY_IAM --stack-name hi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-7.jpg&#34;
  alt=&#34;AWS CLI — CloudFormation deploy output&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;938&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Behind the scenes CloudFormation creates the IAM role — thanks to SAM template enhancements we don&amp;rsquo;t need to do it ourselves. To authorise a stack to do so, we need to add &lt;code&gt;--capabilities CAPABILITY_IAM&lt;/code&gt;. The &lt;code&gt;--stack-name&lt;/code&gt; allows us to create a custom name for the stack — the name of my stack is &amp;ldquo;hi&amp;rdquo;. Confirm the deployment of the stack in the AWS CloudFormation stack section.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-8.jpg&#34;
  alt=&#34;AWS Console CloudFormation Stacks — Confirmation that package has been deployed successfully&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;922&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;The stacks &amp;ldquo;resources&amp;rdquo; tab clearly shows us all of the resources that have been created to deploy the app and link the services together: Lambda function, API Gateway, IAM role and a bunch of permission and deployment-related stuff that the SAM transformation created for us.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-9.jpg&#34;
  alt=&#34;AWS Console CloudFormation Stack — Resources tab&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1600&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;test-the-serverless-app&#34;&gt;Test the serverless app &lt;a href=&#34;#test-the-serverless-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The API defined as an event for our &lt;code&gt;Greetings&lt;/code&gt; Lambda function implicitly created an endpoint and two stages for it: &amp;ldquo;Prod&amp;rdquo; (default) and &amp;ldquo;Stage&amp;rdquo;. We can find more details about the created endpoint in the Amazon API Gateway Stages tab. One of the things that we can find here is a URL to hit that in turn invokes a function. The page for the individual Lambda function is another place where we can find information about the URL endpoint that works as a function trigger.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-10.jpg&#34;
  alt=&#34;AWS Gateway API — find and endpoint that triggers Lambda function&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;893&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;It is finally time to test our app. Let&amp;rsquo;s do it using your REST API client of choice by passing a JSON body with a &lt;code&gt;name&lt;/code&gt; key.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-03-19-11.jpg&#34;
  alt=&#34;The result of our first serverless application&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1720&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html&#34;&gt;AWS SAM CLI&lt;/a&gt; allows us to &lt;a href=&#34;https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-invoke.html&#34;&gt;test Lambda functions locally&lt;/a&gt; but this is out of the scope of this article. I may publish a separate article about working with the AWS Serverless Application Model Framework one day.&lt;/p&gt;
&lt;h2 id=&#34;all-done&#34;&gt;All done! &lt;a href=&#34;#all-done&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It has been quite a long ride, but I hope it has helped you to get an idea about building serverless apps on the AWS platform. Extending this project with additional parts is just a matter of adding new resources to a &lt;code&gt;template.yaml&lt;/code&gt; file. Need a database? &lt;a href=&#34;https://aws.amazon.com/dynamodb/&#34;&gt;Amazon DynamoDB&lt;/a&gt; is a great option. Need to be notified via SMS about some changes on your S3 bucket? &lt;a href=&#34;https://aws.amazon.com/sns/&#34;&gt;Amazon Simple Notification Service&lt;/a&gt; is your best friend. Would you like to take your smart home to the next level? You should have a look at the &lt;a href=&#34;https://aws.amazon.com/iot/&#34;&gt;AWS IoT&lt;/a&gt;. The sky is the limit.&lt;/p&gt;
&lt;p&gt;Although the AWS platform is not the only provider that let&amp;rsquo;s you build serverless apps, it is the one that I ended up using and liking a lot. Feel free to have a look at the extremely nice to use &lt;a href=&#34;https://serverless.com/&#34;&gt;Serverless framework&lt;/a&gt;, &lt;a href=&#34;https://www.netlify.com/features/functions/&#34;&gt;Netlify Functions&lt;/a&gt; that are great and easy abstractions on top of the AWS Lambdas or &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/&#34;&gt;Azure Functions&lt;/a&gt; that are equally powerful.&lt;/p&gt;
&lt;p&gt;Let me know your thoughts and feel free to share some serverless article ideas that you would like to read about next time. If there is anything unclear I am more than happy to help you out — the comments section is all yours. Have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 February</title>
      <link>https://pawelgrzybek.com/top-picks-2019-february/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-february/</guid>
      <description>&lt;h2 id=&#34;react-v168-the-one-with-hookshttpsreactjsorgblog20190206react-v1680html&#34;&gt;&lt;a href=&#34;https://reactjs.org/blog/2019/02/06/react-v16.8.0.html&#34;&gt;React v16.8: The One With Hooks&lt;/a&gt; &lt;a href=&#34;#react-v168-the-one-with-hookshttpsreactjsorgblog20190206react-v1680html&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Presented on the React Conf 2018 few months ago hooks are part of a stable React 16.8. This is one of the most exciting news for front end developers in a while.&lt;/p&gt;
&lt;h2 id=&#34;css-position-sticky---how-it-really-workshttpsmediumcomeladcss-position-sticky-how-it-really-works-54cd01dc2d46&#34;&gt;&lt;a href=&#34;https://medium.com/@elad/css-position-sticky-how-it-really-works-54cd01dc2d46&#34;&gt;CSS Position Sticky - How It Really Works!&lt;/a&gt; &lt;a href=&#34;#css-position-sticky---how-it-really-workshttpsmediumcomeladcss-position-sticky-how-it-really-works-54cd01dc2d46&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article by &lt;a href=&#34;https://twitter.com/eladsc&#34;&gt;Elad Shechter&lt;/a&gt; is the best explanation of CSS &lt;code&gt;position: sticky&lt;/code&gt; around. Sticked to my brain after reading it.&lt;/p&gt;
&lt;h2 id=&#34;thisjavascript---state-of-frameworks--librarieshttpsyoutubedff9eoltwzy&#34;&gt;&lt;a href=&#34;https://youtu.be/DFF9eOlTWzY&#34;&gt;This.JavaScript - State of Frameworks &amp;amp; Libraries&lt;/a&gt; &lt;a href=&#34;#thisjavascript---state-of-frameworks--librarieshttpsyoutubedff9eoltwzy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hosted by &lt;a href=&#34;https://twitter.com/ladyleet&#34;&gt;Tracy Lee&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/bonnster75&#34;&gt;Bonnie Brennan&lt;/a&gt; &amp;ldquo;State of Frameworks &amp;amp; Libraries&amp;rdquo; is a necessary update for everyone who wants to stay fresh on JS land. &lt;a href=&#34;https://twitter.com/@youyuxi&#34;&gt;Evan You&lt;/a&gt; about faster, smaller and more maintainable Vue 3.0 rewritten in TypeScript. &lt;a href=&#34;https://twitter.com/@mjackson&#34;&gt;Michael Jackson&lt;/a&gt; about the React Lazy, Suspense, Hooks and concurrent mode that is coming to stable release later on this year. Multi-languages documentation for React is the cherry on the cake. &lt;a href=&#34;https://twitter.com/@mhdawson1&#34;&gt;Michael Dawson&lt;/a&gt; about the Node.js backward compatibility, Workers, ECMAScript 2015 modules, async hooks and reports. &lt;a href=&#34;https://twitter.com/@stephenfluin&#34;&gt;Stephen Fluin&lt;/a&gt; about Angular release cycle, new versions adoption, auto install dependencies, &lt;code&gt;ngUpgrade&lt;/code&gt; and Web Workers. &lt;a href=&#34;https://twitter.com/@benlesh&#34;&gt;Ben Lesh&lt;/a&gt; from RxJS team about TypeScript adoption and new features introduced in major update to version 6.0. State of Preact presented by &lt;a href=&#34;https://twitter.com/_developit&#34;&gt;Jason Miller&lt;/a&gt; elaborates about Hooks, Fragments implementation, CLI and compatibility with ecosystem standards. &lt;a href=&#34;https://twitter.com/kennethlarsen&#34;&gt;Kenneth Larsen&lt;/a&gt; from Ember Learning Team shares some news from version 3.6. &lt;a href=&#34;https://twitter.com/justinfagnani&#34;&gt;Justin Fagnani&lt;/a&gt; from Polymer.js gave us some overview of recent releases of lit-html, LitElement and some exciting updates from supportive platforms.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/DFF9eOlTWzY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;tslint-in-2019httpsmediumcompalantirtslint-in-2019-1a144c2317a9&#34;&gt;&lt;a href=&#34;https://medium.com/palantir/tslint-in-2019-1a144c2317a9&#34;&gt;TSLint in 2019&lt;/a&gt; &lt;a href=&#34;#tslint-in-2019httpsmediumcompalantirtslint-in-2019-1a144c2317a9&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pawelgrzybek.com/top-picks-2019-january/&#34;&gt;Month ago&lt;/a&gt; I shared a news about &lt;a href=&#34;https://eslint.org/blog/2019/01/future-typescript-eslint&#34;&gt;the future of TypeScript on ESLint&lt;/a&gt; and this month another exciting news from the field. TSLint (de facto the standard linter for TypeScript) is going to be deprecated and the team is going to focus on improving ESLint’s TypeScript support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Once we consider ESLint feature-complete w.r.t. TSLint, we will deprecate TSLint and help users migrate to ESLint&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;applying-the-twelve-factor-app-methodology-to-serverless-applicationshttpsawsamazoncomblogscomputeapplying-the-twelve-factor-app-methodology-to-serverless-applications&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/applying-the-twelve-factor-app-methodology-to-serverless-applications/&#34;&gt;Applying the Twelve-Factor App Methodology to Serverless Applications&lt;/a&gt; &lt;a href=&#34;#applying-the-twelve-factor-app-methodology-to-serverless-applicationshttpsawsamazoncomblogscomputeapplying-the-twelve-factor-app-methodology-to-serverless-applications&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://12factor.net/&#34;&gt;A Twelve-Factor Application Model&lt;/a&gt; is a set of guidelines to build large-scale server-less applications evangelized by &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; platform users. &lt;a href=&#34;https://twitter.com/chrismunns&#34;&gt;Chris Munns&lt;/a&gt; looks at this set of rules from the perspective of Senior Developer Advocate working for AWS (Amazon Web Services). The content of this article has been presented at &lt;a href=&#34;https://youtu.be/19SCqWGqtto&#34;&gt;Functions 2017 conference — &amp;ldquo;Twelve Factor Serverless Applications&amp;rdquo; by Chris Munns&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/19SCqWGqtto&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>What&#39;s new in ECMAScript 2019</title>
      <link>https://pawelgrzybek.com/whats-new-in-ecmascript-2019/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/whats-new-in-ecmascript-2019/</guid>
      <description>&lt;p&gt;The Ecma TC39 committee responsible for the ECMAScript specification confirmed a list of features that have reached &lt;a href=&#34;https://tc39.github.io/process-document/&#34;&gt;stage 4&lt;/a&gt;, meaning that they will become part of the ECMAScript 2019 specification. Three years ago I published &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2016-es7/&#34;&gt;&amp;ldquo;What&amp;rsquo;s new in ECMAScript 2016&amp;rdquo;&lt;/a&gt;, two years ago &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2017/&#34;&gt;&amp;ldquo;What&amp;rsquo;s new in ECMAScript 2017&amp;rdquo;&lt;/a&gt; and year later &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2018/&#34;&gt;&amp;ldquo;What&amp;rsquo;s new in ECMAScript 2018&amp;rdquo;&lt;/a&gt;. It&amp;rsquo;s time to add a few more goodies.&lt;/p&gt;
&lt;h2 id=&#34;optional-catch-binding-by-michael-ficarra&#34;&gt;Optional catch binding by Michael Ficarra &lt;a href=&#34;#optional-catch-binding-by-michael-ficarra&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You must have used a &lt;code&gt;try...catch&lt;/code&gt; block before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// exception is thrown
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My error handler&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What if you don’t need to bind the &lt;code&gt;error&lt;/code&gt; parameter of the catch clause? Now you can skip this parameter binding. Thanks to &lt;a href=&#34;https://twitter.com/smooshMap&#34;&gt;Michael Ficarra&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// exception is thrown
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My error handler&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-optional-catch-binding&#34;&gt;Optional catch binding proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;json-superset-by-richard-gibson-mark-miller-and-mathias-bynens&#34;&gt;JSON superset by Richard Gibson, Mark Miller and Mathias Bynens &lt;a href=&#34;#json-superset-by-richard-gibson-mark-miller-and-mathias-bynens&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This one is more of a specification update than a new language feature — it&amp;rsquo;s fully backwards compatible though. Although the &lt;a href=&#34;https://tc39.github.io/ecma262/#sec-json.parse&#34;&gt;ECMAScript documentation calls JSON as a subset of &lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt;, in reality the JSON standard was not a subset of ECMAScript. JSON could contain an unescaped line separator (&lt;code&gt;U+2028&lt;/code&gt;) and paragraph separator (&lt;code&gt;U+2029&lt;/code&gt;) but ECMAScript must have been using an escape sequence to add them to a string. This may cause occasional bugs and adds unnecessary complexity to the specification. This proposal introduces some consistency between ECMAScript string literals and JSON string literals. The JSON standard is a legit subset of ECMAScript now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-json-superset&#34;&gt;JSON superset proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;symbolprototypedescription-by-michael-ficarra&#34;&gt;Symbol.prototype.description by Michael Ficarra &lt;a href=&#34;#symbolprototypedescription-by-michael-ficarra&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To improve the debugging experience a &lt;code&gt;Symbol&lt;/code&gt; can be created with an optional description. Historically we used to access this description via &lt;code&gt;Symbol.prototype.toString()&lt;/code&gt; to return a description enclosed inside a &lt;code&gt;Symbol()&lt;/code&gt; string. Using ECMAScript 2019 you can do this more intuitively — &lt;code&gt;Symbol.prototype.description&lt;/code&gt; simply retrieves a description without any decorators around the string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Symbol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My super symbol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Symbol(My super symbol)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// My super symbol
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-Symbol-description&#34;&gt;&lt;code&gt;Symbol.prototype.description&lt;/code&gt; proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;functionprototypetostring-revision-by-michael-ficarra&#34;&gt;Function.prototype.toString revision by Michael Ficarra &lt;a href=&#34;#functionprototypetostring-revision-by-michael-ficarra&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The implementation of &lt;code&gt;toString()&lt;/code&gt; has been revised (again) and standardises the returned &amp;ldquo;implementation-dependent&amp;rdquo; string (the source code that defines the function implementation). This is an incremental update in an already biggish proposal and the rules are well defined in &lt;a href=&#34;http://tc39.github.io/Function-prototype-toString-revision/&#34;&gt;&lt;code&gt;Function.prototype.toString&lt;/code&gt; proposal introduction&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Hi &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// function hi(name) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   return `Hi ${name}`;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// function isArray() { [native code] }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tc39.github.io/Function-prototype-toString-revision/&#34;&gt;&lt;code&gt;Function.prototype.toString&lt;/code&gt; proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;objectfromentries-by-darien-maillet-valentine&#34;&gt;Object.fromEntries by Darien Maillet Valentine &lt;a href=&#34;#objectfromentries-by-darien-maillet-valentine&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A very handy way to convert a list of key-value pairs into an object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pawel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;surname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Grzybek&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fromEntries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {name: &amp;#34;Pawel&amp;#34;, surname: &amp;#34;Grzybek&amp;#34;, age: 31}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-object-from-entries&#34;&gt;Object.fromEntries proposals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;well-formed-jsonstringify-by-richard-gibson-and-mathias-bynens&#34;&gt;Well-formed JSON.stringify by Richard Gibson and Mathias Bynens &lt;a href=&#34;#well-formed-jsonstringify-by-richard-gibson-and-mathias-bynens&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This backwards-compatible change prevents &lt;code&gt;JSON.stringify()&lt;/code&gt; from returning code point strings without representation in UTF-8 standard.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// before
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\u{D800}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#39;&amp;#34;�&amp;#34;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// after
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\u{D800}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;\ud800&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-well-formed-stringify&#34;&gt;Well-formed JSON.stringify proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stringprototypetrimstart--stringprototypetrimend-by-sebastian-markbåge-and-mathias-bynens&#34;&gt;String.prototype.trimStart / String.prototype.trimEnd by Sebastian Markbåge and Mathias Bynens &lt;a href=&#34;#stringprototypetrimstart--stringprototypetrimend-by-sebastian-markb%c3%a5ge-and-mathias-bynens&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;String.prototype.trim()&lt;/code&gt; has been part of the standard for years. This proposal introduces &lt;code&gt;String.prototype.trimStart()&lt;/code&gt; and &lt;code&gt;String.prototype.trimEnd()&lt;/code&gt;. They were added to web browsers years ago too — it is a good time to standardise them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;   javascript   &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;javascript&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;   javascript   &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trimStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;javascript   &amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;   javascript   &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trimEnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;   javascript&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-string-left-right-trim&#34;&gt;String.prototype.trimStart / String.prototype.trimEnd proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arrayprototypeflat--arrayprototypeflatmap-by-brian-terlson-michael-ficarra-and-mathias-bynens&#34;&gt;Array.prototype.flat / Array.prototype.flatMap by Brian Terlson, Michael Ficarra and Mathias Bynens &lt;a href=&#34;#arrayprototypeflat--arrayprototypeflatmap-by-brian-terlson-michael-ficarra-and-mathias-bynens&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do you remember &lt;a href=&#34;https://developers.google.com/web/updates/2018/03/smooshgate&#34;&gt;SmooshGate&lt;/a&gt;? &lt;code&gt;Array.prototype.flat()&lt;/code&gt; flattens arrays recursively up to a specified depth. The default depth is 1. Let&amp;rsquo;s have a look at some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, [3, 4, [5, 6]]].flat();
// [ 1, 2, 3, 4, [ 5, 6 ] ]

[1, 2, [3, 4, [5, 6]]].flat(2);
// [ 1, 2, 3, 4, 5, 6 ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;Array.prototype.flatMap()&lt;/code&gt; returns a flattened result of &lt;code&gt;Array.prototype.map()&lt;/code&gt; method. Think of it like &lt;code&gt;arr.map(mapper).flat(1)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [1, 100, 2, 200, 3, 300]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-flatMap&#34;&gt;Array.prototype.flat / Array.prototype.flatMap proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arrayprototypesort-stability-by-mathias-bynens&#34;&gt;Array.prototype.sort stability by Mathias Bynens &lt;a href=&#34;#arrayprototypesort-stability-by-mathias-bynens&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Previously arrays with more than 10 elements used an unstable &lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort&#34;&gt;QuickSort algorithm&lt;/a&gt;. Moving forward, this functionality is going to be replaced with stable &lt;a href=&#34;https://en.wikipedia.org/wiki/Timsort&#34;&gt;TimSort algorithm&lt;/a&gt;. If you are very curious I highly recommend catching up &lt;a href=&#34;https://v8.dev/blog/array-sort&#34;&gt;&amp;ldquo;Getting things sorted in V8&amp;rdquo;&lt;/a&gt; posted by &lt;a href=&#34;https://twitter.com/nimODota&#34;&gt;Simon Zünd&lt;/a&gt; from V8 team.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/ecma262/pull/1340&#34;&gt;Array.prototype.sort stability PR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2019 January</title>
      <link>https://pawelgrzybek.com/top-picks-2019-january/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2019-january/</guid>
      <description>&lt;h2 id=&#34;making-future-interfaces-algorithmic-layoutshttpsyoutubeqoutkn6m52m&#34;&gt;&lt;a href=&#34;https://youtu.be/qOUtkN6M52M&#34;&gt;Making Future Interfaces: Algorithmic Layouts&lt;/a&gt; &lt;a href=&#34;#making-future-interfaces-algorithmic-layoutshttpsyoutubeqoutkn6m52m&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/heydonworks&#34;&gt;Heydon Pickering&lt;/a&gt;, a big accessible web advocate and author of my favorite book about the subject — &lt;a href=&#34;https://shop.smashingmagazine.com/products/inclusive-design-patterns&#34;&gt;&amp;ldquo;Inclusive Design Patterns&amp;rdquo;&lt;/a&gt;. He produced a lot of good video content recently but the one about modern layout techniques is outstanding. Very good breakpoint-less methods and funny sense of humor. Highly recommended to follow his YouTube channel.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/qOUtkN6M52M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;new-year-new-github-announcing-unlimited-free-private-repos-and-unified-enterprise-offeringhttpsbloggithubcom2019-01-07-new-year-new-github&#34;&gt;&lt;a href=&#34;https://blog.github.com/2019-01-07-new-year-new-github/&#34;&gt;New year, new GitHub: Announcing unlimited free private repos and unified Enterprise offering&lt;/a&gt; &lt;a href=&#34;#new-year-new-github-announcing-unlimited-free-private-repos-and-unified-enterprise-offeringhttpsbloggithubcom2019-01-07-new-year-new-github&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitHub with free private repositories — finally! New enterprise offer has landed too. Microsoft is doing lots of very good things recently and this one is another step that pushes software development industry forward. Up to three users collaboration on private project is the only restriction for free tier accounts. In this situation I will probably say goodby to BitBucket as this news fulfill all my private version control needs.&lt;/p&gt;
&lt;h2 id=&#34;the-future-of-typescript-on-eslinthttpseslintorgblog201901future-typescript-eslint&#34;&gt;&lt;a href=&#34;https://eslint.org/blog/2019/01/future-typescript-eslint&#34;&gt;The future of TypeScript on ESLint&lt;/a&gt; &lt;a href=&#34;#the-future-of-typescript-on-eslinthttpseslintorgblog201901future-typescript-eslint&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/29288&#34;&gt;TypeScript roadmap for next period&lt;/a&gt; is looking very promising. One of the things that core team of this typed superset of JavaScript announced is the future of linting — ESlint officially adopted. The &lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint&#34;&gt;&lt;code&gt;typescript-eslint&lt;/code&gt;&lt;/a&gt; monorepo contains everything that you need to start linting &lt;code&gt;.ts&lt;/code&gt; files.&lt;/p&gt;
&lt;h2 id=&#34;the-open-guide-to-amazon-web-serviceshttpsgithubcomopen-guidesog-aws&#34;&gt;&lt;a href=&#34;https://github.com/open-guides/og-aws&#34;&gt;The Open Guide to Amazon Web Services&lt;/a&gt; &lt;a href=&#34;#the-open-guide-to-amazon-web-serviceshttpsgithubcomopen-guidesog-aws&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS (Amazon Web Services) is one of the most popular services provider for software engineers. The scary thing about their range of products is its number — there is no way to nail them all. This handy list gives us a brief explanation of each one of the services and provides some handy practical tips. Golden resource.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linting TypeScript</title>
      <link>https://pawelgrzybek.com/linting-typescript/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/linting-typescript/</guid>
      <description>&lt;p&gt;When I started using TypeScript some time ago I identified one thing that I am missing from the vanilla JavaScript territory — linting. Having &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt; take care of stylistic aspects of my codebase and &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; catching potential errors — that&amp;rsquo;s the way how I tend to live my life. Despite the fact that ESLint can help me with formatting flaws I much prefer using Prettier for it. I consider its restricted configuration options and opinionated rules to be its best features. Support for TypeScript comes out of the box — formatting sorted. To detect potential errors we have a few options in TypeScript ecosystem.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;You may be wondering why I made one of the poll options &amp;ldquo;Don&amp;rsquo;t lint at all&amp;rdquo;. Since I started learning TypeScript I was relying on the fantastic code analysis tools that &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; has built-in. I kept relying on it until I wanted to add linting as a required step of my build process. The majority of TypeScript developers that I managed to reach prefer using &lt;a href=&#34;https://palantir.github.io/tslint/&#34;&gt;TSLint&lt;/a&gt; over &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;. The recently published &lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/29288&#34;&gt;TypeScript Roadmap for January - June 2019&lt;/a&gt; may change this superiority in the near future.&lt;/p&gt;
&lt;h2 id=&#34;typescript-3-eslint&#34;&gt;TypeScript &amp;lt;3 ESLint &lt;a href=&#34;#typescript-3-eslint&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the TypeScript core team shared their plan to invest in ESLint integration, &lt;a href=&#34;https://eslint.org/blog/2019/01/future-typescript-eslint&#34;&gt;&amp;ldquo;The future of TypeScript on ESLint&amp;rdquo;&lt;/a&gt; has been published and the &lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint&#34;&gt;&lt;code&gt;typescript-eslint&lt;/code&gt;&lt;/a&gt; monorepo released. It contains the whole set of tooling which enables ESLint to support TypeScript.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Once again, we are very excited to welcome the TypeScript community into the ESLint community and look forward to seeing how James and the typescript-eslint team make ESLint the best choice for linting TypeScript code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking for a quick copy / paste &lt;code&gt;.eslintrc.js&lt;/code&gt; config file for lazy people? I&amp;rsquo;ve got your back :-*&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add -D eslint @typescript-eslint/parser prettier eslint-plugin-prettier eslint-config-prettier
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;@typescript-eslint/parser&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;eslint:recommended&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;plugin:prettier/recommended&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Install Node.js — installer vs. Homebrew vs. NVM</title>
      <link>https://pawelgrzybek.com/install-nodejs-installer-vs-homebrew-vs-nvm/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/install-nodejs-installer-vs-homebrew-vs-nvm/</guid>
      <description>&lt;p&gt;No matter if you are working on backend or are in the frontend camp, &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt; is getting more popular day by day and you may need to install it at some point. There is plenty of ways to install it on your operating system and I am about to show you the most popular methods and highlight pros and cons of each of them.&lt;/p&gt;
&lt;h2 id=&#34;pre-built-installer-for-your-platform&#34;&gt;Pre-built installer for your platform &lt;a href=&#34;#pre-built-installer-for-your-platform&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The easiest and most obvious way is to download a pre-built installer for your platform from the &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js downloads page&lt;/a&gt;. Installation itself is very straight forward — next, next, next, done.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-01-15-1.jpg&#34;
  alt=&#34;Node.js pre-built installer&#34;
  loading=&#34;lazy&#34;
  width=&#34;1464&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Despite the fact it is the easiest way of installing it, it comes with many disadvantages. It locks you to a particular version — it may not be a big issue on day one but it can be in the long run if you are willing to jump between projects that depend on different versions. Another (worst) issue with this method is the fact that it requires admin permissions (&lt;code&gt;sudo&lt;/code&gt;) to install package globally. I published &lt;a href=&#34;https://pawelgrzybek.com/fix-priviliges-and-never-again-use-sudo-with-npm/&#34;&gt;&amp;ldquo;Fix privileges and never again use sudo with npm&amp;rdquo;&lt;/a&gt; with some solutions for this issue, but you better check &lt;a href=&#34;https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally&#34;&gt;&amp;ldquo;Resolving EACCES permissions errors when installing packages globally&amp;rdquo;&lt;/a&gt; on official documentation or follow this article.&lt;/p&gt;
&lt;h2 id=&#34;node-from-homebrew--chocolatey&#34;&gt;Node from Homebrew / Chocolatey &lt;a href=&#34;#node-from-homebrew--chocolatey&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pawelgrzybek.com/homebrew-the-best-friend-of-the-macos-user/&#34;&gt;&amp;ldquo;Homebrew — the best friend of the macOS user&amp;rdquo;&lt;/a&gt; explains why I love this tool so much. Windows users can find an alternative like &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;. Both of these package managers allow you to install Node.js with ease.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;choco install nodejs.install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CLI tools like that allow you to install / uninstall software in no time and never again be bothered by insufficient permissions. Although they allow you to manage versions too, in Node.js you should use…&lt;/p&gt;
&lt;h2 id=&#34;nvm-node-version-manager&#34;&gt;NVM (Node Version Manager) &lt;a href=&#34;#nvm-node-version-manager&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;Node Version Manager&lt;/a&gt; is a simple bash CLI that allows you to install multiple Node.js versions and switch between them using simple commands. Although it is available for macOS and Linux only, &lt;a href=&#34;https://github.com/coreybutler/nvm-windows&#34;&gt;Node.js version manager for Windows&lt;/a&gt; exists (ironically it is written in Go). Installation is straightforward — you can use a simple bash script or &lt;code&gt;brew&lt;/code&gt; (my preferred way).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;brew install nvm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thats the way to install the latest version of Node.js.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm install node
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Be curious and explore more &lt;code&gt;nvm&lt;/code&gt; commands on an &lt;a href=&#34;https://github.com/creationix/nvm#usage&#34;&gt;official nvm documentation&lt;/a&gt;. My most frequently used commands are: &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;uninstall&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2019-01-15-2.jpg&#34;
  alt=&#34;NVM (Node Version Manager) — list all the installed versions&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;900&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;It is hard to remember the version of Node.js that a project depends on — smash the version into &lt;code&gt;.nvmrc&lt;/code&gt; file in the root of your project and run &lt;code&gt;nvm use&lt;/code&gt; inside this directory. If something can be automated, it should be automated — installing the right version of dependencies is not an exception. I made a simple bash script that runs &lt;code&gt;nvm use&lt;/code&gt; whenever it encounters a &lt;code&gt;.nvmrc&lt;/code&gt; file inside your project. There is a cool &lt;a href=&#34;https://github.com/lukechilds/zsh-nvm&#34;&gt;zsh-nvm plugin for Zsh users&lt;/a&gt; that does the same job.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 December</title>
      <link>https://pawelgrzybek.com/top-picks-2018-december/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-december/</guid>
      <description>&lt;h2 id=&#34;microsoft-is-building-a-chromium-powered-web-browser-that-will-replace-edge-on-windows-10httpswwwwindowscentralcommicrosoft-building-chromium-powered-web-browser-windows-10&#34;&gt;&lt;a href=&#34;https://www.windowscentral.com/microsoft-building-chromium-powered-web-browser-windows-10&#34;&gt;Microsoft is building a Chromium-powered web browser that will replace Edge on Windows 10&lt;/a&gt; &lt;a href=&#34;#microsoft-is-building-a-chromium-powered-web-browser-that-will-replace-edge-on-windows-10httpswwwwindowscentralcommicrosoft-building-chromium-powered-web-browser-windows-10&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Chromium based Anaheim is going to replace Microsoft Edge that will land on a Windows 10 at some point in 2019. This is a big change as the default HTML rendering engine will be replaced with the one that powers the most popular browser on the world Google Chrome. There is no info about the future of Chakra — JavaScript layer used by Microsoft developers. Personally I would like it to be replaced with V8 but I doubt it is going to happen. Cannot wait for the further info about this release.&lt;/p&gt;
&lt;h2 id=&#34;overreactedhttpsoverreactedio&#34;&gt;&lt;a href=&#34;https://overreacted.io/&#34;&gt;Overreacted&lt;/a&gt; &lt;a href=&#34;#overreactedhttpsoverreactedio&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After reading &lt;a href=&#34;https://overreacted.io/how-does-react-tell-a-class-from-a-function/&#34;&gt;&amp;ldquo;How Does React Tell a Class from a Function?&amp;quot;&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/dan_abramov&#34;&gt;Dan Abramov&lt;/a&gt; on his new personal blog I decided to read rest of articles. The way how Dan explains complex concepts in simple words is amazing. I highly recommend following his blog to all JavaScript enthusiasts (non only React framework users).&lt;/p&gt;
&lt;h2 id=&#34;wordpress-50-bebohttpswordpressorgnews201812bebo&#34;&gt;&lt;a href=&#34;https://wordpress.org/news/2018/12/bebo/&#34;&gt;WordPress 5.0 “Bebo”&lt;/a&gt; &lt;a href=&#34;#wordpress-50-bebohttpswordpressorgnews201812bebo&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Built with blocks in mind, big update to the most popular CMS platform arrived. Wordpress drives around 30% of websites nowadays, offers easy to use platform for clients and nice API for developers. Today platform becomes even more powerful. Adding abilities to easily build custom blocks by developers the possibilities are endless. Can&amp;rsquo;t wait for the new ideas that Wordpress community is going to come out with.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/72xdCU__XCk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;the-intllistformat-apihttpsdevelopersgooglecomwebupdates201812intl-listformat&#34;&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2018/12/intl-listformat&#34;&gt;The Intl.ListFormat API&lt;/a&gt; &lt;a href=&#34;#the-intllistformat-apihttpsdevelopersgooglecomwebupdates201812intl-listformat&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After adding &lt;a href=&#34;https://developers.google.com/web/updates/2018/10/intl-relativetimeformat&#34;&gt;&lt;code&gt;RelativeTimeFormat&lt;/code&gt;&lt;/a&gt; to V8&amp;rsquo;s &lt;code&gt;Intl&lt;/code&gt; prototype, &lt;a href=&#34;https://twitter.com/mathias&#34;&gt;Mathias Bynens&lt;/a&gt; just introduced &lt;a href=&#34;https://developers.google.com/web/updates/2018/12/intl-listformat&#34;&gt;&lt;code&gt;Intl.ListFormat API&lt;/code&gt;&lt;/a&gt; — a simple way to use lists of dynamic data.&lt;/p&gt;
&lt;h2 id=&#34;things-i-dont-know-as-of-2018httpsoverreactediothings-i-dont-know-as-of-2018&#34;&gt;&lt;a href=&#34;https://overreacted.io/things-i-dont-know-as-of-2018/&#34;&gt;Things I Don’t Know as of 2018&lt;/a&gt; &lt;a href=&#34;#things-i-dont-know-as-of-2018httpsoverreactediothings-i-dont-know-as-of-2018&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Very reputable developer from React core team Dan Abramov, published his confession about the list of thing that he doesn&amp;rsquo;t know. This post is fantastic because lots of junior developers assume that these popular on Twitter developers know everything under the sun. It is very often a reason of burnout or anxiety — not necessary because it is absolutely normal to don;t know about XYZ.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This doesn’t devalue my knowledge and experience. There’s plenty of things that I can do well. For example, learning technologies when I need them.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>A look back at 2018</title>
      <link>https://pawelgrzybek.com/a-look-back-at-2018/</link>
      <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/a-look-back-at-2018/</guid>
      <description>&lt;p&gt;This isn&amp;rsquo;t a post about a JavaScript — not about programming at all, in fact. Nor about photography, or graphic design either. Today is the day for a special post to recap my achievements and fails from the past year and reveal some plans for the next one. I&amp;rsquo;ve been cultivating this ritual for a few years now (&lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2016/&#34;&gt;&amp;ldquo;A look back at 2016&amp;rdquo;&lt;/a&gt; and &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2017/&#34;&gt;&amp;ldquo;A look back at 2017&amp;rdquo;&lt;/a&gt;) and couldn&amp;rsquo;t let this tradition pass so here I am with this year&amp;rsquo;s update.&lt;/p&gt;
&lt;h2 id=&#34;professional&#34;&gt;Professional &lt;a href=&#34;#professional&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I spent nearly two years with smart and inspiring people at &lt;a href=&#34;https://www.enginecreative.co.uk/&#34;&gt;Engine Creative&lt;/a&gt;. The natural need to progress drove me to leave the business and not long after that I joined &lt;a href=&#34;https://mindera.com/&#34;&gt;Mindera&lt;/a&gt; as a Senior Front End Developer. Meeting this bunch of extremely talented and passionate people makes me think that it was the best thing that happened to me this year. I revealed a few more secrets about this change in the post &lt;a href=&#34;https://pawelgrzybek.com/thanks-for-everything-engine-creative-hi-mindera/&#34;&gt;&amp;ldquo;Thanks for everything Engine Creative! Hi Mindera!&amp;quot;&lt;/a&gt; published in May this year.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-12-23-1.jpg&#34;
  alt=&#34;From Engine Creative to Mindera&#34;
  loading=&#34;lazy&#34;
  width=&#34;1200&#34;
  height=&#34;801&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Just by looking at &lt;a href=&#34;https://github.com/pawelgrzybek&#34;&gt;my GitHub contributions graph&lt;/a&gt; I can see that it was my most hard-working year ever. It doesn&amp;rsquo;t feel like it, but I contributed 70% more than the year before. I published nearly 30 articles on my personal website this year, released &lt;a href=&#34;https://pawelgrzybek.com/i-built-a-thing-pinbuddy/&#34;&gt;PinBuddy — Google Chrome extension for Pinboard&lt;/a&gt; and actively continued supporting my open source software that helps thousands of people around the world everyday.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-12-23-2.jpg&#34;
  alt=&#34;Pawel Grzybek — Github Contribution graph 2018&#34;
  loading=&#34;lazy&#34;
  width=&#34;2420&#34;
  height=&#34;560&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;One of the most mature professional achievements of this year is a new ability I learned: how to chill out. I&amp;rsquo;ve accepted the fact that I will never catch every new, fascinating news items on Twitter. I won&amp;rsquo;t get the chance to use all the hot frameworks from the top of Hacker News and there is no chance I&amp;rsquo;ll attend all the cool conferences around the world. It&amp;rsquo;s an oxymoron to say but I am very aware that I am doing more by doing less.&lt;/p&gt;
&lt;h2 id=&#34;personal&#34;&gt;Personal &lt;a href=&#34;#personal&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes! I&amp;rsquo;m a truly happy man! I said that a year ago and I cannot be happier that nothing changed in this aspect. I still share my life with the most beautiful person inside and out on this planet. I&amp;rsquo;ve visited a few cool places, I&amp;rsquo;ve eaten a few amazing meals and bought myself a few cool gadgets.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-12-23-3.jpg&#34;
  alt=&#34;Some of my favorite moments of 2018&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;780&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t live in Northampton anymore and I&amp;rsquo;m very happy to tell you that I can&amp;rsquo;t wait to have a coffee or a beer with you in Leicester. Although the convenience of living a few minutes away from my office is awesome, the thing that I am the most excited about is the change. New places to explore and people to meet!&lt;/p&gt;
&lt;p&gt;I am very happy that my passion for photography has been reborn. There is nothing more relaxing for me than sipping a great coffee and messing around with my favourite &lt;a href=&#34;https://pawelgrzybek.com/capture-one-pro-the-best-parts/&#34;&gt;Capture One Pro&lt;/a&gt; and raw files taken on my mirrorless Sony camera. You can occasionally see some of my snaps on my &lt;a href=&#34;https://www.instagram.com/pawelgrzybek/&#34;&gt;Instagram&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;plans-for-2019&#34;&gt;Plans for 2019 &lt;a href=&#34;#plans-for-2019&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Professionally — I am not planning to slow down. I am committing myself to building great open-source software, write articles that help people solve programming challenges and being involved in the process of making the web a better place. There is a plan to release something bigger in a few months time — it will be a subscription-based (very cheap) little SaaS (Software as a Service) product. I can&amp;rsquo;t tell you more just now but be assured it will be very cool.&lt;/p&gt;
&lt;p&gt;Looking at the personal aspects of my life there is a thing that I am truly unhappy about and this is my biggest challenge in the upcoming months. I am not feeling happy on my own body. My weight is like a little roller coaster, and consequently so is my mental comfort. I am definitely missing some regular activity that could help my body to recover its shape and my brain to not let me down for no particular reason. I want my six-pack back.&lt;/p&gt;
&lt;p&gt;Most importantly, this time next year I would like to confirm again that I am truly happy man. I wish that both myself and my family stay healthy with wide smiles across our faces. There is one more thing, but let me keep that to myself for now and share with you this particular life achievement at the right moment.&lt;/p&gt;
&lt;p&gt;Thank you for reading my friend. I wish you a fantastic 2019!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 November</title>
      <link>https://pawelgrzybek.com/top-picks-2018-november/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-november/</guid>
      <description>&lt;h2 id=&#34;faster-async-functions-and-promiseshttpsv8devblogfast-async&#34;&gt;&lt;a href=&#34;https://v8.dev/blog/fast-async&#34;&gt;Faster async functions and promises&lt;/a&gt; &lt;a href=&#34;#faster-async-functions-and-promiseshttpsv8devblogfast-async&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Developers from V8 team (JavaScript engine behind the Google Chrome, Node and Electron) shared fascinating news and made developers life a bit easier. There is no room for discussion about &amp;ldquo;&lt;code&gt;Promise&lt;/code&gt; vs &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;&amp;rdquo; anymore. The engine is much better optimize to work with a second one. If you prefer to watch a video over reading lengthy articles…&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/DFP5DKDQfOc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;chrome-dev-summit-2018httpswwwyoutubecomplaylistlistplnykxof6rcidjlcx1pcphppmf43akoadf&#34;&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF&#34;&gt;Chrome Dev Summit 2018&lt;/a&gt; &lt;a href=&#34;#chrome-dev-summit-2018httpswwwyoutubecomplaylistlistplnykxof6rcidjlcx1pcphppmf43akoadf&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The 6th Chrome Dev Summit took place on November 12th and 13th! Surely one of the most important events for web professionals. Dive deep, browse the playlist and watch everything that interests you. There is a lot to catch about new performance best practices, tooling and techniques.&lt;/p&gt;
&lt;h2 id=&#34;the-state-of-javascript-2018https2018stateofjscom&#34;&gt;&lt;a href=&#34;https://2018.stateofjs.com/&#34;&gt;The State of JavaScript 2018&lt;/a&gt; &lt;a href=&#34;#the-state-of-javascript-2018https2018stateofjscom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is out with another shocking numbers presented in exceptional way.&lt;/p&gt;
&lt;h2 id=&#34;a-guide-to-custom-elements-for-react-developershttpscss-trickscoma-guide-to-custom-elements-for-react-developersarticle-header-id-1&#34;&gt;&lt;a href=&#34;https://css-tricks.com/a-guide-to-custom-elements-for-react-developers/#article-header-id-1&#34;&gt;A Guide to Custom Elements for React Developers&lt;/a&gt; &lt;a href=&#34;#a-guide-to-custom-elements-for-react-developershttpscss-trickscoma-guide-to-custom-elements-for-react-developersarticle-header-id-1&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Great article to get the basics of Custom Elements. I am big fan of embracing the platform, so the author of this article is. Clean comparison to React with pros and cons highlighted.&lt;/p&gt;
&lt;h2 id=&#34;webdevhttpswebdev&#34;&gt;&lt;a href=&#34;https://web.dev/&#34;&gt;web.dev&lt;/a&gt; &lt;a href=&#34;#webdevhttpswebdev&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Presented on Google Summit 2018 cool project with multiple learning paths that will make you a much better web developer. From security, through performance to accessibility. Log-in via your Google account, track your progress and make a web a better place.&lt;/p&gt;
&lt;h2 id=&#34;uncle-bob-martin---the-future-of-programminghttpsyoutubeeciwpzgebfc&#34;&gt;&lt;a href=&#34;https://youtu.be/ecIWPzGEbFc&#34;&gt;&amp;ldquo;Uncle&amp;rdquo; Bob Martin - The Future of Programming&lt;/a&gt; &lt;a href=&#34;#uncle-bob-martin---the-future-of-programminghttpsyoutubeeciwpzgebfc&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Very insightful talk by Robert C. Martin about the past, present and future state of programming. Where we came from, where are we heading to and what should we do to make our job and life of other people much better — worth to hit this play button.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ecIWPzGEbFc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Cross-cutting functionality in React using Higher-Order Components, Render Props and Hooks</title>
      <link>https://pawelgrzybek.com/cross-cutting-functionality-in-react-using-higher-order-components-render-props-and-hooks/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/cross-cutting-functionality-in-react-using-higher-order-components-render-props-and-hooks/</guid>
      <description>&lt;p&gt;Working with modern JavaScript frameworks is all about reusable components that contain the markup, styling and business logic — React is fantastic at it and is &lt;a href=&#34;https://2018.stateofjs.com/front-end-frameworks/react/&#34;&gt;gaining more popularity&lt;/a&gt; every year. Very often though, we have a situation where a few components contain the same functionality and we need a way to abstract it out according to our &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY (don&amp;rsquo;t repeat yourself)&lt;/a&gt; principle that we&amp;rsquo;ve been developing for years.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-11-22-1.jpg&#34;
  alt=&#34;Cross-cutting functionality in React — illustration by Zuzanna Rupinska&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;880&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Practice is the best teacher so let&amp;rsquo;s say that we have two components: &lt;code&gt;&amp;lt;Content /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Sidebar /&amp;gt;&lt;/code&gt;. Each of them fetches a random Chuck Norris joke from the &lt;a href=&#34;http://www.icndb.com/&#34;&gt;ICNDb.com&lt;/a&gt; API. Like so…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Loading…&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;componentDidMount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.icndb.com/jokes/random&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Error&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sidebar&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Loading…&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;componentDidMount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.icndb.com/jokes/random&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Error&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sidebar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Can you spot the duplication of logic? Wouldn&amp;rsquo;t it be nicer to pass a joke as a prop and make the data fetch reusable across the whole project? Maybe even drop it into another app one day? Historically the Mixins system was used to reuse code between components but there are plenty of reasons why &lt;a href=&#34;https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html&#34;&gt;Mixins are considered harmful&lt;/a&gt; and we shouldn&amp;rsquo;t rely on this concept anymore. &lt;a href=&#34;https://reactjs.org/docs/higher-order-components.html&#34;&gt;Higher Order Components&lt;/a&gt; and &lt;a href=&#34;https://reactjs.org/docs/render-props.html&#34;&gt;Render Props&lt;/a&gt; aren&amp;rsquo;t parts of the React API per se but are advanced patterns that allow us to reuse a component&amp;rsquo;s logic. Announced at React Conf 2018, Hooks help to simplify reusability even further.&lt;/p&gt;
&lt;h2 id=&#34;higher-order-components&#34;&gt;Higher-Order Components &lt;a href=&#34;#higher-order-components&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the world of mathematics and computer science, a &lt;a href=&#34;https://en.wikipedia.org/wiki/Higher-order_function&#34;&gt;higher-order function&lt;/a&gt; is one that takes a function as an argument or returns a function as a result. To translate this into more React-like jargon; it is a function that takes a &lt;strong&gt;component as an argument&lt;/strong&gt; and &lt;strong&gt;returns another component&lt;/strong&gt; (with some &amp;ldquo;extra powers&amp;rdquo;). It is very similar to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;Decorator pattern&lt;/a&gt; used extensively in software development. The naming convention adopted in the React ecosystem is to use &lt;code&gt;with&lt;/code&gt; as a prefix for HOCs because it describes what the &amp;ldquo;extra power&amp;rdquo; of the returned component is (ie. &lt;code&gt;withData&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Theory aside and let&amp;rsquo;s build a HOC &lt;code&gt;withJoke&lt;/code&gt; that returns a component with an extra &lt;code&gt;joke&lt;/code&gt; prop that encapsulates the logic duplicated in both of our components.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withJoke&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WrappedComponent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Loading…&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;componentDidMount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.icndb.com/jokes/random&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Error&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}));&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;WrappedComponent&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;...this.props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The returned component has a new &lt;code&gt;joke&lt;/code&gt; prop and receives all the props of its source component via &lt;code&gt;...props&lt;/code&gt;. In doing so we have created a reusable provider of data fetched from the API. With this we can now revisit our test application and remove the duplicated logic from &lt;code&gt;&amp;lt;Content /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Sidebar /&amp;gt;&lt;/code&gt;, convert both of them to functional components and decorate them using the &lt;code&gt;withJoke&lt;/code&gt; higher order component.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withJoke&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./withJoke&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withJoke&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./withJoke&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sidebar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sidebar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sidebar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;pros-of-using-hoc&#34;&gt;Pros of using HOC &lt;a href=&#34;#pros-of-using-hoc&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;HOCs provide a nice pattern to reuse logic. A number of popular projects use this pattern: &lt;a href=&#34;https://www.npmjs.com/package/react-redux&#34;&gt;React Redux&lt;/a&gt;, &lt;a href=&#34;http://facebook.github.io/relay/&#34;&gt;Relay&lt;/a&gt; or &lt;a href=&#34;https://formidable.com/open-source/radium/&#34;&gt;Radium&lt;/a&gt; just to name a few. They are easy to compose, use and chain together. &lt;a href=&#34;https://twitter.com/acdlite&#34;&gt;Andrew Clark&lt;/a&gt; from the React core team, being a strong advocate of this composition, created a popular utility library called &lt;a href=&#34;https://github.com/acdlite/recompose&#34;&gt;recompose&lt;/a&gt;. The active maintenance of it has been discontinued because of the recently announced Hooks that solve the majority of the issues that this library tried to help with (more on that later).&lt;/p&gt;
&lt;h3 id=&#34;cons-of-using-hoc&#34;&gt;Cons of using HOC &lt;a href=&#34;#cons-of-using-hoc&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is no rose without a thorn. Chained higher order components can lead to prop naming collisions — technically there is nothing incorrect about the implementation but unexpected results are painful to debug. When overused it is hard to guess where a particular prop is coming from and going through a nested tree in the console isn&amp;rsquo;t a pleasant experience. Some rare issues with using them inside a &lt;code&gt;render()&lt;/code&gt;, class static methods and passing &lt;code&gt;ref&lt;/code&gt;s are well detailed in the React docs under the &lt;a href=&#34;https://reactjs.org/docs/higher-order-components.html#caveats&#34;&gt;Higher-Order Components — Caveats&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/mjackson&#34;&gt;Michael Jackson&lt;/a&gt;, creator of &lt;a href=&#34;https://github.com/ReactTraining/react-router&#34;&gt;React Router&lt;/a&gt; and a few other popular open source projects pointed out a lot of issues with HOCs in his talk &lt;a href=&#34;https://youtu.be/BcVAq3YFiuc&#34;&gt;&amp;ldquo;Never Write Another HoC&amp;rdquo;&lt;/a&gt; presented at Phoenix ReactJS in September 2017. His solution lead me to another way of providing cross-cutting functionality in React.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;render-props&#34;&gt;Render Props &lt;a href=&#34;#render-props&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Render props is another technique of reusing logic in multiple components. Compared to HOCs it requires much less boilerplate code and data flow is much more transparent. The concept is simple — &lt;strong&gt;build your component as you would normally do&lt;/strong&gt; and let the &lt;code&gt;render()&lt;/code&gt; method &lt;strong&gt;invoke a function with the extra logic&lt;/strong&gt; as a parameter. Our mission is to build a supplier of data fetched from the &lt;a href=&#34;http://www.icndb.com/&#34;&gt;ICNDb.com&lt;/a&gt; API, so let&amp;rsquo;s do it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Joke&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Loading…&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;componentDidMount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.icndb.com/jokes/random&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Error&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, we are invoking a function stored in a &lt;code&gt;render&lt;/code&gt; prop — this is a good indicator that the &lt;strong&gt;value of the &lt;code&gt;render&lt;/code&gt; prop should be a function&lt;/strong&gt;. The name &lt;code&gt;render&lt;/code&gt; isn&amp;rsquo;t part of the React API — just a meaningful convention. This is the way to use it…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Joke&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Joke&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Sidebar&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Another possible implementation is to use &lt;code&gt;props.children()&lt;/code&gt; as a function — this is exactly the same concept and the use of either implementation is down to personal preference.&lt;/p&gt;
&lt;h3 id=&#34;pros-of-using-render-props&#34;&gt;Pros of using Render props &lt;a href=&#34;#pros-of-using-render-props&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you watched &lt;a href=&#34;https://youtu.be/BcVAq3YFiuc&#34;&gt;&amp;ldquo;Never Write Another HoC&amp;rdquo;&lt;/a&gt; by Michael Jackson, you probably understand the number of benefits of using Render Props over HOC. There are plenty of well known libraries that extensively use this pattern: &lt;a href=&#34;https://github.com/paypal/downshift&#34;&gt;Downshift&lt;/a&gt;, &lt;a href=&#34;https://github.com/chenglou/react-motion&#34;&gt;React-Motion&lt;/a&gt; and &lt;a href=&#34;https://reacttraining.com/react-router/&#34;&gt;React Router&lt;/a&gt; to list a few. Have a look at the &lt;a href=&#34;https://github.com/jaredpalmer/awesome-react-render-props&#34;&gt;Awesome React Render Props&lt;/a&gt; by Jared Palmer for hundreds more. Ooo, wait a second! &lt;a href=&#34;https://reactjs.org/docs/context.html&#34;&gt;React Context API&lt;/a&gt; uses it too.&lt;/p&gt;
&lt;p&gt;Compared to imperative HOCs, Render Props provide a clean declarative API that is easy to reason about and compose. There&amp;rsquo;s no need to worry about naming collisions of props, coping methods or out of the blue props attached to a component.&lt;/p&gt;
&lt;h3 id=&#34;cons-of-using-render-props&#34;&gt;Cons of using Render props &lt;a href=&#34;#cons-of-using-render-props&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Render Props used with &lt;code&gt;React.PureComponent&lt;/code&gt; come with some restrictions but this has been detailed in the &lt;a href=&#34;https://reactjs.org/docs/render-props.html#be-careful-when-using-render-props-with-reactpurecomponent&#34;&gt;React documentation&lt;/a&gt; and the solution is easy to apply. Overusing Render Props may drive you to somewhere that looks well known from back in the day: Callback Hell — I am not missing these times.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s not too much that I can criticise this pattern for but there is one more thing that needs to be mentioned when we are talking about reusability in React though.&lt;/p&gt;
&lt;h2 id=&#34;hooks&#34;&gt;Hooks &lt;a href=&#34;#hooks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At React Conf 2018 &lt;a href=&#34;https://twitter.com/sophiebits&#34;&gt;Sophie Alpert&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/dan_abramov&#34;&gt;Dan Abramov&lt;/a&gt; announced the &lt;a href=&#34;https://reactjs.org/docs/hooks-intro.html&#34;&gt;Hooks proposal&lt;/a&gt; — possibly the most exciting thing in React-land this year. &lt;a href=&#34;https://youtu.be/V-QO-KO90iQ&#34;&gt;&amp;ldquo;React Today and Tomorrow&amp;rdquo;&lt;/a&gt; followed by &lt;a href=&#34;https://youtu.be/wXLf18DsV-I&#34;&gt;&amp;ldquo;90% Cleaner React With Hooks&amp;rdquo; by Ryan Florence&lt;/a&gt; is compulsory homework for those who are not familiar with Hooks yet.&lt;/p&gt;
&lt;p&gt;A clear pattern for logic reusability was one of the main reasons why the React Hooks API has been designed by &lt;a href=&#34;https://twitter.com/sebmarkbage&#34;&gt;Sebastian Markbåge&lt;/a&gt;. &lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html&#34;&gt;A few built-in hooks&lt;/a&gt; to manage state, lifecycle and context opens up opportunities to create more powerful custom hooks. &lt;a href=&#34;https://twitter.com/dan_abramov&#34;&gt;Dan Abramov&lt;/a&gt; agrees that &lt;a href=&#34;https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889#f7df&#34;&gt;custom Hooks are the most appealing part of the Hooks proposal&lt;/a&gt;. This article is not about Hooks per se but about logic reusability — please familiarise yourself with the basics in the &lt;a href=&#34;https://reactjs.org/docs/hooks-intro.html&#34;&gt;&amp;ldquo;Introducing Hooks&amp;rdquo; section of the React documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Back to our &lt;code&gt;joke&lt;/code&gt; provider. Look how nice this is looking using Hooks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useEffect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Loading…&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;useEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.icndb.com/jokes/random&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useJoke&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./useJoke&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;heading&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useJoke&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./useJoke&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;heading&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sidebar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This is clean, this is reusable, this is easy to read! I am Hook&amp;rsquo;ed!&lt;/p&gt;
&lt;h3 id=&#34;pros-of-using-hooks&#34;&gt;Pros of using HOOKS &lt;a href=&#34;#pros-of-using-hooks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;No unnecessary nesting, no need to worry about complex patterns, and no need for classes, HOCs or &lt;code&gt;render&lt;/code&gt; props. Despite the fact that the Hooks API adds 1,5kb to the gzipped React codebase, in the scale of real life projects the minified results shows some impressive bundle size reductions (based on some early tests of some brave community members). It&amp;rsquo;s backwards compatible, well designed, very declarative and a self descriptive API.&lt;/p&gt;
&lt;h3 id=&#34;cons-of-using-hooks&#34;&gt;Cons of using HOOKS &lt;a href=&#34;#cons-of-using-hooks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;:-)&lt;/p&gt;
&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up &lt;a href=&#34;#wrap-up&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Chuck Norris joke application is an oversimplified example but could be similar to the one that you may have tomorrow in your real-life project. The point is to understand reusability in React.&lt;/p&gt;
&lt;p&gt;To build fantastic web applications you don&amp;rsquo;t need to know any of these patters but they may help you to take your work to the next level. Every abstraction comes with some cost. Which of these patters you are going to follow is just a question of personal preference. Personally speaking — Hooks is the way to go if I can use it, Render Props if I cannot use Hooks, and HOCs if I have no other choice.&lt;/p&gt;
&lt;p&gt;Thanks to my girlfriend &lt;a href=&#34;https://twitter.com/hellozuzz&#34;&gt;Zuzanna Rupinska&lt;/a&gt; for her patience when I write new articles and for the amazing illustration in the preface of this post.&lt;/p&gt;
&lt;p&gt;The comments section is waiting for y&amp;rsquo;all! Until next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 October</title>
      <link>https://pawelgrzybek.com/top-picks-2018-october/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-october/</guid>
      <description>&lt;h2 id=&#34;welcome-to-solidhttpssolidinruptcom&#34;&gt;&lt;a href=&#34;https://solid.inrupt.com/&#34;&gt;Welcome to Solid&lt;/a&gt; &lt;a href=&#34;#welcome-to-solidhttpssolidinruptcom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sir Tim Berners-Lee — the creator of World Wide Web — announced the Solid ecosystem. The motivation and the way it works seems to be well-thought. I still don&amp;rsquo;t understand it thoroughly but it is definitely a thing that is worth to follow.&lt;/p&gt;
&lt;h2 id=&#34;create-react-app-20-babel-7-sass-and-morehttpsreactjsorgblog20181001create-react-app-v2html&#34;&gt;&lt;a href=&#34;https://reactjs.org/blog/2018/10/01/create-react-app-v2.html&#34;&gt;Create React App 2.0: Babel 7, Sass, and More&lt;/a&gt; &lt;a href=&#34;#create-react-app-20-babel-7-sass-and-morehttpsreactjsorgblog20181001create-react-app-v2html&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Years worth of improvements in a single dependency update just announced by React team. New version of React starter kit comes bundled via WebPack 4 and contains things like: Babel 7, Jest 23, Sass and CSS Modules support and tons of under the hood improvements.&lt;/p&gt;
&lt;h2 id=&#34;modern-web-podcast---houdinihttpsyoutubeqbhjiybbplm&#34;&gt;&lt;a href=&#34;https://youtu.be/QbHJIybbPLM&#34;&gt;Modern Web Podcast - Houdini&lt;/a&gt; &lt;a href=&#34;#modern-web-podcast---houdinihttpsyoutubeqbhjiybbplm&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The state of Houdini project with core contributor &lt;a href=&#34;https://twitter.com/dassurma&#34;&gt;Das Surma&lt;/a&gt;. About the Houdini basics, worklets and its API. Everything that you need to know about its current state in a single screencast.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/QbHJIybbPLM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;typekit-is-adobe-fontshttpstheblogadobecomtypekit-is-adobe-fonts&#34;&gt;&lt;a href=&#34;https://theblog.adobe.com/typekit-is-adobe-fonts/&#34;&gt;Typekit is Adobe Fonts&lt;/a&gt; &lt;a href=&#34;#typekit-is-adobe-fontshttpstheblogadobecomtypekit-is-adobe-fonts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Seven years ago TypeKit has been acquired by Adobe. Since then product was slowly merging into an Adobe ecosystem and today probably the biggest change happened. It is not a TypeKit anymore — say hello to Adobe Fonts. No more page-views and domain limits. Sounds really cool for all Adobe Creative Cloud owners.&lt;/p&gt;
&lt;h2 id=&#34;github-actionshttpsgithubcomfeaturesactions&#34;&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; &lt;a href=&#34;#github-actionshttpsgithubcomfeaturesactions&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Back in the days GitHub pages were a killer in terms of free hosting for static websites. Then players like Netlify came around and changed the game drastically by offering more cool features at a very low cost (or for free). Now enter the GitHub Actions. They allow you to stream your workflow by hooking GitHub events to simple but powerful commands created by little snippets of code or via GUI. I cannot wait to play a bit with this feature and possibly publish some primer on this website very shortly. If you want to find out more, I can&amp;rsquo;t recommend enough &lt;a href=&#34;https://css-tricks.com/introducing-github-actions/&#34;&gt;Introducing GitHub Actions&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/sarah_edo&#34;&gt;Sarah Drasner&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-intlrelativetimeformat-apihttpsdevelopersgooglecomwebupdates201810intl-relativetimeformat&#34;&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2018/10/intl-relativetimeformat&#34;&gt;The Intl.RelativeTimeFormat API&lt;/a&gt; &lt;a href=&#34;#the-intlrelativetimeformat-apihttpsdevelopersgooglecomwebupdates201810intl-relativetimeformat&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/mathias&#34;&gt;Mathias Bynens&lt;/a&gt; explains a very exciting spec that is slowly joining the Internationalization API — &lt;code&gt;RelativeTimeFormat&lt;/code&gt;. If you have ever tried to print on your web app a phrase like &amp;ldquo;yesterday&amp;rdquo; or &amp;ldquo;4 weeks ago&amp;rdquo; you know how hard this is. Moment.js was my way to go for years — it comes with some disadvantages tho — performance. This method is going to be helpful. Great explained by Mathias from V8 team.&lt;/p&gt;
&lt;h2 id=&#34;react-v1660-lazy-memo-and-contexttypehttpsreactjsorgblog20181023react-v-16-6html&#34;&gt;&lt;a href=&#34;https://reactjs.org/blog/2018/10/23/react-v-16-6.html&#34;&gt;React v16.6.0: lazy, memo and contextType&lt;/a&gt; &lt;a href=&#34;#react-v1660-lazy-memo-and-contexttypehttpsreactjsorgblog20181023react-v-16-6html&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;New minor upgrade to React came out. The most exciting part of a new release is definitely &lt;code&gt;React.lazy&lt;/code&gt; and &lt;code&gt;&amp;lt;Suspense /&amp;gt;&lt;/code&gt; that allows developers to implement a lazy loaded chunks with ease. The new &lt;code&gt;contextType&lt;/code&gt; provides a much better way to work with Context API introduced in 16.3. &lt;code&gt;React.memo&lt;/code&gt; brings the advantages of &lt;code&gt;PureComponent&lt;/code&gt; to functional components.&lt;/p&gt;
&lt;h2 id=&#34;introducing-hookshttpsreactjsorgdocshooks-introhtml&#34;&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-intro.html&#34;&gt;Introducing Hooks&lt;/a&gt; &lt;a href=&#34;#introducing-hookshttpsreactjsorgdocshooks-introhtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After quick intro by &lt;a href=&#34;https://twitter.com/sophiebits&#34;&gt;Sophie Alpert &lt;/a&gt;, &lt;a href=&#34;https://twitter.com/dan_abramov&#34;&gt;Dan Abramov&lt;/a&gt; presented something incredibly cool on &lt;a href=&#34;https://conf.reactjs.org/&#34;&gt;React Conf 2018&lt;/a&gt; — &lt;a href=&#34;https://reactjs.org/docs/hooks-intro.html&#34;&gt;Hooks&lt;/a&gt;. It allows developers to supercharge functional components and give them a power of class based components. Adding state via &lt;code&gt;useState()&lt;/code&gt;, subscribing to a change via &lt;code&gt;useEffect()&lt;/code&gt; or hooking into a Context API via &lt;code&gt;useContext()&lt;/code&gt; are not the only things that you can do with it. &lt;a href=&#34;https://reactjs.org/docs/hooks-custom.html&#34;&gt;Custom Hooks&lt;/a&gt; are the most exciting! &lt;a href=&#34;https://twitter.com/ryanflorence&#34;&gt;Ryan Florence
&lt;/a&gt; shows the practical use case for hooks in a second part of this presentation. Can&amp;rsquo;t wait to use it in production and I am just waiting for the community to come up with some smart examples. This is still a proposal and despite the fact it is very stable, it may change slightly in a future — find out more about the current state on &lt;a href=&#34;https://github.com/reactjs/rfcs/pull/68&#34;&gt;RFC (Request for Comments): React Hooks page&lt;/a&gt;. If React is your interest — &lt;a href=&#34;https://youtu.be/dpw9EHDh2bM&#34;&gt;React Today and Tomorrow and 90% Cleaner React&lt;/a&gt; is a must-watch.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/dpw9EHDh2bM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>I built a thing! PinBuddy!</title>
      <link>https://pawelgrzybek.com/i-built-a-thing-pinbuddy/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-built-a-thing-pinbuddy/</guid>
      <description>&lt;p&gt;The internet is full of useful things that are worth revisiting in the future. Bookmarking them all in a browser built-in feature is an option but it quickly becomes unmanageable after a while. A myriad of bookmarking services have been born to solve this issue and my favourite amongst them is &lt;a href=&#34;http://pinboard.in&#34;&gt;Pinboard&lt;/a&gt; built by Maciej Cegłowski. Maybe it isn&amp;rsquo;t the prettiest website around neither is the API the cleanest and most intuitive but it definitely comes with one big advantage — it works.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is absolutely nothing interesting about the Pinboard architecture or implementation; I consider that a feature!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After a few years of working with Pinboard, my collection has grown a lot, getting bigger day by day while I visit resources I don&amp;rsquo;t want to lose. Adding new and browsing existing internet resources is what bookmarking services should do effectively — unfortunately, I identified some Pinboard issues regarding user interface usability. There are few browser plugins that make your life easier but they all seemed to steer away from solving these issues.&lt;/p&gt;
&lt;p&gt;I had a few technologies I wanted to play with and I knew a little bit of HTML, CSS, and JavaScript too — which is all you need to build a browser extension. So I built…&lt;/p&gt;
&lt;h2 id=&#34;pinbuddy--browse-your-pinboard-bookmarks-and-add-new-ones-with-ease&#34;&gt;PinBuddy — Browse your Pinboard bookmarks and add new ones with ease &lt;a href=&#34;#pinbuddy--browse-your-pinboard-bookmarks-and-add-new-ones-with-ease&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/pinbuddy/ppokjacfheflhaojmndcblibahmopkfl&#34;&gt;PinBuddy&lt;/a&gt; is a simple Google Chrome toolbar extension that helps me to browse, filter and add new URLs to the service in no time. It is fully keyboard accessible, configurable and comes with a plain design well-known from Pinboard website. Let me go through a few aspects of this tool in more details.&lt;/p&gt;
&lt;h3 id=&#34;api-token-to-authenticate&#34;&gt;API token to authenticate &lt;a href=&#34;#api-token-to-authenticate&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;PinBuddy never asks you for your personal authentication credentials — it uses a dedicated API token to authenticate that you are you. You can find your personal token on the &lt;a href=&#34;https://pinboard.in/settings/password&#34;&gt;setting page under the password tab&lt;/a&gt;. This short identifier can be invalidated and regenerated on user request at any time.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-10-16-1.jpg&#34;
  alt=&#34;PinBuddy uses API token to authenticate&#34;
  loading=&#34;lazy&#34;
  width=&#34;1624&#34;
  height=&#34;1324&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;configurable&#34;&gt;Configurable &lt;a href=&#34;#configurable&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Options page allows you to log out and configure a few very useful settings that may boost your productivity. Decide whether the &amp;ldquo;browsing&amp;rdquo; or &amp;ldquo;adding a new bookmark&amp;rdquo; should be your main screen, whether &amp;ldquo;private&amp;rdquo; or &amp;ldquo;read later&amp;rdquo; should be checked by default when you add a new resource or toggle system notifications for successfully saved or deleted links.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-10-16-2.jpg&#34;
  alt=&#34;PinBuddy options page&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1640&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;keyboard-accessible&#34;&gt;Keyboard accessible &lt;a href=&#34;#keyboard-accessible&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am a keyboard shortcut geek and I use them all the time. Luckily PinBoard allows you to browse and add new URLs without ever leaving your keyboard.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⌥ + p&lt;/code&gt; - show / hide PinBuddy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌥ + 1&lt;/code&gt; - go to all view&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌥ + 2&lt;/code&gt; - go to add view&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌘ + Enter&lt;/code&gt; / &lt;code&gt;Ctrl + Enter&lt;/code&gt; - add bookmark (add view)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌘ + Enter&lt;/code&gt; / &lt;code&gt;Ctrl + Enter&lt;/code&gt; - open bookmark in background (all view)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌘ + Backspace&lt;/code&gt; / &lt;code&gt;Ctrl + Backspace&lt;/code&gt; - delete bookmark (all view)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-10-16-3.gif&#34;
  alt=&#34;PinBuddy is keyboard accessible&#34;
  loading=&#34;lazy&#34;
  width=&#34;1210&#34;
  height=&#34;776&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;browsing-bookmarks&#34;&gt;Browsing bookmarks &lt;a href=&#34;#browsing-bookmarks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Search for a keyword in title, filter private, public, untagged or unread. Delete or open in a background via single clicks — you can do it.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-10-16-4.jpg&#34;
  alt=&#34;Browse Pinboard bookmarks with PinBuddy&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;878&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;adding-bookmarks&#34;&gt;Adding bookmarks &lt;a href=&#34;#adding-bookmarks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Adding a page could not be easier. The title is prefilled based on the website&amp;rsquo;s &lt;code&gt;&amp;lt;title/&amp;gt;&lt;/code&gt; tag which normally works for me but feel free to edit it — it is just a helpful feature of PinBuddy. The long description is optional and can be fetched based on user cursor selection. Handy, isn&amp;rsquo;t it? Tags are probably the field you will edit the most. Hit the &amp;ldquo;add bookmark&amp;rdquo; button or simply &lt;code&gt;⌘ + Enter&lt;/code&gt; / &lt;code&gt;Ctrl + Enter&lt;/code&gt; when you are ready to add it to your collection.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-10-16-5.jpg&#34;
  alt=&#34;Add Pinboard bookmark with PinBuddy&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;878&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;highlight-already-bookmarked-urls&#34;&gt;Highlight already bookmarked URLs &lt;a href=&#34;#highlight-already-bookmarked-urls&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In a maze of resources on the internet, it is easy to add something that is already in your collection. PinBuddy helps you with that by highlighting an icon and prefilling form inputs with details that you previously used to identify this URL&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-10-16-6.jpg&#34;
  alt=&#34;PinBuddy helps to identify already saved bookmarks&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;878&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;help-me-to-improve-pinbuddy-please&#34;&gt;Help me to improve PinBuddy, please &lt;a href=&#34;#help-me-to-improve-pinbuddy-please&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PinBuddy is an ongoing project and I am planning to add new features based on users requests. I already received a support of multiple people that I would love to thank you for so much.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://www.behance.net/miloszkanibf79&#34;&gt;Miłosz Kaniuk&lt;/a&gt; for great logo and UI / UX recommendations&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://twitter.com/gregory_jarvez&#34;&gt;Gregory Assasie&lt;/a&gt; for dev tips&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://www.instagram.com/zuzanna.rupinska/&#34;&gt;Zuzanna Rupińska&lt;/a&gt; for brewing a coffee for me during development :-*&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/LionelFW&#34;&gt;Lionel Foucambert&lt;/a&gt; for the French translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/chmartinez&#34;&gt;Christian&lt;/a&gt; for the Spanish translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/femtioelva&#34;&gt;Fredrika&lt;/a&gt; for the Swedish translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/dhkamp&#34;&gt;David Hölkeskamp&lt;/a&gt; for the German translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/Bigbublik&#34;&gt;Bublik&lt;/a&gt; for the Russian translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://www.frodebang.com/&#34;&gt;Frode Grimstad Bang&lt;/a&gt; for the Norwegian translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/KostasLib&#34;&gt;Kostas Liberopoulos&lt;/a&gt; for the Greek translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/guastallaigor&#34;&gt;Igor Guastalla&lt;/a&gt; for the Brazilian translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/Ikaros1510&#34;&gt;Oskari Holopainen&lt;/a&gt; for the Finnish translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/cristianbell&#34;&gt;Cristian Bell&lt;/a&gt; for the Romanian translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/wolframtheta&#34;&gt;Xavier Marquès&lt;/a&gt; and &lt;a href=&#34;https://github.com/oriolhub&#34;&gt;oriolhub&lt;/a&gt; for the Catalan translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/progBorg&#34;&gt;Tom Veldman&lt;/a&gt; for the Dutch translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/AnaGilda&#34;&gt;Ana Gilda Rodrigues&lt;/a&gt; for the Portuguese translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/nick-rudenko&#34;&gt;Nikita Rudenko&lt;/a&gt; for the Ukrainian translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/yotam180&#34;&gt;Yotam Salmon&lt;/a&gt; for the Hebrew translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/mrTmr12&#34;&gt;murat emir cabaroğlu&lt;/a&gt; for the Turkish translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://wecreative.co.id/&#34;&gt;Jovan Ferryal E. F.&lt;/a&gt; for the Indonesian translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/AlesJiranek&#34;&gt;Aleš Jiránek&lt;/a&gt; for the Czech translation&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/Sirius207&#34;&gt;Po Chun, Lu&lt;/a&gt; for the traditional Chinese translation&lt;/li&gt;
&lt;li&gt;Potentially you…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your native language isn&amp;rsquo;t supported — your merge request will be appreciated. All user suggestions, bug reports, and feature requests are more than welcome. Hit me up on &lt;a href=&#34;https://twitter.com/pawelgrzybek&#34;&gt;Twitter&lt;/a&gt; or open an issue on &lt;a href=&#34;https://github.com/pawelgrzybek/PinBuddy&#34;&gt;PinBuddy GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/pinbuddy/ppokjacfheflhaojmndcblibahmopkfl&#34;&gt;Download PinBuddy from Chrome Web Store&lt;/a&gt; today and let me know what you think. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 September</title>
      <link>https://pawelgrzybek.com/top-picks-2018-september/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-september/</guid>
      <description>&lt;h2 id=&#34;react-fire-modernizing-react-domhttpsgithubcomfacebookreactissues13525&#34;&gt;&lt;a href=&#34;https://github.com/facebook/react/issues/13525&#34;&gt;React Fire: Modernizing React DOM&lt;/a&gt; &lt;a href=&#34;#react-fire-modernizing-react-domhttpsgithubcomfacebookreactissues13525&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/dan_abramov&#34;&gt;Dan Abramov&lt;/a&gt; shared future plans for modernizing React DOM called &amp;ldquo;React Fire&amp;rdquo;. Some of the major changes are: mirror the browser behavior of input&amp;rsquo;s &lt;code&gt;value&lt;/code&gt; attribute, attaching events on a React root component instead of &lt;code&gt;document&lt;/code&gt;, migration from &lt;code&gt;onChange&lt;/code&gt; to &lt;code&gt;onInput&lt;/code&gt;, events system simplification, &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;className&lt;/code&gt; and more. Unfortunately these innovations will introduce some breaking changes therefore we should expect them in next major release. Following the trend of other modern UI libraries, we say &amp;ldquo;goodbye&amp;rdquo; to Internet Explorer 11 support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;React Fire is an effort to modernize React DOM. Our goal is to make React better aligned with how the DOM works, revisit some controversial past decisions that led to problems, and make React smaller and faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;practical-css-scroll-snappinghttpscss-trickscompractical-css-scroll-snapping&#34;&gt;&lt;a href=&#34;https://css-tricks.com/practical-css-scroll-snapping/&#34;&gt;Practical CSS Scroll Snapping&lt;/a&gt; &lt;a href=&#34;#practical-css-scroll-snappinghttpscss-trickscompractical-css-scroll-snapping&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my opinion hiding content from user is an anti-pattern but is is unavoidable on some projects so Front End developers came out with multiple solutions over the years. Carousels is one of the solutions that is one of the most frequently used choices — I even built &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;quite popular one&lt;/a&gt;. It is an anti-pattern — don&amp;rsquo;t use it! There is a better way now — native and 100% CSS. This article is one of the best resources out there.&lt;/p&gt;
&lt;h2 id=&#34;github-pull-requests-in-visual-studio-codehttpscodevisualstudiocomblogs20180910introducing-github-pullrequests&#34;&gt;&lt;a href=&#34;https://code.visualstudio.com/blogs/2018/09/10/introducing-github-pullrequests&#34;&gt;GitHub Pull Requests in Visual Studio Code&lt;/a&gt; &lt;a href=&#34;#github-pull-requests-in-visual-studio-codehttpscodevisualstudiocomblogs20180910introducing-github-pullrequests&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since now on you can manage GitHub PRs straight from my favorite code editor. VS Code is getting better and better — shame that I mainly deal with GitLab nowadays because I wish to use this feature more often than I can.&lt;/p&gt;
&lt;h2 id=&#34;the-ultimate-guide-to-proper-use-of-animation-in-uxhttpsuxdesignccthe-ultimate-guide-to-proper-use-of-animation-in-ux-10bd98614fa9&#34;&gt;&lt;a href=&#34;https://uxdesign.cc/the-ultimate-guide-to-proper-use-of-animation-in-ux-10bd98614fa9&#34;&gt;The ultimate guide to proper use of animation in UX&lt;/a&gt; &lt;a href=&#34;#the-ultimate-guide-to-proper-use-of-animation-in-uxhttpsuxdesignccthe-ultimate-guide-to-proper-use-of-animation-in-ux-10bd98614fa9&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/skytskyi&#34;&gt;Taras Skytskyi&lt;/a&gt; published this outstanding guide to 101 of good animation principals in UX. There is a tiny animation attached to each of the sections and comparison between commonly used mistakes and good, recommended solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What did you learn today?</title>
      <link>https://pawelgrzybek.com/what-did-you-learn-today/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/what-did-you-learn-today/</guid>
      <description>&lt;p&gt;Since I joined &lt;a href=&#34;https://mindera.com&#34;&gt;Mindera&lt;/a&gt; a few months ago I&amp;rsquo;ve cultivated a daily habit that I randomly initiated on one of my first days within my new workplace. At some point in the day I&amp;rsquo;ll ask my team members…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What did you learn today?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whenever you&amp;rsquo;re put on the spot with a question like this your first initial answer is probably &amp;ldquo;er, nothing&amp;rdquo;. Then you do a quick scan of all the challenges that came up during the day and you realise that…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I learned about the CSS &lt;code&gt;cursor&lt;/code&gt; property.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I read &lt;a href=&#34;https://twitter.com/thekitze/status/1029369487685021696&#34;&gt;this tweet&lt;/a&gt; that shows how to print something to the console without converting the body of an arrow function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I learnt about the difference between &lt;code&gt;encodeURI()&lt;/code&gt; and &lt;code&gt;encodeURIComponent&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We, as software developers, are extremely privileged to work in an industry where people share knowledge willingly. Blog posts, YouTube tutorials, conference talks… Embrace this state of affairs with your colleagues and you will be surprised how many new things you can learn just by cultivating a similar habit within your organisation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 August</title>
      <link>https://pawelgrzybek.com/top-picks-2018-august/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-august/</guid>
      <description>&lt;h2 id=&#34;your-skip-links-are-brokenhttpsaxesslabcomskip-links&#34;&gt;&lt;a href=&#34;https://axesslab.com/skip-links/&#34;&gt;Your skip links are broken&lt;/a&gt; &lt;a href=&#34;#your-skip-links-are-brokenhttpsaxesslabcomskip-links&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/hampelusken&#34;&gt;Hampus Sethfors&lt;/a&gt; published a really great post about &amp;ldquo;Skip links&amp;rdquo; that we all tend to implement on out web projects as an accessibility feature. Turns out that they don&amp;rsquo;t work well on mobile devices. There is a &lt;a href=&#34;https://axesslab.com/skip-links#update-a-better-solution&#34;&gt;temporary solution&lt;/a&gt; suggested by &lt;a href=&#34;https://twitter.com/pauljadam&#34;&gt;Paul J. Adam&lt;/a&gt; but it should be fixed by browser developers eventually.&lt;/p&gt;
&lt;h2 id=&#34;css-grid-layout-visual-cheatsheethttpgridmalvenco&#34;&gt;&lt;a href=&#34;http://grid.malven.co/&#34;&gt;CSS Grid Layout Visual Cheatsheet&lt;/a&gt; &lt;a href=&#34;#css-grid-layout-visual-cheatsheethttpgridmalvenco&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is my new favorite CSS Grid cheat sheet. Thanks &lt;a href=&#34;https://twitter.com/cmalven/&#34;&gt;Chris Malven&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;blink-lazyloadhttpsdocsgooglecomdocumentd1e8zbvyuwgikqmvjma3kkudg8uuklrrdanstqkuoivhgeditheadinghfuqo94v1qejx&#34;&gt;&lt;a href=&#34;https://docs.google.com/document/d/1e8ZbVyUwgIkQMvJma3kKUDg8UUkLRRdANStqKuOIvHg/edit#heading=h.fuqo94v1qejx&#34;&gt;Blink LazyLoad&lt;/a&gt; &lt;a href=&#34;#blink-lazyloadhttpsdocsgooglecomdocumentd1e8zbvyuwgikqmvjma3kkudg8uuklrrdanstqkuoivhgeditheadinghfuqo94v1qejx&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is amazing to see that Google Chrome team is actively working on native image / frame lazy loading. It will make such a big impact on web performance! I can&amp;rsquo;t wait for some info from other vendors.&lt;/p&gt;
&lt;h2 id=&#34;thisjavascript-state-of-mobilehttpsyoutube6-cvhh4ombg&#34;&gt;&lt;a href=&#34;https://youtu.be/6-CVhH4oMbg&#34;&gt;This.Javascript: State of Mobile&lt;/a&gt; &lt;a href=&#34;#thisjavascript-state-of-mobilehttpsyoutube6-cvhh4ombg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Can&amp;rsquo;t recommend enough to every front-end developer focused on mobile platforms this 90 minutes session about the state of mobile platforms. Platforms discussed are: PWAs (Aditya Punjani), React Native (Parashuram), Ionic (Mike Hartington), Nativescript (Jen Looper) and Cordova (Jesse MacFayden). The current state and future of all of platforms listed above in one video.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/6-CVhH4oMbg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;babel-7-releasedhttpsbabeljsioblog20180827700&#34;&gt;&lt;a href=&#34;https://babeljs.io/blog/2018/08/27/7.0.0&#34;&gt;Babel 7 Released&lt;/a&gt; &lt;a href=&#34;#babel-7-releasedhttpsbabeljsioblog20180827700&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Babel — one of the fundamental tools in JavaScript ecosystem just dropped a seventh version. The detailed list of breaking changes can be found on &lt;a href=&#34;https://babeljs.io/blog/2018/08/27/7.0.0#major-breaking-changes&#34;&gt;an official website&lt;/a&gt; but to quickly give you an overview: drop support for old versions of Node (0.10, 0.12, 4, 5), using &lt;code&gt;@babel&lt;/code&gt; namespace, remove presets and stages packages, rename official &lt;code&gt;transform&lt;/code&gt;s to &lt;code&gt;preset&lt;/code&gt;s. The migration process is well detailed on &lt;a href=&#34;http://babeljs.io/docs/en/next/v7-migration&#34;&gt;migration guide&lt;/a&gt; — thanks to &lt;a href=&#34;https://babeljs.io/blog/2018/08/27/7.0.0#babel-upgrade&#34;&gt;babel-upgrade&lt;/a&gt; which makes it a breeze. The &lt;code&gt;babel.config.js&lt;/code&gt; configuration file adds one more setup option to well-known &lt;code&gt;.babelrc&lt;/code&gt; file and object in &lt;code&gt;package.json&lt;/code&gt; file. Selective configuration allows us to have a separated setup for client, server and tests. The most exciting for me is &lt;a href=&#34;https://babeljs.io/blog/2018/08/27/7.0.0#typescript-support-babel-preset-typescript&#34;&gt;TypeScript support&lt;/a&gt;! React developers will benefit from JSX Fragment support (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;). Of course Babel has its own song now too - &lt;a href=&#34;https://youtu.be/40abpedBKK8&#34;&gt;Hallelujah—In Praise of Babel&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;on-switching-from-hex--rgb-to-hslhttpswwwsarasoueidancombloghex-rgb-to-hsl&#34;&gt;&lt;a href=&#34;https://www.sarasoueidan.com/blog/hex-rgb-to-hsl/&#34;&gt;On Switching from HEX &amp;amp; RGB to HSL&lt;/a&gt; &lt;a href=&#34;#on-switching-from-hex--rgb-to-hslhttpswwwsarasoueidancombloghex-rgb-to-hsl&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sara Soueidan on switching from HEX and RGB values to HSL color format across the whole stylesheet. The color system explainer, list of advantages and process of implementation. Great article Sara, as always.&lt;/p&gt;
&lt;h2 id=&#34;affinity-publisherhttpsaffinityserifcomen-gbpublisher&#34;&gt;&lt;a href=&#34;https://affinity.serif.com/en-gb/publisher/&#34;&gt;Affinity Publisher&lt;/a&gt; &lt;a href=&#34;#affinity-publisherhttpsaffinityserifcomen-gbpublisher&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Serif, the company behind all the Affinity products doesn&amp;rsquo;t slow down. I use Affinity Photo and Designer on daily basis and now Affinity Publisher joined the collection of my favorite creative apps. It is an alternative to Adobe InDesign. Currently in beta — stable version to come later on this year. To get you running in no time, have a look at the &lt;a href=&#34;https://affinity.serif.com/en-gb/tutorials/publisher/desktop/&#34;&gt;set of tutorials for the new Affinity app&lt;/a&gt; created by the Serif team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semantic Versioning (SemVer) explained</title>
      <link>https://pawelgrzybek.com/semantic-versioning-semver-explained/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/semantic-versioning-semver-explained/</guid>
      <description>&lt;p&gt;Software nowadays is rarely built independently without the help of external packages, plugins or frameworks. It normally comes with a bunch of dependencies developed by other developers and we need a way to track the versions of them. Following a meaningful convention helps to track software progress and avoid API collisions. Adopted by multiple ecosystems and software architectures &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning (commonly called SemVer)&lt;/a&gt; helps with this.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;major.minor.patch&lt;/code&gt; notation comes with a ton of information about the software. Let me guide you through the individual components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;major&lt;/code&gt; - introduces non-backward-compatible changes to the API&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minor&lt;/code&gt; - introduces backward-compatible changes to the API&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mpatch&lt;/code&gt; - introduces bug fixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Versioning starts at &lt;code&gt;0.1.0&lt;/code&gt; — unfortunately, however, package creators don&amp;rsquo;t always follow this guideline. Everything lower than &lt;code&gt;1.0.0&lt;/code&gt; indicates the software is in its development phase. Version &lt;code&gt;1.0.0&lt;/code&gt; is the one that is ready to share with other developers — this rule is not always followed by the end user though.&lt;/p&gt;
&lt;h2 id=&#34;version-ranges&#34;&gt;Version ranges &lt;a href=&#34;#version-ranges&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inspired by &lt;a href=&#34;https://bundler.io/&#34;&gt;Bundler&lt;/a&gt; (the package manager used by Ruby developers) ranges are commonly used to represent a version scope. Have you ever seen &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;gt;=&lt;/code&gt; in the version descriptor? This is exactly what I am talking about. For instance &lt;code&gt;&amp;gt;=1.3.3 &amp;lt;=2.4.7&lt;/code&gt; matches anything from (and including) &lt;code&gt;1.3.3&lt;/code&gt; all the way up to (and including) &lt;code&gt;2.4.7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a few range descriptors introduced by the node ecosystem that aren&amp;rsquo;t that self explanatory. Have you ever seen &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt; in front of a dependency version? Let me help you to embrace these symbols.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; - update to the latest version (including major)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; - update to the latest minor release&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt; - update to the latest patch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s use the current React 16.4.2 as an example.&lt;/p&gt;
&lt;h3 id=&#34;the--range-specifier&#34;&gt;The * range specifier &lt;a href=&#34;#the--range-specifier&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Personally I wouldn&amp;rsquo;t recommend using &lt;code&gt;*&lt;/code&gt; in your client-facing software - ever. It may cause unpredictable consequences if the API changes drastically. In this case it means the dependency should always update to the latest stable version.&lt;/p&gt;
&lt;h3 id=&#34;the-caret--range-specifier&#34;&gt;The caret ^ range specifier &lt;a href=&#34;#the-caret--range-specifier&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^16.4.0&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This notation accepts all versions that span &lt;code&gt;&amp;gt;=16.4.0 &amp;lt;17.0.0&lt;/code&gt;. The equivalent notation would be &lt;code&gt;16&lt;/code&gt; and &lt;code&gt;16.x&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-tilde--range-specifier&#34;&gt;The tilde ~ range specifier &lt;a href=&#34;#the-tilde--range-specifier&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;~16.4.0&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This notation accepts all versions that span &lt;code&gt;&amp;gt;=16.4.0 &amp;lt;16.5.0&lt;/code&gt;. The equivalent notation would be &lt;code&gt;16.4&lt;/code&gt; and &lt;code&gt;16.4.x&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;do-your-versioning-right&#34;&gt;Do your versioning right &lt;a href=&#34;#do-your-versioning-right&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully this short article helped you to understand semantic versioning from both the user and the developer perspective. There is no point in messing around with these core principles as it may come back to bite you or the creators of your favourite software. Just do it right. Until the next one, peace!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capture One Pro — the best parts</title>
      <link>https://pawelgrzybek.com/capture-one-pro-the-best-parts/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/capture-one-pro-the-best-parts/</guid>
      <description>&lt;p&gt;From Monday to Friday I am a Senior Front-end Developer at &lt;a href=&#34;https://mindera.com/&#34;&gt;Mindera&lt;/a&gt; but come the weekend, I turn into a hobbyist photographer. After shooting analog using a Hasselblad 500C/M for years I recently became the happy owner of a &lt;a href=&#34;https://www.sony.co.uk/electronics/interchangeable-lens-cameras/ilce-7rm3&#34;&gt;Sony α7R III&lt;/a&gt;. As far as shooting goes on an advanced camera like this it is pure pleasure. To take a good picture you need to have a good eye — this applies to both analog and digital worlds. The differences start after pressing the shutter button when instead of going to the darkroom, everything goes to software.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-08-06-1.jpg&#34;
  alt=&#34;RAW image processors&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;456&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Having had some minor experience with Adobe Camera RAW many years ago, it was a fascinating moment when I had to embrace the world of digital photography in 2018. There are tons of software applications available on the market: &lt;a href=&#34;https://www.adobe.com/uk/products/photoshop-lightroom.html&#34;&gt;Adobe Lightroom&lt;/a&gt;, &lt;a href=&#34;https://www.dxo.com/us/photography/photo-software/dxo-photolab&#34;&gt;DxO PhotoLab&lt;/a&gt; or &lt;a href=&#34;https://skylum.com/luminar&#34;&gt;Luminar&lt;/a&gt; to name a few big players. All of them are superb but there is always something that I dislike about each one: the pricing model, the performance, a missing feature, lack of camera support etc. There is one that does everything right though.&lt;/p&gt;
&lt;h2 id=&#34;capture-one-pro-by-phase-one&#34;&gt;Capture One Pro by Phase One &lt;a href=&#34;#capture-one-pro-by-phase-one&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.phaseone.com/en/Products/Software/Capture-One-Pro/Highlights.aspx&#34;&gt;Capture One&lt;/a&gt; is designed by the Copenhagen (Denmark) based team of people from Phase One — the field leader when it comes to medium format digital photography systems. Years of creating the best photography hardware gave this bunch of people the foundation on which to extend their prowess by offering a piece of powerful and precise software. Let me share with you a few reasons why I decided to invest my time and money in their product.&lt;/p&gt;
&lt;h3 id=&#34;price&#34;&gt;Price &lt;a href=&#34;#price&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.phaseone.com/en/Products/Software/Capture-One-Pro/Sony-Pro.aspx&#34;&gt;Capture One Express&lt;/a&gt; is the free version of the software for Sony camera owners. For the majority of users it will be more than enough but to get access to the more powerful features I upgraded to &lt;a href=&#34;https://www.phaseone.com/en/Products/Software/Capture-One-Pro/Features.aspx&#34;&gt;version Pro&lt;/a&gt;. There are multiple options in terms of pricing — I ended up buying the full license for Sony cameras for only £89. Unfortunately this attractive price applies only to the version for Sony cameras. Another good reason to go with mirrorless Sony? Hahaha!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-08-06-2.jpg&#34;
  alt=&#34;Capture One pricing model&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1220&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;learning-resources&#34;&gt;Learning resources &lt;a href=&#34;#learning-resources&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A piece of software with this level of complexity always presents a learning curve — Capture One Pro is no different. &lt;a href=&#34;https://learn.phaseone.com/&#34;&gt;Learning hub&lt;/a&gt; contains a comprehensive list of learning resources for beginners, intermediate and advanced users. The method of app exploration that I like the most are the &lt;a href=&#34;https://www.youtube.com/playlist?list=PLBZS3EGK3tQ9eNptYkVQlh9hTZ6d-rNOU&#34;&gt;webinars hosted by David Grover&lt;/a&gt;. These lengthy screencasts are just the perfect combination of comprehensive explainers and practical implementation.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-08-06-3.jpg&#34;
  alt=&#34;Capture One learning resources&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;881&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sessions&#34;&gt;Sessions &lt;a href=&#34;#sessions&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having disorganised files all over the place is not the best way to keep your collection neat. Having them all in one single catalogue (Lightroom style) doesn&amp;rsquo;t suit my workflow either. I just want to have a separate event or trip in an encapsulated folder. The new way of organising files announced in Capture One 10 called &amp;ldquo;Sessions&amp;rdquo; is exactly what I&amp;rsquo;m after. With this workflow, every single session becomes well structured and portable in a folder that contains all of my images and adjustments. It perfectly fits into &lt;a href=&#34;https://pawelgrzybek.com/my-amazon-s3-photo-backup-solution/&#34;&gt;my Amazon S3 photo backup solution&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/NdsMo0mKgy4&#34;&gt;There is a webinar&lt;/a&gt; that thoroughly explains the use case for sessions.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-08-06-4.jpg&#34;
  alt=&#34;Sessions in Capture One Pro&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;856&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;customisation&#34;&gt;Customisation &lt;a href=&#34;#customisation&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Despite the user interface looking a little bit outdated at first glance, this is probably the most customisable piece of software on my hard drive. You can truly make it yours. The default layout puts everything in a well-thought-out order that works well for me. Following the tabs from left to right, from import to export you have access to hundreds of little adjustments. A little bit of practice and a few keyboard shortcuts built into your muscle memory lets you forget about the tool and stay focused on what matters — the photography.&lt;/p&gt;
&lt;h3 id=&#34;performance&#34;&gt;Performance &lt;a href=&#34;#performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am not running the most expensive, latest iMac Pro with a superb powerful GPU and gazillions of RAM. I am on a three year old MacBook Pro 15 with 16GB of RAM and Intel Iris Pro 1536MB and this application flies! It requires a few seconds of indexing on the initial setup but then my workflow is buttery smooth. I was pretty happy with the performance of version 10, but this is significantly improved in the latest release.&lt;/p&gt;
&lt;h3 id=&#34;process-recipes&#34;&gt;Process recipes &lt;a href=&#34;#process-recipes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One for print, another version for my website and of course one to land on Instagram. Literally three clicks! Process recipes are very customisable, easy to use, intuitive to create and ready to exchange between devices. Literally no other app does it right — Capture One nailed it.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-08-06-5.jpg&#34;
  alt=&#34;Process recipes in Capture One Pro&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;856&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;layers&#34;&gt;Layers &lt;a href=&#34;#layers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can add up to 16 layers, control their opacity and add literally everything on them (apart from black &amp;amp; white adjustments and spot removal). The concept of layers is nothing new in graphic design software, but it opens a new level of flexibility in the world of RAW processors. Find out more about &lt;a href=&#34;https://youtu.be/2WHpVfgC5Qc&#34;&gt;working with layers&lt;/a&gt; in this webinar.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-08-06-6.jpg&#34;
  alt=&#34;Layers panel in Capture One Pro&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;856&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;advanced-color-editor--skin-tone&#34;&gt;Advanced Color Editor &amp;amp; Skin Tone &lt;a href=&#34;#advanced-color-editor--skin-tone&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The simplicity of using the advanced color editor and skin tone tool in Capture One Pro makes these two features amongst my favourite parts of this software. To achieve similar results in a tool like Photoshop, you need to have lots of color theory knowledge and probably be crazy good at math. Find out more about this in another great webinar by David — &lt;a href=&#34;https://youtu.be/ZlBLEXe4rPA&#34;&gt;The Color Editor Master Class&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;give-it-a-go&#34;&gt;Give it a go! &lt;a href=&#34;#give-it-a-go&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is more to it, but I&amp;rsquo;ve tried hard to pick my favourite parts of the app without making this article miles long. I cannot wait for new releases and new feature announcements. I would like to have a tiny UI update to make it look a bit more like 2018. The history panel (in the style of Luminar 2018) would be a nice feature to have. Also I would like to see a more intuitive way to preview before and after changes (I know about clicking the reset button and holding the option key, but a dedicated button would be very appreciated).&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t a sponsored post whatsoever and I don&amp;rsquo;t work for Capture One (but I would love to though!). I just really love this software and I wanted to share with you my experience with it. I am very curious about your opinions, favourite parts, and other software that you use. Let me know in the comments section below. For now, keep taking new photos and see you soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 July</title>
      <link>https://pawelgrzybek.com/top-picks-2018-july/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-july/</guid>
      <description>&lt;h2 id=&#34;npm-joins-ecma-international-and-tc39httpsblognpmjsorgpost175722319045npm-joins-ecma-international-and-tc39&#34;&gt;&lt;a href=&#34;https://blog.npmjs.org/post/175722319045/npm-joins-ecma-international-and-tc39&#34;&gt;npm Joins ECMA International and TC39&lt;/a&gt; &lt;a href=&#34;#npm-joins-ecma-international-and-tc39httpsblognpmjsorgpost175722319045npm-joins-ecma-international-and-tc39&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is kind of a big thing, although the post doesn&amp;rsquo;t explain what kind of benefits we should expect as a community of developers. Subject worth to follow though.&lt;/p&gt;
&lt;h2 id=&#34;affinity-designer-for-ipadhttpsaffinityserifcomen-gbdesigneripad&#34;&gt;&lt;a href=&#34;https://affinity.serif.com/en-gb/designer/ipad/&#34;&gt;Affinity Designer for iPad&lt;/a&gt; &lt;a href=&#34;#affinity-designer-for-ipadhttpsaffinityserifcomen-gbdesigneripad&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Have you ever used Affinity Photo or Affinity Designer? I love both of these apps and I use them on a daily basis. They are my main reason &lt;a href=&#34;https://pawelgrzybek.com/i-wont-miss-you-adobe/&#34;&gt;why I don&amp;rsquo;t miss Adobe products&lt;/a&gt;. Released last year version of Affinity Photo for iPad is absolutely amazing, and I can&amp;rsquo;t be more excited that Affinity Designer finally landed on Apple&amp;rsquo;s tablet too! This is not everything that guys from Serif announced — desktop version of &lt;a href=&#34;https://affinity.serif.com/en-gb/publisher/&#34;&gt;Affinity Publisher is coming&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/279398709&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id=&#34;moment---pro-camerahttpswwwshopmomentcommoment-pro-camera-app&#34;&gt;&lt;a href=&#34;https://www.shopmoment.com/moment-pro-camera-app&#34;&gt;Moment - Pro Camera&lt;/a&gt; &lt;a href=&#34;#moment---pro-camerahttpswwwshopmomentcommoment-pro-camera-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From Monday to Friday I am a full time Software Developer for &lt;a href=&#34;mindera.com&#34;&gt;Mindera&lt;/a&gt; but on Saturday and Sunday I enjoy myself taking photos and spinning funky records. Photography has always been my big interest and it is probably the most enjoyable part of my life apart from programming. I normally don&amp;rsquo;t use my mobile to take pictures but if I am going to do so I am going to use Moment since now on. This app is slick, gives a full control over all the settings that I have access to on my professional camera.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ubD-COXouXQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;accessibility-for-teamshttpsaccessibilitydigitalgov&#34;&gt;&lt;a href=&#34;https://accessibility.digital.gov/&#34;&gt;Accessibility for Teams&lt;/a&gt; &lt;a href=&#34;#accessibility-for-teamshttpsaccessibilitydigitalgov&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An official website of the United States government created something outstanding for accessibility focused teams. Based on a job-role involved in creating a digital product, it presents a list of core principles to follow that helps to build accessible to everyone project. It is very comprehensive, all in one place and easy to follow.&lt;/p&gt;
&lt;h2 id=&#34;cssconf-eu-2018--philip-walton-container-querieshttpsyoutube0wa4cmo9_eu&#34;&gt;&lt;a href=&#34;https://youtu.be/0wA4CMo9_EU&#34;&gt;CSSconf EU 2018 | Philip Walton: Container Queries&lt;/a&gt; &lt;a href=&#34;#cssconf-eu-2018--philip-walton-container-querieshttpsyoutube0wa4cmo9_eu&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/philwalton&#34;&gt;Philip Walton&lt;/a&gt; from Google team explains the challenge of CSS Container Queries implementation. As an alternative Phil present a well-supported solution using one of my favorite APIs — Resize Observer. If you have never heard about it, go and check &lt;a href=&#34;https://pawelgrzybek.com/the-resize-observer-explained/&#34;&gt;my article&lt;/a&gt; that walks through the basics of it and shows a practical example. The talk is well summarized and left with few solid predictions.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/0wA4CMo9_EU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;thisjavascript-state-of-browsershttpsyoutube67etfbktofa&#34;&gt;&lt;a href=&#34;https://youtu.be/67etFbKTOFA&#34;&gt;This.Javascript: State of Browsers&lt;/a&gt; &lt;a href=&#34;#thisjavascript-state-of-browsershttpsyoutube67etfbktofa&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every three months This Dot hosts a session where representatives of all major technologies elaborate about current state and the future of their products. This time it is all about the browser. Entire screencast is very interesting but if you don&amp;rsquo;t have a time to watch it all, I have few takeaways for you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variables fonts are ready&lt;/li&gt;
&lt;li&gt;service workers are ready&lt;/li&gt;
&lt;li&gt;webP is gaining support across more vendors&lt;/li&gt;
&lt;li&gt;CSS shapes is something worth to follow&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/67etFbKTOFA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;the-frustrations-of-using-css-shapes-and-css-exclusionshttpsbenfraincomthe-frustrations-of-using-css-shapes-and-css-exclusions&#34;&gt;&lt;a href=&#34;https://benfrain.com/the-frustrations-of-using-css-shapes-and-css-exclusions/&#34;&gt;The frustrations of using CSS Shapes and CSS Exclusions&lt;/a&gt; &lt;a href=&#34;#the-frustrations-of-using-css-shapes-and-css-exclusionshttpsbenfraincomthe-frustrations-of-using-css-shapes-and-css-exclusions&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following the subject of CSS Shapes, &lt;a href=&#34;http://twitter.com/benfrain&#34;&gt;Ben Frain&lt;/a&gt; elaborates about the initial frustrations of working with this feature. Worth to be aware of these lacking features and quirks.&lt;/p&gt;
&lt;h2 id=&#34;announcing-typescript-30httpsblogsmsdnmicrosoftcomtypescript20180730announcing-typescript-3-0&#34;&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/typescript/2018/07/30/announcing-typescript-3-0/&#34;&gt;Announcing TypeScript 3.0&lt;/a&gt; &lt;a href=&#34;#announcing-typescript-30httpsblogsmsdnmicrosoftcomtypescript20180730announcing-typescript-3-0&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Long time awaited major update of TypeScript is here. Support for &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, generators, object rest/spread, build modes, better JSX support, &lt;code&gt;unknown&lt;/code&gt; type and more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homebrew — the best friend of the macOS user</title>
      <link>https://pawelgrzybek.com/homebrew-the-best-friend-of-the-macos-user/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/homebrew-the-best-friend-of-the-macos-user/</guid>
      <description>&lt;p&gt;So you are planning on learning something new — &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; for example — and you need to download it first. You visit the project&amp;rsquo;s website, download an installer, go through the installation process. Next, next, next, done. You may need some kind of database at some point — &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; works really well with it. Again — visit the project&amp;rsquo;s website, download an installer… You know what?! &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; is hot. Again — visit the project&amp;rsquo;s website, download an installer…&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-07-05-1.jpg&#34;
  alt=&#34;Search, install, remove macOS apps via Homebrew&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;927&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;As a curious human being you are probably going to do a lot of these monotonous tasks: installing and removing software, switching versions of dependencies, searching and trying new tools. There must be a better way than doing all these things manually! Good news — there is. &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, the missing package manager for macOS.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install node mongodb &amp;amp;&amp;amp; brew cask install visual-studio-code
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;package-managers&#34;&gt;Package managers &lt;a href=&#34;#package-managers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The concept of using command line tools to manage packages isn&amp;rsquo;t new. &lt;code&gt;apt-get&lt;/code&gt; from Ubuntu systems is probably the most widely used one. &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt; and &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; are the equivalents for Windows users. As a macOS user &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; is the one that I will guide you through, but I am sure that you can follow along and find the equivalent commands for your operating system of choice.&lt;/p&gt;
&lt;p&gt;Programming languages have their own ecosystems and their own package managers to manage project components. For example, &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; and &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; are commonly used by JavaScript developers, &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; makes the life of PHP developers much easier and &lt;a href=&#34;https://pypi.org/project/pip/&#34;&gt;Pip&lt;/a&gt; is the best friend of Python developers. This &lt;a href=&#34;https://news.ycombinator.com/item?id=12187888&#34;&gt;&amp;ldquo;Comparison of Programming Language Package Managers&amp;rdquo;&lt;/a&gt; HN thread is the place to go to find out more about them.&lt;/p&gt;
&lt;p&gt;At the end of the day all package managers do the same job — make your life easier and boost your productivity by removing tedious tasks from your workflow.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites &lt;a href=&#34;#prerequisites&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Familiarity with the basics of the command line would be cool. You don&amp;rsquo;t need to be a Terminal ninja with the most complex &lt;code&gt;.vimconfig&lt;/code&gt; file on the whole of GitHub. As long as you know what &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;pwd&lt;/code&gt; are, you are ready to go. If not, go and grab a copy of &lt;a href=&#34;https://remysharp.com/2016/12/09/working-the-command-line&#34;&gt;&amp;ldquo;Working the Command Line&amp;rdquo; by Remy Sharp&lt;/a&gt; and come back later on.&lt;/p&gt;
&lt;h2 id=&#34;brew-and-its-most-popular-commands&#34;&gt;Brew and its most popular commands &lt;a href=&#34;#brew-and-its-most-popular-commands&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew documentation&lt;/a&gt; doesn&amp;rsquo;t do a great job of explaining its capacity to novice users. I resisted using it for years because I didn&amp;rsquo;t understand the geeky terminology. I will do my best to help you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;search for stuff&lt;/li&gt;
&lt;li&gt;install / uninstall stuff&lt;/li&gt;
&lt;li&gt;install / uninstall macOS app&lt;/li&gt;
&lt;li&gt;upgrade package / macOS app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before doing so, we need one thing. We need &lt;code&gt;brew&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;install-brew&#34;&gt;Install Brew &lt;a href=&#34;#install-brew&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I recently joined a &lt;a href=&#34;https://mindera.com/&#34;&gt;new company&lt;/a&gt;, where I got a new MacBook. Intuitively I tried to install &lt;code&gt;brew&lt;/code&gt; via &lt;code&gt;brew&lt;/code&gt; — this is how using it is now melded to my muscle memory. Of course this command didn&amp;rsquo;t work so I had to visit the &lt;a href=&#34;https://brew.sh/#install&#34;&gt;Homebrew installation guide&lt;/a&gt; to copy a one-liner and paste it into my Terminal. I &lt;code&gt;brew&lt;/code&gt;ed the rest afterwards.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;search-for-stuff-via-homebrew&#34;&gt;Search for stuff via Homebrew &lt;a href=&#34;#search-for-stuff-via-homebrew&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can find tons of things on Homebrew! The default &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/tree/master/Formula&#34;&gt;homebrew-core repository&lt;/a&gt; contains thousands of formulas and new ones are added everyday. A formula is just a fancy name for a little Ruby script that contains enough of information to download a package on to your machine. To look for a package of interest you can manually browse the repository (never do it like that), use the &lt;a href=&#34;http://searchbrew.com/&#34;&gt;online Brew Search&lt;/a&gt; or use the command line. &lt;a href=&#34;https://en.wikipedia.org/wiki/Cowsay&#34;&gt;&lt;code&gt;cowsay&lt;/code&gt;&lt;/a&gt; is the most useless piece of software ever — I love it and I will use it as an example.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-07-05-2.jpg&#34;
  alt=&#34;Search packages via Homebrew&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;881&#34;
/&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew search cowsay
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default Homebrew uses a list of formulas included in the &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/tree/master/Formula&#34;&gt;homebrew-core repository&lt;/a&gt;, but you may face a situation when it is not enough. By adding &lt;a href=&#34;https://docs.brew.sh/Taps&#34;&gt;taps (third-party repositories)&lt;/a&gt; you can extend the list of packages available to &lt;code&gt;brew&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;install--uninstall-stuff-via-homebrew&#34;&gt;Install / uninstall stuff via Homebrew &lt;a href=&#34;#install--uninstall-stuff-via-homebrew&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The most frequently used commands are &lt;code&gt;install&lt;/code&gt; and &lt;code&gt;uninstall&lt;/code&gt;. Let&amp;rsquo;s use the &lt;code&gt;cowsay&lt;/code&gt; package as an example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install cowsay
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-07-05-3.jpg&#34;
  alt=&#34;Cowsay in action&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1204&#34;
/&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew uninstall cowsay
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;install--remove-a-macos-app-via-homebrew&#34;&gt;Install / remove a macOS app via Homebrew &lt;a href=&#34;#install--remove-a-macos-app-via-homebrew&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since version 0.9.5 Homebrew comes with something called &lt;code&gt;brew cask&lt;/code&gt;. It allows you to install macOS applications, fonts and drivers. You can browse all the available casks on the &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask/tree/master/Casks&#34;&gt;homebrew-cask repo&lt;/a&gt; or search it via the command line. For example &lt;code&gt;brew search atom&lt;/code&gt;. To install it…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew cask install atom
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-07-05-4.gif&#34;
  alt=&#34;Install Atom via command line&#34;
  loading=&#34;lazy&#34;
  width=&#34;870&#34;
  height=&#34;634&#34;
/&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew cask uninstall atom
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;upgrade-package--macos-app-via-homebrew&#34;&gt;Upgrade package / macOS app via Homebrew &lt;a href=&#34;#upgrade-package--macos-app-via-homebrew&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Of course we want the latest and greatest software on our machines. It couldn&amp;rsquo;t be easier to update our packages — &lt;code&gt;brew upgrade&lt;/code&gt; is all that we need. Similarly to bump the version of our graphical apps we can use &lt;code&gt;brew cask upgrade&lt;/code&gt;. Follow these commands with the name of a formula if you want to update an individual package.&lt;/p&gt;
&lt;p&gt;Please be aware that &lt;code&gt;brew update&lt;/code&gt; is not an alias of &lt;code&gt;brew upgrade&lt;/code&gt; — it fetches the newest formulas from GitHub but doesn&amp;rsquo;t do anything to your brews.&lt;/p&gt;
&lt;h2 id=&#34;brew-everything&#34;&gt;Brew everything &lt;a href=&#34;#brew-everything&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully this article helped you out and demystified the power that Homebrew comes with. I&amp;rsquo;ve helped you to explore some very basic commands, but please don&amp;rsquo;t stop here. Look for some more sophisticated use cases in the &lt;a href=&#34;https://docs.brew.sh/&#34;&gt;official documentation&lt;/a&gt;. I use it extensively in my daily routine but also to install &lt;a href=&#34;https://github.com/pawelgrzybek/dotfiles/blob/master/setup-brew.sh&#34;&gt;my favourite software&lt;/a&gt; every time I jump on a new machine. Thanks for reading and have a great day y&amp;rsquo;all!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 June</title>
      <link>https://pawelgrzybek.com/top-picks-2018-june/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-june/</guid>
      <description>&lt;h2 id=&#34;a-bitter-guide-to-open-sourcehttpsmediumcomken_wheelera-bitter-guide-to-open-source-a8e3b6a3c1c4&#34;&gt;&lt;a href=&#34;https://medium.com/@ken_wheeler/a-bitter-guide-to-open-source-a8e3b6a3c1c4&#34;&gt;A Bitter Guide To Open Source&lt;/a&gt; &lt;a href=&#34;#a-bitter-guide-to-open-sourcehttpsmediumcomken_wheelera-bitter-guide-to-open-source-a8e3b6a3c1c4&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of my favorite open source creators &lt;a href=&#34;https://twitter.com/ken_wheeler&#34;&gt;Ken Wheeler&lt;/a&gt; writing about his experience — the bitter reality of maintaining free projects for the community. A great list of tips for all OSS creators.&lt;/p&gt;
&lt;h2 id=&#34;a-bright-future-for-githubhttpsbloggithubcom2018-06-04-github-microsoft&#34;&gt;&lt;a href=&#34;https://blog.github.com/2018-06-04-github-microsoft/&#34;&gt;A bright future for GitHub&lt;/a&gt; &lt;a href=&#34;#a-bright-future-for-githubhttpsbloggithubcom2018-06-04-github-microsoft&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/defunkt&#34;&gt;Chris Wanstrath&lt;/a&gt; from GitHub team announced the biggest acquisition in a long time. This one is importnt especificaly for developers because today (2018.06.04) GitHub joins Microsoft. I am looking forward what the future of this acquisition will bring to the table. Satya Nadella, Chief Executive Officer at Microsoft reveals more details in his take — &lt;a href=&#34;https://blogs.microsoft.com/blog/2018/06/04/microsoft-github-empowering-developers/&#34;&gt;&amp;ldquo;Microsoft + GitHub = Empowering Developers&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;apple-wwdc-2018httpswwwapplecomapple-eventsjune-2018&#34;&gt;&lt;a href=&#34;https://www.apple.com/apple-events/june-2018/&#34;&gt;Apple WWDC 2018&lt;/a&gt; &lt;a href=&#34;#apple-wwdc-2018httpswwwapplecomapple-eventsjune-2018&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Month ago Google I/O, this month is a time for Apple to introduce some new stuff. This year was all about software with no single upcoming hardware announcement. As expected, versions of all 4 operating systems has been bumped to: iOS 12, macOS 10.14 Mojave, watchOS 5, tv 4K. I am not an Apple TV user and a little ignorant of Apple watch so I wan&amp;rsquo;t touch on these two, but I am more than happy to highlight the things that I am the most excited about in new mobile and desktop operating system.&lt;/p&gt;
&lt;p&gt;MacOS 10.14 Mojave introduces a frequently requested dark mode and it is looking stunning! It is not just a menu bar and a dock — real dark mode of a whole UI. Security and privacy improvements that are coming to Safari are impressive — cookies and fingerprint tracking turned off by default. Redesigned App Store with a video previews — bang on! Continuous camera and and videos option built into screen shot taking app are looking cool. I am curious about all the things under the hood that have not been presented on a conference — normally developers are the most excited about these innovations.&lt;/p&gt;
&lt;p&gt;Mobile system — iOS12 — supports the same models as the previous one but does it twice faster. Improvements in AR functionality are impressive and a new format designed in collaboration with Adobe will change the world of 3D models used in augmented reality. Adobe is just about to drop a support for AMDZ for core Adobe CC tools. Shortcuts — a new app based on well known &lt;a href=&#34;https://workflow.is/&#34;&gt;Workflow&lt;/a&gt; that &lt;a href=&#34;https://techcrunch.com/2017/03/22/apple-has-acquired-workflow-a-powerful-automation-tool-for-ipad-and-iphone/&#34;&gt;Apple acquired last year&lt;/a&gt; — integrates with Siri and allows users to build a complex macros to increase our productivity via single command. Probably the most excited to me: grouped notifications! Do not disturb and notifications are getting more powerful and will get a more precise configuration level. Grouped faceTime — finally!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/UThGcWBIMpU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;designing-web-content-for-watchoshttpsdeveloperapplecomvideosplaywwdc2018239&#34;&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2018/239/&#34;&gt;Designing Web Content for watchOS&lt;/a&gt; &lt;a href=&#34;#designing-web-content-for-watchoshttpsdeveloperapplecomvideosplaywwdc2018239&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As announced on WWDC 2018 — Apple watch joins a family of devices ready to browse a web content. It means that web developers job is getting even more interesting — new breakpoint and devices range to test projects on. This official introduction by Apple is a great staring point.&lt;/p&gt;
&lt;h2 id=&#34;corshttpsfrontendiancocors&#34;&gt;&lt;a href=&#34;https://frontendian.co/cors&#34;&gt;CORS&lt;/a&gt; &lt;a href=&#34;#corshttpsfrontendiancocors&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/andryanmiller&#34;&gt;Ryan Miller&lt;/a&gt; explains CORS (Cross-Origin Resource Sharing). This article makes complex subject easy to understand. There is one more thing that is really cool about this article — design of Ryan&amp;rsquo;s blog is superb! Fantastic typography and subtle decorations.&lt;/p&gt;
&lt;h2 id=&#34;cardshttpsinclusive-componentsdesigncards&#34;&gt;&lt;a href=&#34;https://inclusive-components.design/cards/&#34;&gt;Cards&lt;/a&gt; &lt;a href=&#34;#cardshttpsinclusive-componentsdesigncards&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/heydonworks&#34;&gt;Heydon Pickering&lt;/a&gt; published another post in a series about &lt;a href=&#34;https://inclusive-components.design/&#34;&gt;inclusive components&lt;/a&gt;. This time is about commonly used card component. You would have never thought about the details that Heydon covered in this article. Apart from cards related details there is tons of interesting facts on top it. For example — there is a use case when missing image &lt;code&gt;alt&lt;/code&gt; attribute can be useful! Interesting, isn&amp;rsquo;t it?&lt;/p&gt;
&lt;h2 id=&#34;specificity-in-not-has-and-matcheshttpsmeyerwebcomericthoughts20180605specificity-in-not-has-and-matches&#34;&gt;&lt;a href=&#34;https://meyerweb.com/eric/thoughts/2018/06/05/specificity-in-not-has-and-matches/&#34;&gt;Specificity in :not(), :has(), and :matches()&lt;/a&gt; &lt;a href=&#34;#specificity-in-not-has-and-matcheshttpsmeyerwebcomericthoughts20180605specificity-in-not-has-and-matches&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CSSWG (CSS Working Group) recently decided about the specificity of &lt;code&gt;:not()&lt;/code&gt;, &lt;code&gt;:has()&lt;/code&gt;and &lt;code&gt;:matches()&lt;/code&gt; pseudo selectors. &lt;a href=&#34;https://twitter.com/meyerweb&#34;&gt;Eric A. Meyer&lt;/a&gt; explains all the rules. If you are not sure what a CSS specificity is, the &lt;a href=&#34;https://pawelgrzybek.com/css-specificity-explained/&#34;&gt;&amp;ldquo;CSS specificity explained&amp;rdquo;&lt;/a&gt; that I published 3 years ago should enlighten the term a little bit.&lt;/p&gt;
&lt;h2 id=&#34;css-blocks-with-chris-eppsteinhttpshoptalkshowcomepisodes315-css-blocks-chris-eppstein&#34;&gt;&lt;a href=&#34;http://shoptalkshow.com/episodes/315-css-blocks-chris-eppstein/&#34;&gt;CSS Blocks with Chris Eppstein&lt;/a&gt; &lt;a href=&#34;#css-blocks-with-chris-eppsteinhttpshoptalkshowcomepisodes315-css-blocks-chris-eppstein&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On a &lt;a href=&#34;https://pawelgrzybek.com/top-picks-2018-may/&#34;&gt;&amp;ldquo;Top picks — 2018 May&amp;rdquo;&lt;/a&gt; I featured one resource that I am extremely excited about — CSS Blocks by LinkedIn team. &lt;a href=&#34;https://twitter.com/chriseppstein&#34;&gt;Chris Eppstein&lt;/a&gt; reveals some more interesting details about this project in Shop Talk Show podcast. I am really looking forward to the stable release. Few days later &lt;a href=&#34;https://twitter.com/una&#34;&gt;Una Kravets&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/chrisdhanaraj&#34;&gt;Chris Dhanaraj&lt;/a&gt; from &lt;a href=&#34;https://spec.fm/podcasts/toolsday/155363&#34;&gt;Toolsday Podcast&lt;/a&gt; recorded a shorter version about the same subject with the same guest — &lt;a href=&#34;https://spec.fm/podcasts/toolsday/155363&#34;&gt;&amp;ldquo;CSS Blocks&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;a-cartoon-intro-to-dns-over-httpshttpshacksmozillaorg201805a-cartoon-intro-to-dns-over-https&#34;&gt;&lt;a href=&#34;https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/&#34;&gt;A cartoon intro to DNS over HTTPS&lt;/a&gt; &lt;a href=&#34;#a-cartoon-intro-to-dns-over-httpshttpshacksmozillaorg201805a-cartoon-intro-to-dns-over-https&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/linclark&#34;&gt;Lin Clark&lt;/a&gt; from Mozilla team continues her cartoony series of explainers. This one is about DNS servers and how Firefox is planing to implement secure requests resolvers. It is an amazing guide through the basics of HTTP — highly recommended to all internet users who want to know what is going on under the hood.&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-almighty-reducerhttpscss-trickscomunderstanding-the-almighty-reducer&#34;&gt;&lt;a href=&#34;https://css-tricks.com/understanding-the-almighty-reducer/&#34;&gt;Understanding the Almighty Reducer&lt;/a&gt; &lt;a href=&#34;#understanding-the-almighty-reducerhttpscss-trickscomunderstanding-the-almighty-reducer&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/sarah_edo&#34;&gt;Sarah Drasner&lt;/a&gt; explains a concept of one of the most powerful methods of Array prototype — reduce. I love the way that Sara is using animations to explain the concept. The &lt;code&gt;reduce&lt;/code&gt; is one of the most popular methods in functional programming — I explained more of them few years back in &lt;a href=&#34;https://pawelgrzybek.com/manipulate-javascript-arrays-like-a-boss/&#34;&gt;&amp;ldquo;Manipulate JavaScript Arrays like a boss&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;has-vue-passed-react-yethttpshasvuepassedreactyetsurgesh&#34;&gt;&lt;a href=&#34;https://hasvuepassedreactyet.surge.sh/&#34;&gt;Has Vue passed React yet?&lt;/a&gt; &lt;a href=&#34;#has-vue-passed-react-yethttpshasvuepassedreactyetsurgesh&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; is gaining more and more popularity and this is another proof of it. I know that GitHub stars is a poor measurement unit, but it exposes some level of traction around some software.&lt;/p&gt;
&lt;h2 id=&#34;dont-use-the-placeholder-attributehttpswwwsmashingmagazinecom201806placeholder-attribute&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2018/06/placeholder-attribute/&#34;&gt;Don’t Use The Placeholder Attribute&lt;/a&gt; &lt;a href=&#34;#dont-use-the-placeholder-attributehttpswwwsmashingmagazinecom201806placeholder-attribute&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/ericwbailey&#34;&gt;Eric Bailey&lt;/a&gt; gave a list of solid points why you shouldn&amp;rsquo;t use &lt;code&gt;placeholder&lt;/code&gt; attribute on your website. I have never thought of few of those reasons against it. Holistic view for a little subject — I love this kind of articles.&lt;/p&gt;
&lt;h2 id=&#34;ecmascript-2018-language-specification-httpwwwecma-internationalorgpublicationsstandardsecma-262htm&#34;&gt;&lt;a href=&#34;http://www.ecma-international.org/publications/standards/Ecma-262.htm&#34;&gt;ECMAScript® 2018 Language Specification &lt;/a&gt; &lt;a href=&#34;#ecmascript-2018-language-specification-httpwwwecma-internationalorgpublicationsstandardsecma-262htm&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So it is officially 2018. New ECMAScript documentation has been merged with a ECMA International website. If you want a quick and practical summary of all the new features added to the spec this year, I published an article &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2018/&#34;&gt;&amp;ldquo;What&amp;rsquo;s new in ECMAScript 2018&amp;rdquo;&lt;/a&gt; few months ago.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C&#43;&#43; for JavaScript developers</title>
      <link>https://pawelgrzybek.com/cpp-for-javascript-developers/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/cpp-for-javascript-developers/</guid>
      <description>&lt;p&gt;At the end of 2017 I committed myself to &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2017/#in-2018-i-will&#34;&gt;learning a new programming language as one of my resolutions for 2018&lt;/a&gt;. I&amp;rsquo;ve spent the last few months jumping between client projects written mainly in JavaScript and learning C++ in my own time. I am still nowhere near proficient at it, but it is a great time to share with you a few of my conclusions.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-06-01-1.jpg&#34;
  alt=&#34;Learn new programming language — 2018 resolution&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;new-perspective&#34;&gt;New perspective &lt;a href=&#34;#new-perspective&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript, being a very forgiving language appears to be an attractive choice for new programmers. It works the same on every single browser (I mean the core concepts, not the API implementations so spare your evil comments please) and the same applies to the server world using &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;. To spin a script you don&amp;rsquo;t need much more apart from the application that you already have — a browser. You can use a browser&amp;rsquo;s built-in console, a simple text editor like &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; or full-blown IDE (integrated development environment) like &lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34;&gt;WebStorm&lt;/a&gt; — the tool doesn&amp;rsquo;t matter — the interpreted nature of this language enables you to view feedback at runtime with no required configuration whatsoever.&lt;/p&gt;
&lt;p&gt;C++ on the other hand requires you to do some solid homework before you launch your first line of code. Having a good IDE helps a ton. &lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio&lt;/a&gt; by Microsoft, the superb &lt;a href=&#34;https://www.jetbrains.com/clion/&#34;&gt;CLion&lt;/a&gt; by JetBrains or &lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Xcode&lt;/a&gt; are great choices to consider. The compiled nature of this language will require you to brush up on some basic knowledge about memory allocation and the architecture that you are working on and building for.&lt;/p&gt;
&lt;h2 id=&#34;learning-c-makes-you-a-better-javascript-developer&#34;&gt;Learning C++ makes you a better JavaScript developer &lt;a href=&#34;#learning-c-makes-you-a-better-javascript-developer&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the plethora use cases of &lt;a href=&#34;https://en.wikipedia.org/wiki/Low-level_programming_language&#34;&gt;low-level programming languages&lt;/a&gt; like C++ is building other programming languages. Yes, you guessed it — JavaScript is written in C++. To be precise, the engines that drive the most popular JavaScript engines (&lt;a href=&#34;https://developers.google.com/v8/&#34;&gt;V8&lt;/a&gt; within Google Chrome and Node, &lt;a href=&#34;https://github.com/Microsoft/ChakraCore&#34;&gt;Chakra&lt;/a&gt; for Microsoft and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&#34;&gt;SpiderMonkey&lt;/a&gt; for Mozilla products) are mainly compiled from a C++ code base. &lt;a href=&#34;https://developer.mozilla.org/&#34;&gt;MDN Web Docs&lt;/a&gt; is a fantastic resource and I use it all the time but sometimes it is not enough. I cannot describe how cool it is to read V8&amp;rsquo;s source code and actually understand what is going on.&lt;/p&gt;
&lt;p&gt;Having exposure to a strongly-typed programming language (one that requires data type declaration) and a basic understanding of memory management makes you think about your script in a totally different way. Despite the fact that JavaScript engines are doing tons of optimisations for you, you can avoid performance pitfalls by writing an API that skips unnecessary steps at runtime. &lt;a href=&#34;https://twitter.com/mathias&#34;&gt;Mathias Bynens from V8 team&lt;/a&gt; recently gave a fantastic talk on this subject — &lt;a href=&#34;https://youtu.be/m9cTaYI95Zc&#34;&gt;V8 internals for JavaScript developers&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/m9cTaYI95Zc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;leaving-javascript-fatigue-behind&#34;&gt;Leaving JavaScript fatigue behind &lt;a href=&#34;#leaving-javascript-fatigue-behind&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I bet that a new JavaScript framework will land on GitHub before you reach the end of this article. But I just learnt React. Damn! My &lt;a href=&#34;https://pinboard.in/howto/#saving&#34;&gt;Pinboard reading list&lt;/a&gt; is full of JS related articles, tweets, conference talks and tutorials on YouTube! There is no way that I will keep up with this endless dungeon of JavaScript resources.&lt;/p&gt;
&lt;p&gt;Actually there is a way to get out of JS fatigue! Forget about your current stack and let yourself soak in a new skill (C++ in my case). Don&amp;rsquo;t get me wrong, I still learn new JavaScript stuff on daily basis but only when I really need it. I ignore tweets about new libraries and frameworks, tutorials on Youtube and Medium articles. Ironically — accordingly to section above — doing so makes you a better JavaScript developer anyway.&lt;/p&gt;
&lt;h2 id=&#34;helpful-resources&#34;&gt;Helpful resources &lt;a href=&#34;#helpful-resources&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For me the most efficient way of learning is watching videos with a great balance between theoretical definitions and practical examples. It took me quite a while to find some great resources about C++ and after a few months I&amp;rsquo;m ready to share with you my top ones!&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/playlist?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb&#34;&gt;C++ playlist&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/thecherno&#34;&gt;Yan Chernikov&lt;/a&gt; is one of the best resources that I&amp;rsquo;ve found. It has a good balance between theory and practice, it keeps an optimal pace and is interspersed with a great sense of humour that makes it a perfect stating point for C++ newcomers. The &lt;a href=&#34;https://www.youtube.com/playlist?list=PLGLfVvz_LVvQ9S8YSV0iDsuEU8v11yP9M&#34;&gt;C++ playlist by Derek Banas&lt;/a&gt; is another one that is a little less energetic but filled with great theoretical explanations.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-06-01-2.jpg&#34;
  alt=&#34;C&amp;#43;&amp;#43; Playlists on YouTube&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1066&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Whenever I struggle with a particular subject I dig into &lt;a href=&#34;http://www.stroustrup.com/4th.html&#34;&gt;The C++ Programming Language (4th Edition) by Bjarne Stroustrup&lt;/a&gt;. This publication is written in an academic manner by the author of the C++ language. Reading verbose tomes like this one is not my preferred way of learning, but it is worth keeping on the shelf.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-06-01-3.jpg&#34;
  alt=&#34;Programming Principles and Practice Using C&amp;#43;&amp;#43;&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;934&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;more-more-more&#34;&gt;More, more, more… &lt;a href=&#34;#more-more-more&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am certain that between purely frontend oriented articles you will find some low-level related content on this website soon. I highly encourage you to learn a new programming language — I found the experience really exciting. If you have some similar experiences, please share your journey in the comment section below. Do you know any resources that can help me on my journey? Please share it by all means. Thanks a lot for reading and keep on hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 May</title>
      <link>https://pawelgrzybek.com/top-picks-2018-may/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-may/</guid>
      <description>&lt;h2 id=&#34;bigint-arbitrary-precision-integers-in-javascripthttpsdevelopersgooglecomwebupdates201805bigintutm_sourcefeedutm_mediumfeedutm_campaignupdates_feed&#34;&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2018/05/bigint?utm_source=feed&amp;amp;utm_medium=feed&amp;amp;utm_campaign=updates_feed&#34;&gt;BigInt: arbitrary-precision integers in JavaScript&lt;/a&gt; &lt;a href=&#34;#bigint-arbitrary-precision-integers-in-javascripthttpsdevelopersgooglecomwebupdates201805bigintutm_sourcefeedutm_mediumfeedutm_campaignupdates_feed&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mathias Bynens from V8 team explained a new primitive in JavaScript — &lt;code&gt;BigInt&lt;/code&gt;. Like a &lt;code&gt;Number&lt;/code&gt; but with a arbitrary precision — it means that it can hold a number as big as our architecture can deal with. Really great article that explains the difference between regular &lt;code&gt;Number&lt;/code&gt; type, shows differences in API and goes through some possible gotchas.&lt;/p&gt;
&lt;h2 id=&#34;custom-domains-on-github-pages-gain-support-for-httpshttpsbloggithubcom2018-05-01-github-pages-custom-domains-https&#34;&gt;&lt;a href=&#34;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&#34;&gt;Custom domains on GitHub Pages gain support for HTTPS&lt;/a&gt; &lt;a href=&#34;#custom-domains-on-github-pages-gain-support-for-httpshttpsbloggithubcom2018-05-01-github-pages-custom-domains-https&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitHub Pages now makes generating SSL certificate via &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt; a breeze. You can use it with your custom domain or with auto generated one &lt;code&gt;*.github.io&lt;/code&gt;. CDN that sits on top of that makes a golden duo of Github Pages and Cloudflare not a necessity anymore.&lt;/p&gt;
&lt;h2 id=&#34;css-at-scale-linkedins-new-open-source-projects-take-on-stylesheet-performancehttpsengineeringlinkedincomblog201804css-at-scale--linkedins-new-open-source-projects-take-on-stylesh&#34;&gt;&lt;a href=&#34;https://engineering.linkedin.com/blog/2018/04/css-at-scale--linkedins-new-open-source-projects-take-on-stylesh&#34;&gt;CSS at Scale: LinkedIn’s New Open Source Projects Take on Stylesheet Performance&lt;/a&gt; &lt;a href=&#34;#css-at-scale-linkedins-new-open-source-projects-take-on-stylesheet-performancehttpsengineeringlinkedincomblog201804css-at-scale--linkedins-new-open-source-projects-take-on-stylesh&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Team of LinkedIn engineers just announced two new tools for CSS authoring: &lt;a href=&#34;https://github.com/linkedin/css-blocks&#34;&gt;CSS Blocks&lt;/a&gt; and &lt;a href=&#34;https://github.com/linkedin/opticss&#34;&gt;OptiCSS&lt;/a&gt;. The result is fantastic — the team managed to trim down overall size of stylesheet from 330kb to less than 9kb. Impressive result and I am very interested about the future of those tools. Currently they are both previews — stable version to be released later on this year.&lt;/p&gt;
&lt;h2 id=&#34;expanding-multi-user-access-on-dashcloudflarecomhttpsblogcloudflarecomexpanding-multi-user-access&#34;&gt;&lt;a href=&#34;https://blog.cloudflare.com/expanding-multi-user-access/&#34;&gt;Expanding Multi-User Access on dash.cloudflare.com&lt;/a&gt; &lt;a href=&#34;#expanding-multi-user-access-on-dashcloudflarecomhttpsblogcloudflarecomexpanding-multi-user-access&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Multiple users under a single Cloudflare account finally arrived. It is just a beginning of a big rebuild and first steps in a migration from Backbone to React. Keep on doing amazing things Cloudflare!&lt;/p&gt;
&lt;h2 id=&#34;build-the-future-of-the-web-with-modern-javascript-google-io-18httpsyoutubemiwcloftfrw&#34;&gt;&lt;a href=&#34;https://youtu.be/mIWCLOftfRw&#34;&gt;Build the future of the web with modern JavaScript (Google I/O ’18)&lt;/a&gt; &lt;a href=&#34;#build-the-future-of-the-web-with-modern-javascript-google-io-18httpsyoutubemiwcloftfrw&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google I/O is one of the most important events for web professionals — no doubt. This year was no different and I highly encourage you to check &lt;a href=&#34;https://www.youtube.com/playlist?list=PLNYkxOF6rcIC4NQeXpdAy0RbOACI66Hvf&#34;&gt;the playlist on Youtube&lt;/a&gt; and catch up all the talks that you consider relevant. If you don&amp;rsquo;t have a time and you can spare only a moment — I made your life easier. &lt;a href=&#34;https://twitter.com/gsathya&#34;&gt;Sathya Gunasekaran&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/mathias&#34;&gt;Mathias Bynens&lt;/a&gt; in the span of 39 minutes give you a shortcut of all new features that recently has been added to V8 (JavaScript engine that works behind the Google Chrome and Node). Quick, snappy, on point comprehensive list of features that will become your daily routine at some point an a short future.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/mIWCLOftfRw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;prisma-raises-45m-to-build-the-graphql-data-layer-for-all-databaseshttpswwwprismaioblogprisma-raises-4-5m-to-build-the-graphql-data-layer-for-all-databases-663484df0f60&#34;&gt;&lt;a href=&#34;https://www.prisma.io/blog/prisma-raises-4-5m-to-build-the-graphql-data-layer-for-all-databases-663484df0f60/&#34;&gt;Prisma raises $4.5M to build the GraphQL data layer for all databases&lt;/a&gt; &lt;a href=&#34;#prisma-raises-45m-to-build-the-graphql-data-layer-for-all-databaseshttpswwwprismaioblogprisma-raises-4-5m-to-build-the-graphql-data-layer-for-all-databases-663484df0f60&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Designed by Facebook GraphQL in rapid pace replaces other standards for building APIs, allowing developers for requesting only what is needed by simple to understand queries. Prisma is an abstraction layer that sits on top of your current database and allows you to work with it using GraphQL schema. At the moment it works with MySQL only, but recent announcement promises to create a layer that work with all popular database types. This is a really big news for all modern front end and back end developers. Can&amp;rsquo;t wait to see the result of this investment.&lt;/p&gt;
&lt;h2 id=&#34;javascript-symbols-iterators-generators-asyncawait-and-async-iteratorsall-explained-simplyhttpsmediumfreecodecamporgsome-of-javascripts-most-useful-features-can-be-tricky-let-me-explain-them-4003d7bbed32&#34;&gt;&lt;a href=&#34;https://medium.freecodecamp.org/some-of-javascripts-most-useful-features-can-be-tricky-let-me-explain-them-4003d7bbed32&#34;&gt;JavaScript Symbols, Iterators, Generators, Async/Await, and Async Iterators — All Explained Simply&lt;/a&gt; &lt;a href=&#34;#javascript-symbols-iterators-generators-asyncawait-and-async-iteratorsall-explained-simplyhttpsmediumfreecodecamporgsome-of-javascripts-most-useful-features-can-be-tricky-let-me-explain-them-4003d7bbed32&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/rajaraodv&#34;&gt;Raja Rao DV&lt;/a&gt; did a fantastic job by explaining complicated and confusing concepts in very simple and practical way. If you know about ECMAScript &lt;code&gt;Symbol()&lt;/code&gt; but you cannot find a practical use case for it, if you don&amp;rsquo;t know how to create a custom iterators or generators and mix them with the power of &lt;code&gt;async&lt;/code&gt; &amp;amp; &lt;code&gt;await&lt;/code&gt; — this article is for you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thanks for everything Engine Creative! Hi Mindera!</title>
      <link>https://pawelgrzybek.com/thanks-for-everything-engine-creative-hi-mindera/</link>
      <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/thanks-for-everything-engine-creative-hi-mindera/</guid>
      <description>&lt;p&gt;Two years ago I was really lucky that I joined the team at &lt;a href=&#34;https://www.enginecreative.co.uk/&#34;&gt;Engine Creative&lt;/a&gt;. They are a bunch of creative, smart and inspiring people motivated to deliver top quality work to an endless list of clients. During my time at Engine Creative I had the pleasure of working on multiple projects that nearly melted my brain, whilst exploring a hell of a lot of bleeding edge technologies. I would like to thank everyone there for my time working with you and wish you all the best in the future!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-05-21-1.jpg&#34;
  alt=&#34;Engine Creative team&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;788&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Time moves on, my perception about life has taken shape and my list of priorities have changed order. The amount of time, passion and dedication that I put into software development drove me to a change bigger than I expected. I would like to proudly announce that…&lt;/p&gt;
&lt;h2 id=&#34;im-joining-mindera&#34;&gt;I&amp;rsquo;m joining Mindera &lt;a href=&#34;#im-joining-mindera&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Founded in 2014 &lt;a href=&#34;https://mindera.com/&#34;&gt;Mindera&lt;/a&gt; is a Porto (Portugal) based company that has expanded and opened offices in Leicester (UK), Chennai (India) and San Diego (US). They say &amp;ldquo;hello&amp;rdquo;, they talk to each other, they smile, &lt;a href=&#34;http://tinyurl.com/zc599tr&#34;&gt;they take naps&lt;/a&gt;. Am I not a perfect fit?&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-05-21-2.jpg&#34;
  alt=&#34;Mindera promise&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;705&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;I am really excited about becoming a part of this enormously talented team and looking forward to building the world&amp;rsquo;s best piece of software!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 April</title>
      <link>https://pawelgrzybek.com/top-picks-2018-april/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-april/</guid>
      <description>&lt;h2 id=&#34;1111https1111&#34;&gt;&lt;a href=&#34;https://1.1.1.1/&#34;&gt;1.1.1.1&lt;/a&gt; &lt;a href=&#34;#1111https1111&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cloudflare and APNIC joined their powers and as a result of this partnership 1.1.1.1 came out. Secure, privacy focused and the fastest ever DNS directory. It takes no time to set it up on your device and you don&amp;rsquo;t have an excuse not to do so. You can find out more details about it on official blogs of both companies: &lt;a href=&#34;https://blog.cloudflare.com/announcing-1111/&#34;&gt;&amp;ldquo;Announcing 1.1.1.1: the fastest, privacy-first consumer DNS service&amp;rdquo;&lt;/a&gt; and &lt;a href=&#34;https://labs.apnic.net/?p=1127&#34;&gt;&amp;ldquo;APNIC Labs enters into a Research Agreement with Cloudflare&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;w-descriptors-and-sizes-under-the-hoodhttpsbetaobservablehqcomeeepsw-descriptors-and-sizes-under-the-hood&#34;&gt;&lt;a href=&#34;https://beta.observablehq.com/@eeeps/w-descriptors-and-sizes-under-the-hood&#34;&gt;w descriptors and sizes: Under the hood&lt;/a&gt; &lt;a href=&#34;#w-descriptors-and-sizes-under-the-hoodhttpsbetaobservablehqcomeeepsw-descriptors-and-sizes-under-the-hood&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Eric Portis from Cloudinary elaborated about a &lt;code&gt;w&lt;/code&gt; descriptor from &lt;code&gt;srcset&lt;/code&gt; attribute used in markup for HTML responsive images. It is such and &lt;a href=&#34;https://beta.observablehq.com/&#34;&gt;Observable&lt;/a&gt; makes it really helpful to understand its complexity. I can&amp;rsquo;t think of a better guy to explain this concept than someone from Cloudinary team.&lt;/p&gt;
&lt;h2 id=&#34;introducing-tensorflowjs-machine-learning-in-javascripthttpsmediumcomtensorflowintroducing-tensorflow-js-machine-learning-in-javascript-bf3eab376db&#34;&gt;&lt;a href=&#34;https://medium.com/tensorflow/introducing-tensorflow-js-machine-learning-in-javascript-bf3eab376db&#34;&gt;Introducing TensorFlow.js: Machine Learning in Javascript&lt;/a&gt; &lt;a href=&#34;#introducing-tensorflowjs-machine-learning-in-javascripthttpsmediumcomtensorflowintroducing-tensorflow-js-machine-learning-in-javascript-bf3eab376db&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TensorFlow — probably the most popular open-source machine learning framework just released a JavaScript implementation. This is the best option for client side developers to start a journey with ML (machine learning). Medium article is a great explainer, presents some demos and code examples.&lt;/p&gt;
&lt;h2 id=&#34;how-browsers-position-floatshttpsfloat-layoutglitchme&#34;&gt;&lt;a href=&#34;https://float-layout.glitch.me/&#34;&gt;How browsers position floats&lt;/a&gt; &lt;a href=&#34;#how-browsers-position-floatshttpsfloat-layoutglitchme&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CSS &lt;code&gt;float&lt;/code&gt; property has always been a tricky one to grasp by newcomers. Luckily flexbox and grid are great solutions for things that we always tried to solve by floating elements. For curious ones, this visual demo created by smart Google developers explains the concept very well.&lt;/p&gt;
&lt;h2 id=&#34;node-v1000-currenthttpsnodejsorgenblogreleasev1000&#34;&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v10.0.0/&#34;&gt;Node v10.0.0 (Current)&lt;/a&gt; &lt;a href=&#34;#node-v1000-currenthttpsnodejsorgenblogreleasev1000&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Node version 10 released with tons of changes and improvements. Full support for N-API, tons of API changes and few deprecations.&lt;/p&gt;
&lt;h2 id=&#34;announcing-npm6httpsmediumcomnpm-incannouncing-npm-6-5d0b1799a905&#34;&gt;&lt;a href=&#34;https://medium.com/npm-inc/announcing-npm-6-5d0b1799a905&#34;&gt;Announcing npm@6&lt;/a&gt; &lt;a href=&#34;#announcing-npm6httpsmediumcomnpm-incannouncing-npm-6-5d0b1799a905&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the release of Node 10 new version on Node Package Manager has been released too. It comes with massive security and performance improvements, some new audit related commands and more. I have a good practical news as well — no more &lt;code&gt;rm -rf node_modules &amp;amp;&amp;amp; npm i&lt;/code&gt; — &lt;a href=&#34;https://docs.npmjs.com/cli/ci&#34;&gt;&lt;code&gt;npm ci&lt;/code&gt;&lt;/a&gt; does exactly that but much faster.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;tower-in-public-beta-heres-whats-newhttpswwwgit-towercomblogtower-public-beta-2018-whats-new&#34;&gt;&lt;a href=&#34;https://www.git-tower.com/blog/tower-public-beta-2018-whats-new&#34;&gt;Tower in Public Beta: Here&amp;rsquo;s What&amp;rsquo;s New!&lt;/a&gt; &lt;a href=&#34;#tower-in-public-beta-heres-whats-newhttpswwwgit-towercomblogtower-public-beta-2018-whats-new&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tower, the best git GUI ever, shares whats new in new version of an app. Pull requests support, new rebase functionality, &amp;ldquo;Quick Actions&amp;rdquo;, navigation improvements, better search functionality, history and blame view, detailed commit view and more. Can&amp;rsquo;t wait!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure a local WordPress development on macOS from scratch</title>
      <link>https://pawelgrzybek.com/configure-a-local-wordpress-development-on-macos-from-scratch/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/configure-a-local-wordpress-development-on-macos-from-scratch/</guid>
      <description>&lt;p&gt;So you are a &lt;a href=&#34;https://www.apple.com/uk/macos/&#34;&gt;macOS&lt;/a&gt; user and you want to configure a local environment to build a &lt;a href=&#34;https://wordpress.org/&#34;&gt;WordPress&lt;/a&gt; project. Great choice, it is a fantastic piece of software! There are plenty of tools that let you set it up in no time at no cost — &lt;a href=&#34;https://www.mamp.info/&#34;&gt;MAMP&lt;/a&gt; / &lt;a href=&#34;https://www.apachefriends.org/&#34;&gt;XAMPP&lt;/a&gt; and &lt;a href=&#34;https://local.getflywheel.com/&#34;&gt;Local by FlyWheel&lt;/a&gt; are probably the best choices for beginners. Smashing Magazine published an article called &lt;a href=&#34;https://www.smashingmagazine.com/2018/04/wordpress-local-development-beginners-setup-deployment/&#34;&gt;&amp;ldquo;WordPress Local Development For Beginners: From Setup To Deployment&amp;rdquo; by Nick Schäferhoff&lt;/a&gt; which is a great guide that takes you through the journey when using these kinds of tools. There is one disadvantage though — applications like these hide lots of important details from the user and come pre-bundled with lots of stuff that you just don&amp;rsquo;t need to run a WordPress website.&lt;/p&gt;
&lt;p&gt;My approach is a little bit more complicated but gives you enough knowledge about the environment to walk away confidently. An &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTP server&lt;/a&gt;, &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL database&lt;/a&gt; and &lt;a href=&#34;http://php.net/&#34;&gt;PHP programming language&lt;/a&gt; is all that we need and, believe it or not, your Apple computer comes with the majority of these elements baked in.&lt;/p&gt;
&lt;h2 id=&#34;configure-an-apache-http-server-and-enable-php&#34;&gt;Configure an Apache HTTP server and enable PHP &lt;a href=&#34;#configure-an-apache-http-server-and-enable-php&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Apache HTTP Server and PHP language are already on your machine. You can confirm they are installed by checking the current version for each of them in the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apachectl -v
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;php -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before we run the server we need to make a tiny adjustment in its configuration file. To do so, feel free to use your favourite text editor such as &lt;code&gt;nano&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;subl&lt;/code&gt; or my beloved &lt;code&gt;code&lt;/code&gt;. Superuser privileges (&lt;code&gt;sudo&lt;/code&gt;) will be needed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/apache2/httpd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-04-29-1.jpg&#34;
  alt=&#34;Apache httpd configuration file&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;973&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;This is the main Apache configuration file that contains tons of helpful comments about all the available directives. We need to proceed with a few tweaks here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enable vhost&lt;/li&gt;
&lt;li&gt;Enable rewrites&lt;/li&gt;
&lt;li&gt;Enable PHP&lt;/li&gt;
&lt;li&gt;Change the default location for our projects&lt;/li&gt;
&lt;li&gt;Enable .htaccess&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;enable-vhost-virtual-host&#34;&gt;Enable vhost (Virtual Host) &lt;a href=&#34;#enable-vhost-virtual-host&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a chance that you are going to work on multiple WordPress projects in the future and it would be cool to access them via custom domains (i.e. &lt;code&gt;somewebsite.localhost&lt;/code&gt; or &lt;code&gt;anotherone.localhost&lt;/code&gt;). &lt;a href=&#34;https://httpd.apache.org/docs/2.4/vhosts/&#34;&gt;Virtual Host&lt;/a&gt; is a term that describes exactly this functionality. To enable it uncomment &lt;code&gt;LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so&lt;/code&gt; and &lt;code&gt;Include /private/etc/apache2/extra/httpd-vhosts.conf&lt;/code&gt; inside your Apache configuration file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;old: #LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so
new: LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;old: #Include /private/etc/apache2/extra/httpd-vhosts.conf
new: Include /private/etc/apache2/extra/httpd-vhosts.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;enable-rewrites&#34;&gt;Enable rewrites &lt;a href=&#34;#enable-rewrites&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default &lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&#34;&gt;mod_rewrite&lt;/a&gt; follows the filesystem path. For example the URL to a page about your company may end up being &lt;code&gt;mycompany.com/about.php&lt;/code&gt;. In the case of WordPress we will more likely see something like &lt;code&gt;mycompany.com/?p=1&lt;/code&gt;. Wouldn&amp;rsquo;t it be cool to simplify it to &lt;code&gt;mycompany.com/about&lt;/code&gt;? This is the reason why we need to explicitly enable it. Uncomment &lt;code&gt;LoadModule rewrite_module libexec/apache2/mod_rewrite.so&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;old: #LoadModule rewrite_module libexec/apache2/mod_rewrite.so
new: LoadModule rewrite_module libexec/apache2/mod_rewrite.so
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;enable-php&#34;&gt;Enable PHP &lt;a href=&#34;#enable-php&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WordPress is written in PHP. That being so our server surely needs to know how to deal with &lt;code&gt;.php&lt;/code&gt; files. It is as easy as uncommenting &lt;code&gt;LoadModule php7_module libexec/apache2/libphp7.so&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;old: #LoadModule php7_module libexec/apache2/libphp7.so
new: LoadModule php7_module libexec/apache2/libphp7.so
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;change-the-default-location-for-our-projects&#34;&gt;Change the default location for our projects &lt;a href=&#34;#change-the-default-location-for-our-projects&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Personally I store the source files to all websites that I am working on inside a &lt;code&gt;Sites&lt;/code&gt; folder in my home directory. It is not a requirement, just a convention. The default root directory for the Apache server is &lt;code&gt;/Library/WebServer/Documents&lt;/code&gt;. We have to amend this path. Please, be sure to change the name of your username folder — the chances that your directory is called &lt;code&gt;pawelgrzybek&lt;/code&gt; are slim!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;old: DocumentRoot &amp;quot;/Library/WebServer/Documents&amp;quot;
old: &amp;lt;Directory &amp;quot;/Library/WebServer/Documents&amp;quot;&amp;gt;
new: DocumentRoot &amp;quot;/Users/pawelgrzybek/Sites/&amp;quot;
new: &amp;lt;Directory &amp;quot;/Users/pawelgrzybek/Sites/&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;enable-htaccess&#34;&gt;Enable .htaccess &lt;a href=&#34;#enable-htaccess&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To easily change the server configuration on a per-directory basis, Apache uses &lt;a href=&#34;https://httpd.apache.org/docs/2.4/howto/htaccess.html&#34;&gt;&lt;code&gt;.htaccess&lt;/code&gt; files&lt;/a&gt;. The &lt;code&gt;AllowOverride controls&lt;/code&gt; section of the configuration file allows us to enable the use of .htaccess files. Edit the value of &lt;code&gt;AllowOverride&lt;/code&gt; from &lt;code&gt;None&lt;/code&gt; to &lt;code&gt;All&lt;/code&gt;. We are done here!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;old: AllowOverride None
new: AllowOverride All
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;manage-local-domains-using-vhost&#34;&gt;Manage local domains using vhost &lt;a href=&#34;#manage-local-domains-using-vhost&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do you remember vhost (Virtual Host) that we enabled second ago? We have to configure that in a way that our &lt;code&gt;localhost&lt;/code&gt; serves files from &lt;code&gt;~/Sites&lt;/code&gt; and &lt;code&gt;wp.localhost&lt;/code&gt; from &lt;code&gt;~/Sites/wp.localhost&lt;/code&gt;. We need to add a custom configuration to its configuration file that is located under &lt;code&gt;/etc/apache2/extra/httpd-vhosts.conf&lt;/code&gt;. Open this file via the text editor of your choice.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/apache2/extra/httpd-vhosts.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This file comes with some example configuration that we don&amp;rsquo;t need. Feel free to comment it out or delete it. Add a configuration blocks that look like this (make sure that you have amended the paths accordingly to your username and domain):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-apache&#34; data-lang=&#34;apache&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;*:80&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;DocumentRoot&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/Users/pawelgrzybek/Sites&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;ServerName&lt;/span&gt; localhost
    &lt;span class=&#34;nb&#34;&gt;ErrorLog&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/log/apache2/localhost-error_log&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;*:80&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;DocumentRoot&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/Users/pawelgrzybek/Sites/wp.localhost&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;ServerName&lt;/span&gt; wp.localhost
    &lt;span class=&#34;nb&#34;&gt;ErrorLog&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/log/apache2/wp.localhost-error_log&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;DocumentRoot&lt;/code&gt; tells Apache which directory the domain specified under the &lt;code&gt;ServerName&lt;/code&gt; should be pointing to. The &lt;code&gt;ErrorLog&lt;/code&gt; enables any error log files for this website (this may be helpful for debugging in the future). If you need to set up extra domains, simply duplicate one of those blocks and amend domain and path accordingly.&lt;/p&gt;
&lt;h2 id=&#34;start-stop-restart-and-test-apache-server-config&#34;&gt;Start, stop, restart and test apache server config &lt;a href=&#34;#start-stop-restart-and-test-apache-server-config&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know it is a little bit daunting but I promise that we&amp;rsquo;ll never come back to this nasty lengthy configuration file again. Four simple commands are everything that we need to remember from now on. Start, stop, restart and configuration test.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apachectl start
sudo apachectl stop
sudo apachectl restart
sudo apachectl configtest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hopefully the commands are self-explanatory. Please bare in mind that every single change of the Apache configuration files require rebooting of the server. A good practice is to run a sanity check beforehand by executing &lt;code&gt;sudo apachectl configtest&lt;/code&gt;. If you get &lt;code&gt;Syntax OK&lt;/code&gt; feel free to run the server using &lt;code&gt;sudo apachectl start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Test time! Now let&amp;rsquo;s create a test &lt;code&gt;index.php&lt;/code&gt; file in the &lt;code&gt;~/Sites&lt;/code&gt; as we specified in vhost config file. Put a &lt;code&gt;&amp;lt;?php phpinfo();&lt;/code&gt; in there please. If you followed my previous instructions carefully, this is what you should see under &lt;a href=&#34;http://localhost/&#34;&gt;http://localhost/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-04-29-2.jpg&#34;
  alt=&#34;PHP info page on Apache on macOS&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1022&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;point-localhost-domains-to-127001&#34;&gt;Point localhost domains to 127.0.0.1 &lt;a href=&#34;#point-localhost-domains-to-127001&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every time when you visit a website your browser asks a DNS server for the IP address to redirect the request to. DNS server is like a massive phone book that maps domain names to IP numbers.&lt;/p&gt;
&lt;p&gt;My convention is to use &lt;code&gt;.localhost&lt;/code&gt; as a domain suffix for locally stored websites. We don&amp;rsquo;t want those domains to go to the DNS Server to ask for an IP number because we already know it – it is the IP of our own computer — &lt;code&gt;127.0.0.1&lt;/code&gt; (&amp;ldquo;localhost&amp;rdquo; in other words). A &lt;code&gt;hosts&lt;/code&gt; file helps us with it — you can think of it as a local DNS directory. Add &lt;code&gt;127.0.0.1 *.localhost&lt;/code&gt; to this file — it is located under &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-04-29-3.jpg&#34;
  alt=&#34;Add local domains to hosts file on macOS&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;973&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;mysql-to-store-data-sequel-pro-to-manage-it&#34;&gt;MySQL to store data, Sequel Pro to manage it &lt;a href=&#34;#mysql-to-store-data-sequel-pro-to-manage-it&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WordPress&amp;rsquo; mission is to edit and serve content stored in a database which is the last missing piece of our setup. In order to download the database software and a great GUI (graphical user interface) for it, we are going to use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew — the missing package manager for macOS&lt;/a&gt;. If you are not a Homebrew user, please follow the installation steps from the website and take my word that it is going to make your life much easier in the future. I published &lt;a href=&#34;https://pawelgrzybek.com/homebrew-the-best-friend-of-the-macos-user/&#34;&gt;&amp;ldquo;Homebrew — the best friend of the macOS user&amp;rdquo;&lt;/a&gt; where I elaborate more about benefits of using it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;brew cask install sequel-pro
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;MySQL has been installed and &lt;code&gt;root&lt;/code&gt; user with blank password has been added. Since version 8 it uses a different method of password encoding. To make our life easier we should change this encoding for our pre-created user. Log into MySQL shell using &lt;code&gt;mysql -u root&lt;/code&gt;, change a password encoding using &lt;code&gt;ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;&#39;;&lt;/code&gt; and exit shell using &lt;code&gt;exit;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-04-29-4.jpg&#34;
  alt=&#34;MySQL shell change root user password to mysql_native_password&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1559&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Now you have everything that you need. Run a &lt;code&gt;mysql.server start&lt;/code&gt; command to initialise a MySQL daemon and launch Sequel Pro app to create the first database that we are going to use on our website later on. On the initial screen use a descriptive name for your connection, &lt;code&gt;127.0.0.1&lt;/code&gt; as a host, &lt;code&gt;root&lt;/code&gt; as a username, keep the password blank and hit the &amp;ldquo;Connect&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-04-29-5.jpg&#34;
  alt=&#34;Configure a connection to local database via Sequel Pro&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1096&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Are you in? From the dropdown in the top-left corner pick &amp;ldquo;Add database…&amp;rdquo;, give it a meaningful name (I always follow the convention: &lt;code&gt;localhost_nameofawebsite&lt;/code&gt;), confirm and you are done.&lt;/p&gt;
&lt;h2 id=&#34;build-a-wordpress-website-via-wp-cli&#34;&gt;Build a WordPress website via WP-CLI &lt;a href=&#34;#build-a-wordpress-website-via-wp-cli&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are working a lot with WordPress but you don&amp;rsquo;t use the &lt;a href=&#34;https://wp-cli.org/&#34;&gt;Command line interface for WordPress&lt;/a&gt; you need to re-evaluate your workflow. Seriously! There is no other way to save yourself more time than this. If you don&amp;rsquo;t have it yet, install it via &lt;code&gt;brew&lt;/code&gt; (I told you second ago that the Homebrew is amazing).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install wp-cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Time to build out a new website! Let&amp;rsquo;s call it &lt;code&gt;wp.localhost&lt;/code&gt;. It was common practice to use &lt;code&gt;.dev&lt;/code&gt; as a development domain but a few browser vendors made this a little bit more complicated by requiring an SSL certificate for all &lt;code&gt;.dev&lt;/code&gt; domains. To avoid the additional steps required to configure it, change your habits and use &lt;code&gt;.local&lt;/code&gt;, &lt;code&gt;.test&lt;/code&gt; or &lt;code&gt;.localhost&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/Sites/wp.localhost &amp;amp;&amp;amp; cd ~/Sites/wp.localhost
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;wp core download
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;wp config create --dbname=NAME_OF_YOUR_DATABASE --dbuser=root --dbpass= --dbhost=127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These few lines create a folder &lt;code&gt;wp.localhost&lt;/code&gt; inside a &lt;code&gt;Sites&lt;/code&gt; directory, download all the WordPress core files into it, creates a &lt;code&gt;wp-config.php&lt;/code&gt; file and fills all the necessary details for you. Nice, isn&amp;rsquo;t it? Time to check if everything is working as expected.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-04-29-6.jpg&#34;
  alt=&#34;WordPress website running locally&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;985&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;helpful-tip&#34;&gt;Helpful tip &lt;a href=&#34;#helpful-tip&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a front end developer, the majority of the time I use some node-based servers for my local environment. I rarely build WordPress projects so there is no need for me to keep Apache and MySQL always running in a background. I created two quick bash aliases that enable / disable those tools for me in a blink of an eye. If you like my approach, add it to your &lt;code&gt;.bash_profile&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# start / stop Apache &amp;amp; MySQL&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; am-start&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sudo apachectl start &amp;amp;&amp;amp; mysql.server start&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; am-stop&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sudo apachectl stop &amp;amp;&amp;amp; mysql.server stop&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enjoy-wordpressing&#34;&gt;Enjoy WordPressing &lt;a href=&#34;#enjoy-wordpressing&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Voilà! We ended up with a robust local environment for your WordPress development. You can easily run other frameworks like &lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel&lt;/a&gt; on this setup with ease. I hope that you found this article helpful.&lt;/p&gt;
&lt;p&gt;I almost forgot! Thanks a ton for proofreading to &lt;a href=&#34;https://twitter.com/krzeminskinet&#34;&gt;Marcin Krzemiński&lt;/a&gt; who gave me lots of great advices how to make this article better. I highly advice this dude for any WordPress related stuff — he knows his craft!&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Jekyll to Hugo! From GitHub Pages to Netlify!</title>
      <link>https://pawelgrzybek.com/from-jekyll-to-hugo-from-github-pages-to-netlify/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/from-jekyll-to-hugo-from-github-pages-to-netlify/</guid>
      <description>&lt;p&gt;After a few years of blogging using &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, my website became slow and I stopped enjoying working on fresh content. The effortless integration of this static site generator with &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; was the only reason why I kept this setup for so long. A smart quote always looks good on a geeky article, so let me smash one by Benjamin Franklin.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;When you are finished changing, you&amp;rsquo;re finished.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;from-jekyll-to-hugo&#34;&gt;From Jekyll to Hugo &lt;a href=&#34;#from-jekyll-to-hugo&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll is a great tool and its integration with free GitHub hosting makes it a great pairing to host a tiny website like this one. I elaborate on this setup in a post from three years ago: &lt;a href=&#34;https://pawelgrzybek.com/jekyll-blog-on-github-pages-supercharged-by-cloudflare/&#34;&gt;&amp;ldquo;Jekyll blog on Github Pages supercharged by CloudFlare&amp;rdquo;&lt;/a&gt;. This website has grown up since then and the Ruby based engine started showing up some performance issues. &lt;a href=&#34;https://jekyllrb.com/docs/configuration/#incremental-regeneration&#34;&gt;Enabling incremental regeneration&lt;/a&gt; via the &lt;code&gt;--incremental&lt;/code&gt; flag didn&amp;rsquo;t give my project enough of a boost. The moment for change had arrived.&lt;/p&gt;
&lt;p&gt;Looking for a Jekyll replacement didn&amp;rsquo;t take me long despite the fact that the &lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;list of static site generators is enormous&lt;/a&gt;. Performance, great documentation and simplicity is all I need — &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; seemed to be a perfect candidate. It is written entirely in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; which has been made famous by its concurrency (processing of multiple tasks simultaneously). &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Setting up your first project&lt;/a&gt; takes no time at all and &lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;the fantastic documentation&lt;/a&gt; makes adding custom functionality on top of it a breeze. I am not the only one who thinks that Hugo is fab! &lt;a href=&#34;https://www.smashingmagazine.com/&#34;&gt;Smashing Magazine&lt;/a&gt;, &lt;a href=&#34;https://support.1password.com/&#34;&gt;1Password&lt;/a&gt; and &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt; are also big fans just to name a few.&lt;/p&gt;
&lt;p&gt;As a result of this transition I have a smooth workflow, instant builds and most importantly I really enjoy blogging again. The compilation time hasn&amp;rsquo;t been reduced from minutes to seconds, but to milliseconds. To rebuild over a hundred articles on this page Hugo doesn&amp;rsquo;t choke at all — 200ms is all it needs. Thank you &lt;a href=&#34;https://twitter.com/bepsays&#34;&gt;Bjørn Erik Pedersen&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/spf13&#34;&gt;Steve Francia&lt;/a&gt; and rest of the team for building this tool!&lt;/p&gt;
&lt;h2 id=&#34;from-github-pages-to-netlify&#34;&gt;From GitHub Pages to Netlify &lt;a href=&#34;#from-github-pages-to-netlify&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitHub Pages served me well for years and the continuous integration with Jekyll projects allowed me to forget about things like hosting. Migrating from Jekyll to Hugo forced me to do some research. Although &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;Hugo can be easily hosted on GitHub Pages&lt;/a&gt;, I recently heard a lot of good things about &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://shoptalkshow.com/episodes/303-jam-stack-phil-hawksworth/&#34;&gt;JAM Stack with Phil Hawksworth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spec.fm/podcasts/toolsday/120903&#34;&gt;Learning About Netlify w/ Phil Hawksworth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have never used Netlify and you think that your hosting solution is simple, you&amp;rsquo;re living a lie my friend. It has a drag and drop interface, an amazing CLI (command line interface), continuous integration with GitHub projects, custom domain management, HTTPS certificates provided by Let’s Encrypt, HTTP 2.0 and tons of other cool features in the free tier. The documentation is superb and full of screenshots, video explainers and code snippets.&lt;/p&gt;
&lt;p&gt;The website that you are reading now has been published via a simple &lt;code&gt;git push&lt;/code&gt;, built on a Netlify server and deployed to a powerful content delivery network. Could it be easier?&lt;/p&gt;
&lt;h2 id=&#34;so-happy&#34;&gt;So happy! &lt;a href=&#34;#so-happy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I swear, neither Hugo&amp;rsquo;s creators or the Netlify team paid me to throw so many compliments their way. The &lt;a href=&#34;https://github.com/pawelgrzybek/pawelgrzybek.com&#34;&gt;source code for this website&lt;/a&gt; is available on my GitHub account. Got questions? As always I am more than happy to help. Until next time people 🤪&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 March</title>
      <link>https://pawelgrzybek.com/top-picks-2018-march/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-march/</guid>
      <description>&lt;h2 id=&#34;prototyping-libraries-on-sketch-cloud-and-an-official-ios-ui-kit-in-sketch-49httpsblogsketchappcomprototyping-libraries-on-sketch-cloud-and-an-official-ios-ui-kit-in-sketch-49-bf090c70796c&#34;&gt;&lt;a href=&#34;https://blog.sketchapp.com/prototyping-libraries-on-sketch-cloud-and-an-official-ios-ui-kit-in-sketch-49-bf090c70796c&#34;&gt;Prototyping, Libraries on Sketch Cloud and an official iOS UI kit in Sketch 49&lt;/a&gt; &lt;a href=&#34;#prototyping-libraries-on-sketch-cloud-and-an-official-ios-ui-kit-in-sketch-49httpsblogsketchappcomprototyping-libraries-on-sketch-cloud-and-an-official-ios-ui-kit-in-sketch-49-bf090c70796c&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are plenty of tools that try to compete with Sketch but we all know that the winner is only one and the latest update just proves my point. Prototyping — an essential feature to help UX designer to sell their ideas to restive clients just landed in Sketch. It is fantastic in its simplicity! No useless bells and whistles. Just works! Shared libraries on the cloud is another game changer. Apple team worked really hard to share iOS UI library with all Sketch users. Whenever something changes from Apple side, the changes are going to be reflected on your project in no time. Living in a dream! On top ot that massive performance improvements and bug fixes landed in 49. Biggie!&lt;/p&gt;
&lt;h2 id=&#34;react-v1630-new-lifecycles-and-context-apihttpsreactjsorgblog20180329react-v-16-3html&#34;&gt;&lt;a href=&#34;https://reactjs.org/blog/2018/03/29/react-v-16-3.html&#34;&gt;React v16.3.0: New lifecycles and context API&lt;/a&gt; &lt;a href=&#34;#react-v1630-new-lifecycles-and-context-apihttpsreactjsorgblog20180329react-v-16-3html&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;New version of one of the most popular front end frameworks just landed and it is full of exciting features. Time slicing is a new way to ensure that high-priority updates don’t get blocked by a low-priority update to always provide a responsive feeling of an app. Another news is a set of tools to help developers building beautiful async applications. The best intro to those features has been presented by &lt;a href=&#34;https://youtu.be/v6iR3Zk4oDY&#34;&gt;Dan Abramov at JSConf Iceland&lt;/a&gt; few weeks ago. New context API colloquially called a Redux killer allows us to pass data across milti-level component projects with ease. Wes Bos published a great &lt;a href=&#34;https://youtu.be/XLJN4JfniH4&#34;&gt;into to new Context API&lt;/a&gt; on his YouTube channel.&lt;/p&gt;
&lt;h2 id=&#34;c-core-guidelineshttpisocppgithubiocppcoreguidelinescppcoreguidelines&#34;&gt;&lt;a href=&#34;http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines&#34;&gt;C++ Core Guidelines&lt;/a&gt; &lt;a href=&#34;#c-core-guidelineshttpisocppgithubiocppcoreguidelinescppcoreguidelines&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I mentioned in my &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2017/&#34;&gt;personal 2017 review&lt;/a&gt; that one of my aims for 2018 is to learn a new low-level programming language. Decision has been made and I have chosen C++. I spent with this language few weeks by now and the more I learn it the more I understand the core concepts of a JavaScript (the only language that I am fluent at). C++ Core Guidelines is a fantastic helper on my early journey (and probably will be on a later stage). Created mainly by designer of C++ Bjarne Stroustrup, really comprehensive and easy to understand.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a set of core guidelines for modern C++, C++17, C++14, and C++11, taking likely future enhancements and ISO Technical Specifications (TSs) into account. The aim is to help C++ programmers to write simpler, more efficient, more maintainable code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;stackoverflow-developer-survey-results-2018httpsinsightsstackoverflowcomsurvey2018&#34;&gt;&lt;a href=&#34;https://insights.stackoverflow.com/survey/2018&#34;&gt;Stackoverflow Developer Survey Results 2018&lt;/a&gt; &lt;a href=&#34;#stackoverflow-developer-survey-results-2018httpsinsightsstackoverflowcomsurvey2018&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another year, another round of shocking results. From front end developer perspective: JavaScript rules the world, Visual Studio Code dominated the market, Angular still the most popular but React is the most wanted framework. Give it a quick scan — there are tons of things that you will find interesting.&lt;/p&gt;
&lt;h2 id=&#34;working-with-the-new-css-typed-object-modelhttpsdevelopersgooglecomwebupdates201803cssom&#34;&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2018/03/cssom&#34;&gt;Working with the new CSS Typed Object Model&lt;/a&gt; &lt;a href=&#34;#working-with-the-new-css-typed-object-modelhttpsdevelopersgooglecomwebupdates201803cssom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of the &lt;a href=&#34;https://ishoudinireadyyet.com/&#34;&gt;Houdini&lt;/a&gt; spec, Google Chrome 66 comes with CSS Typed Object Model. Exciting, isn&amp;rsquo;t it? Web dev goes crazy with a strictly typed languages and CSS is slowly becoming one of them. Personally I really like this idea and finally something that should be represented by number, will be a real number. Unit conversion and value manipulation done as expected, better optimization for performance under the hood and definitely less errors — just to name a few benefits of typed CSSOM (CSS Object Model).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Siema! Thanks for 2000 stars on Github!</title>
      <link>https://pawelgrzybek.com/siema-thanks-for-2000-stars-on-github/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/siema-thanks-for-2000-stars-on-github/</guid>
      <description>&lt;p&gt;In November 2016 I was looking for a carousel for one of my projects. I found about a hundred of them but none of them fulfilled my requirements: a simple API, extendable, lightweight and optimised for performance. I spent so much time researching I just decided to build my own solution at the end. It worked surprisingly well for me so I decided to smash it on to a &lt;a href=&#34;https://github.com/pawelgrzybek/siema&#34;&gt;Github repository&lt;/a&gt;, build a simple &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;docs page&lt;/a&gt; and ask my talented friend &lt;a href=&#34;http://www.sibenberg.com/&#34;&gt;Jarkko Sibenberg&lt;/a&gt; to create a logo for the project. Months have passed, hours have been spent on the project and 280 commits later…&lt;/p&gt;
&lt;p&gt;Siema&amp;rsquo;s star counter on GitHub just hit 2000 stars. With thousands of downloads (from &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; only) every week, hundreds of projects (from Github only) depend on it. It has been featured in some of the most reputable web industry sites/blogs such as: Smashing Magazine, WDRL, Net magazine, Codrops and many more. Thanks!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-03-05-1.jpg&#34;
  alt=&#34;Siema — Lightweight and simple carousel with no dependencies&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;800&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;the-future-of-siema&#34;&gt;The future of Siema &lt;a href=&#34;#the-future-of-siema&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few weeks back I dropped &lt;a href=&#34;https://github.com/pawelgrzybek/siema/releases/tag/v1.5.0&#34;&gt;Siema 1.5&lt;/a&gt; with a list of the most frequently requested features. The overall feedback was amazing and I am really happy that people received the options that they were waiting for. I am not going to add more features anytime soon but it doesn&amp;rsquo;t mean that the project is finished. I can reveal a few plans for the future version 2.0. Here you go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;full API coverage&lt;/li&gt;
&lt;li&gt;flexbox (it will affect browser support)&lt;/li&gt;
&lt;li&gt;TypeScript everything&lt;/li&gt;
&lt;li&gt;E2E testing&lt;/li&gt;
&lt;li&gt;new documentation&lt;/li&gt;
&lt;li&gt;centered mode&lt;/li&gt;
&lt;li&gt;modifying multiple items via &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;prepend&lt;/code&gt; and &lt;code&gt;append&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;accessibility improvements&lt;/li&gt;
&lt;li&gt;performance optimisation&lt;/li&gt;
&lt;li&gt;addons (pagination, navigation as optional packages)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thank-yall&#34;&gt;Thank y&amp;rsquo;all &lt;a href=&#34;#thank-yall&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would like to thank you all for using Siema, reporting bugs, sending pull requests and supporting the development in any way. If any one of you ever wondered if it is a good idea to build an open source project — do it! It is a hard work and requires lots of time and energy but it is an irreplaceable learning experience and opens tons of great opportunities.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 February</title>
      <link>https://pawelgrzybek.com/top-picks-2018-february/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-february/</guid>
      <description>&lt;h2 id=&#34;betterexplainedhttpsbetterexplainedcom&#34;&gt;&lt;a href=&#34;https://betterexplained.com/&#34;&gt;BetterExplained&lt;/a&gt; &lt;a href=&#34;#betterexplainedhttpsbetterexplainedcom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A number of articles that explain complex (more or less) mathematical patterns in a simple words digestible by normal people. When I stumbled upon this website I spent few solid hours on learning new stuff and refreshing my high school skills.&lt;/p&gt;
&lt;h2 id=&#34;phasehttpsphasecom&#34;&gt;&lt;a href=&#34;https://phase.com/&#34;&gt;Phase&lt;/a&gt; &lt;a href=&#34;#phasehttpsphasecom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I still love you Sketch but… Tons of competitive tools are coming out and some of them are looking very promising. &lt;a href=&#34;https://www.figma.com/&#34;&gt;Figma&lt;/a&gt; succeeded by giving designers a great cross-platform alternative that works in a browser. &lt;a href=&#34;https://www.invisionapp.com/studio&#34;&gt;InVision Studio&lt;/a&gt; that I mention in &lt;a href=&#34;https://pawelgrzybek.com/top-picks-2017-october/#studio---the-worlds-most-powerful-screen-design-tool&#34;&gt;one of the previous top picks&lt;/a&gt; is another one that is looking very promising just by looking at some of the first things that people &lt;a href=&#34;https://youtu.be/RCf4UQkaubc&#34;&gt;built with it&lt;/a&gt;. With release date around summer 2018, Phase is joining the group of these tools. First promo videos on a website are looking sweet!&lt;/p&gt;
&lt;h2 id=&#34;jake-archibald-in-the-loophttpsyoutubeccol7mc4pl0&#34;&gt;&lt;a href=&#34;https://youtu.be/cCOL7MC4Pl0&#34;&gt;Jake Archibald: In The Loop&lt;/a&gt; &lt;a href=&#34;#jake-archibald-in-the-loophttpsyoutubeccol7mc4pl0&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a must-watch! Jake Archibald from Google and absolutely the best explanation of event loop in JavaScript! Essential talk for all JavaScript developers!&lt;/p&gt;
&lt;h2 id=&#34;getting-started-with-nodejs-debugging-in-vs-codehttpsyoutube2ofknl7vyv8&#34;&gt;&lt;a href=&#34;https://youtu.be/2oFKNL7vYV8&#34;&gt;Getting started with Node.js debugging in VS Code&lt;/a&gt; &lt;a href=&#34;#getting-started-with-nodejs-debugging-in-vs-codehttpsyoutube2ofknl7vyv8&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This eight minutes video explaines everything that you have to know to get stared with debugging JavaScript &amp;amp; Node programs in Visual Studio Code. I spent lots of time to understand it by reading docs and watching some unofficial YouTube tutorials — this one would be a relief for me back then.&lt;/p&gt;
&lt;h2 id=&#34;diyahttpdiyahqcom&#34;&gt;&lt;a href=&#34;http://diyahq.com/&#34;&gt;Diya&lt;/a&gt; &lt;a href=&#34;#diyahttpdiyahqcom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is what I was waiting for. Extremely useful plugin for Sketch app that bring your ideas to live via few clicks. Animate between artboards, control timeline of animation per object level, interpolate color values, morph SVG shapes, import plain HTML to a client and as a guide for a developer. Currently it is a beta version but the first stable release should and in few weeks. Keep your eyes peeled for this one.&lt;/p&gt;
&lt;h2 id=&#34;third-party-css-is-not-safehttpsjakearchibaldcom2018third-party-css-is-not-safe&#34;&gt;&lt;a href=&#34;https://jakearchibald.com/2018/third-party-css-is-not-safe/&#34;&gt;Third party CSS is not safe&lt;/a&gt; &lt;a href=&#34;#third-party-css-is-not-safehttpsjakearchibaldcom2018third-party-css-is-not-safe&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jake Archibald from google team reminds about the denger that comes with using third party scripts and stylesheets. &lt;a href=&#34;https://github.com/maxchehab/CSS-Keylogging&#34;&gt;CSS-Keylogging&lt;/a&gt; that went crazy on Hackernews the other day inspired Jake to publish this one. I can&amp;rsquo;t agree with this dude enough! I rarely use any third party resources on my projects and I am keen to get rid of them completely. I am looking at you Disqus section below.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Amazon S3 photo backup solution</title>
      <link>https://pawelgrzybek.com/my-amazon-s3-photo-backup-solution/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/my-amazon-s3-photo-backup-solution/</guid>
      <description>&lt;p&gt;Far far away, someone, somewhere said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;There are two kinds of people, those who back up their data and those who have never lost all their data.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily for me, I have never been a victim of a situation where I lost all of my data simply because I do backups regularly. I never do a full backup of my machine though. I can download an operating system in few minutes, restore my system preferences via a &lt;a href=&#34;https://github.com/pawelgrzybek/dotfiles&#34;&gt;single click&lt;/a&gt;, install all my frequently used apps using a &lt;a href=&#34;https://caskroom.github.io/&#34;&gt;single command&lt;/a&gt;, pull all of my projects from &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; and listen to music on my &lt;a href=&#34;https://en.wikipedia.org/wiki/Technics_SL-1200&#34;&gt;Technics SL-1200&lt;/a&gt; or stream it from Apple Music. The only thing that I keep backed up is my photo collection.&lt;/p&gt;
&lt;h2 id=&#34;my-backup-strategy-in-a-nutshell&#34;&gt;My backup strategy in a nutshell &lt;a href=&#34;#my-backup-strategy-in-a-nutshell&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since May 2007 I have kept all of my photos in a well organized collection, ordered chronologically by year and by session / event. I keep exactly the same habit for all of my pictures taken on my iPhone in parallel. It is not an enormous amount of data (around 200GB) but the sentimental value that it holds is immense.&lt;/p&gt;
&lt;p&gt;No matter what, I always store this collection on two physical devices. It can be my computer&amp;rsquo;s hard drive, an external flash disc, NAS server or a RAID array. Currently I use two totally average external &lt;a href=&#34;https://www.amazon.co.uk/Seagate-Portable-External-Creative-Photography/dp/B00FP50LH2&#34;&gt;hard drives by Segate&lt;/a&gt;. I am the happy owner of a superb &lt;a href=&#34;https://www.sony.co.uk/electronics/interchangeable-lens-cameras/ilce-7rm3&#34;&gt;Sony α7R III&lt;/a&gt; that shoots 80 megabyte ARW files. Taking that into consideration I&amp;rsquo;ve realised that I may run out of storage on these hard drives very quickly, but for now they do the job.&lt;/p&gt;
&lt;p&gt;However, things happen! Disks fail, people rob, rivers flood, comets fall. In case any of that occurs I need one more copy in the cloud. I have tested multiple solutions and services over the past few years and finally I feel that I have found something that is going to stick around. Although making a backup to a local hard drive is fairly easy and straight forward, cloud backups are way more complicated. Luckily I am here to help you out.&lt;/p&gt;
&lt;h2 id=&#34;what-i-consider-to-be-a-good-cloud-backup-and-things-that-i-dont-care-about&#34;&gt;What I consider to be a good cloud backup and things that I don&amp;rsquo;t care about &lt;a href=&#34;#what-i-consider-to-be-a-good-cloud-backup-and-things-that-i-dont-care-about&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are plenty of services that offer cloud storage for amateur and professional photographers. &lt;a href=&#34;https://dropbox.com&#34;&gt;Dropbox&lt;/a&gt;, &lt;a href=&#34;https://www.google.com/drive/&#34;&gt;Google Drive&lt;/a&gt;, &lt;a href=&#34;https://www.box.com/&#34;&gt;Box&lt;/a&gt;, &lt;a href=&#34;https://onedrive.live.com/&#34;&gt;OneDrive&lt;/a&gt;, &lt;a href=&#34;https://home.zoolz.co.uk/&#34;&gt;Zoolz&lt;/a&gt; or &lt;a href=&#34;https://www.backblaze.com/&#34;&gt;Backblaze&lt;/a&gt; just to name a few.&lt;/p&gt;
&lt;p&gt;There are a few key things that I need to get out of my cloud backup solution. Security first — I really don&amp;rsquo;t want anyone to look at the pictures of my beautiful girlfriend. There is a reasonable chance that my collection will grow over time so auto-scaling and unlimited storage resources is another must-have. New services show up and vanish often and I am really not interested in investing my time in solutions that may not be around tomorrow. Do you remember &lt;a href=&#34;https://copy.com/&#34;&gt;copy&lt;/a&gt;? Quite a cool service but it didn&amp;rsquo;t stay around for long though. Also price is an obvious factor of course.&lt;/p&gt;
&lt;p&gt;The providers listed above usually offer tons of things that I simply don&amp;rsquo;t care about. I don&amp;rsquo;t need a fancy app with tons of bells and whistles. I don&amp;rsquo;t need a constant live sync and seamless integration with my OS. It is a last resort backup — the file structure is probably never going to change. I will just add more stuff over time.&lt;/p&gt;
&lt;p&gt;I am here today not to compare the available options or convince you to use one over the other. I spent years looking for a solution that suits my needs and I would like to share it with you.&lt;/p&gt;
&lt;h2 id=&#34;say-hello-to-aws-simple-storage-service-s3&#34;&gt;Say hello to AWS Simple Storage Service (S3) &lt;a href=&#34;#say-hello-to-aws-simple-storage-service-s3&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS (Amazon Web Services)&lt;/a&gt; is a platform that offers a number of things that your business or you, as an individual, may need. From computational power, through to database storage, content delivery networks to machine learning and IoT (Internet of things) related products. A storage solution is one of the many services that AWS has to offer. It is well established and proven by the mile-long &lt;a href=&#34;https://aws.amazon.com/solutions/case-studies/all/&#34;&gt;list of clients&lt;/a&gt; like: Adobe, AirBnb, Netflix, NASA, SoundCloud, Canon, GoPro… The list goes on and on.&lt;/p&gt;
&lt;p&gt;You may have heard the opinion that AWS is complicated to use. In reality it is crazy complicated but to be in a band you don&amp;rsquo;t have to play all the instruments — just master a single one. Storage is what we need.&lt;/p&gt;
&lt;p&gt;AWS has a number of storage solutions in its product list. From simple solutions like &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;Amazon Simple Storage Service (S3)&lt;/a&gt; to the &lt;a href=&#34;https://aws.amazon.com/snowmobile/&#34;&gt;AWS Snowmobile&lt;/a&gt; — a 45-foot long shipping container pulled by a truck to transfer extremely large amounts of data (up to 100PB). The thing that we need is a container of data stored within an S3 bucket and its seamless transition to the &lt;a href=&#34;https://aws.amazon.com/glacier/&#34;&gt;Glacier&lt;/a&gt; class using lifecycle policies. Let me explain.&lt;/p&gt;
&lt;h3 id=&#34;what-is-s3-and-how-it-works&#34;&gt;What is S3 and how it works &lt;a href=&#34;#what-is-s3-and-how-it-works&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Amazon S3 is a simple storage solution that offers a range of classes designed for specific use cases. For frequently used, general storage use &lt;a href=&#34;https://aws.amazon.com/s3/storage-classes/#General_Purpose&#34;&gt;S3 Standard&lt;/a&gt;. &lt;a href=&#34;https://aws.amazon.com/s3/storage-classes/#Infrequent_Access&#34;&gt;Infrequent Access&lt;/a&gt; works best for files that you don&amp;rsquo;t have to access very often but still keep them accessible whenever you need them. For archiving purposes, &lt;a href=&#34;https://aws.amazon.com/s3/storage-classes/#Archive&#34;&gt;Glacier&lt;/a&gt; is the best option. Each of these categories comes with pros and cons and each of them suits different needs. The main differences between them are &lt;a href=&#34;https://aws.amazon.com/s3/pricing/&#34;&gt;price&lt;/a&gt; and waiting time to access objects (photos in our case). For those that are curious I would direct you to Marc Trimuschats presentation from the AWS Summit 2017. &lt;a href=&#34;https://youtu.be/bfDpK45Faa0&#34;&gt;Deep Dive on Object Storage&lt;/a&gt; tells you everything that you need.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-02-27-1.jpg&#34;
  alt=&#34;Amazon S3 storage classes&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;781&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Essentially, files stored in the hot storage (S3 Standard) are accessible immediately but they will cost you a fortune ($0.023 / GB). Cold storage (Glacier) on the other hand is extremely cheap ($0.004 per GB) but a file restoration can take from 1 minute up to 12 hours. You will be charged for each GB retrieved from the cold storage cluster too. The pricing may vary a bit depending on the region of your S3 &amp;ldquo;bucket&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Privacy of files is something that we can easily control with S3. If you want to make a file public or private, no more than a single click is needed. Lifecycle policies help us to create a set of rules that invisibly migrate files between storage classes. I utilised the power of this feature to migrate all the files imported to the Standard bucket to Glacier the next day.&lt;/p&gt;
&lt;h3 id=&#34;how-to&#34;&gt;How to &lt;a href=&#34;#how-to&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I mentioned before that AWS is complicated to use, but I hope that this step by step guide can make things easier for you. The S3 Storage may actually be one of the easiest to use services from the humongous number of products in AWS portfolio.&lt;/p&gt;
&lt;p&gt;Start with &lt;a href=&#34;https://portal.aws.amazon.com/billing/signup&#34;&gt;creating a free AWS account&lt;/a&gt;. This process requires you to add a credit card to your account and authorise it by a phone call you will receive from Amazon&amp;rsquo;s bot. It is worth mentioning that you are eligible to use a &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;Free Tier&lt;/a&gt; that gives you access to a snippet of AWS features totally for free. You can end this process here but I would strongly suggest to look at the &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html&#34;&gt;IAM (Identity and Access Management) best practices&lt;/a&gt;. Personally I use my &amp;ldquo;root&amp;rdquo; account just for billing purposes and to manage users. For using AWS services I created a IAM user with sufficient permissions for my everyday tasks — security first. Read more about the recommended way of using the AWS platform on the &lt;a href=&#34;https://aws.amazon.com/documentation/iam/&#34;&gt;AWS Identity and Access Management Documentation&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/1Eh1uxLyXJ8&#34;&gt;Getting Started with Amazon Web Services&lt;/a&gt; webinar is another helpful resource start with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;When you first create an AWS account, you begin with a single sign-in identity that has complete access to all AWS services and resources in the account. This identity is called the AWS account root user and is accessed by signing in with the email address and password that you used to create the account. We strongly recommend that you do not use the root user for your everyday tasks, even the administrative ones. Instead, adhere to the best practice of using the root user only to create your first IAM user. Then securely lock away the root user credentials and use them to perform only a few account and service management tasks.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our account is ready to use and now secure, it is time to create the first storage &amp;ldquo;bucket&amp;rdquo; under the S3 section. Use a unique name for your bucket and choose a location of interest. Make a wise decision at this point because you won&amp;rsquo;t be able to change those details later on. Hit the &amp;ldquo;Create&amp;rdquo; button and we are almost set up.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-02-27-2.jpg&#34;
  alt=&#34;Create Amazon S3 bucket&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1250&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;In theory we are ready to use the service now but there is one thing that may help to automate our workflow a lot. We definitely don&amp;rsquo;t want to change the storage class (Standard, IA and Glacier) for every file manually. As mentioned before lifecycle policies can automate the process for us. My aim is to migrate all the files that I put into my Standard S3 bucket as soon as possible to cheap cold storage (Glacier). To set it up that way, click on the name of the bucket created in the previous step and navigate to Lifecycle rules under the Management tab. Click the &amp;ldquo;Add lifecycle rule&amp;rdquo; button to define a new rule. Add a meaningful name to your rule and navigate further to the Transitions section. For the current version of your files create a rule that moves the file to Glacier after one day. We don&amp;rsquo;t need to tweak settings for the previous versions because we didn&amp;rsquo;t enable file versioning in the first place (you don&amp;rsquo;t need that for backups). Click next to the Expiration tab just to keep it as it is (we really don&amp;rsquo;t want our files to be removed) and proceed to the next tab — Review. Make sure that you are happy with all the settings in the last step and save the rule. We are done!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-02-27-3.jpg&#34;
  alt=&#34;Create Amazon S3 lifecycle policy&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;2776&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;gui-or-not&#34;&gt;GUI or not &lt;a href=&#34;#gui-or-not&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Although the S3 web interface is very user friendly and fast, you may be interested in using a GUI (graphical user interface) tool to send files to your bucket. Luckily there are a lot of tools out there that let you access your Simple Storage Service easily. As a macOS user my personal preference is &lt;a href=&#34;https://binarynights.com/&#34;&gt;ForkLift 3&lt;/a&gt;. &lt;a href=&#34;https://panic.com/transmit/&#34;&gt;Transmit 5&lt;/a&gt; is another app for the Apple system that has garnered a great reputation. Maybe &lt;a href=&#34;https://cyberduck.io/&#34;&gt;Cyberduck&lt;/a&gt;? &lt;a href=&#34;https://filezillapro.com/ftp/mac/&#34;&gt;FileZilla Pro&lt;/a&gt; and &lt;a href=&#34;http://s3browser.com/&#34;&gt;S3 Browser&lt;/a&gt; could be good options for Windows users. Play around with the available options and let me know about your preferred way to interact with S3 objects.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-02-27-4.jpg&#34;
  alt=&#34;Using Forklift 3 with Amazon S3&#34;
  loading=&#34;lazy&#34;
  width=&#34;1376&#34;
  height=&#34;818&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;happy-backing-up&#34;&gt;Happy backing up &lt;a href=&#34;#happy-backing-up&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am very happy with this solution and it works for me really well. I managed to reduce the cost of my digital backups from £8 per month to less than £1. I have a reliable and secure copy of my files and a great system in place that hopefully is going to serve me for the long term. Let me know about your backup strategy in the comments below. If you have any questions or need some more clarification on anything in this post, I am always keen to help. Happy backing up!&lt;/p&gt;
&lt;p class=&#34;update&#34;&gt;One 27 March 2019, &lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-amazon-s3-storage-class-glacier-deep-archive/&#34;&gt;Amazon announced a Glacier Deep Archive&lt;/a&gt; which is even more cost effective storage class that perfectly suits my needs.&lt;/p&gt;

</description>
    </item>
    
    <item>
      <title>I built a thing - an Alfred workflow to manage Things lists</title>
      <link>https://pawelgrzybek.com/i-built-a-thing-an-alfred-workflow-to-manage-things-lists/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-built-a-thing-an-alfred-workflow-to-manage-things-lists/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; is my favourite macOS productivity booster. It allows me to configure custom keywords, manage and store multiple things in a clipboard, create custom search tools and text expansions. The most powerful part of this tool are the &lt;a href=&#34;https://www.alfredapp.com/workflows/&#34;&gt;Workflows&lt;/a&gt; — only your imagination and programming skills restrict the variety of automations you can create. I&amp;rsquo;ve built a few already: &lt;a href=&#34;https://pawelgrzybek.com/div-simple-alfred-windows-manager/&#34;&gt;Div&lt;/a&gt; — a simple window manager, &lt;a href=&#34;http://www.packal.org/workflow/sshot&#34;&gt;SShot&lt;/a&gt; to change a screenshot file extension instantly or &lt;a href=&#34;http://www.packal.org/workflow/hex&#34;&gt;hex&lt;/a&gt; to convert decimal system numbers into hexadecimal values.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://culturedcode.com/things/&#34;&gt;Things&lt;/a&gt; by Cultured Code is my macOS and iOS task manager of choice. It is beautiful, reliable and suits my workflow perfectly. The most recent update to &lt;a href=&#34;https://culturedcode.com/things/blog/&#34;&gt;version 3.4&lt;/a&gt; brought a very powerful URL Scheme that allows developers like me to built things like…&lt;/p&gt;
&lt;h2 id=&#34;alfred-workflow-to-manage-a-things-list-with-ease&#34;&gt;Alfred workflow to manage a Things list with ease &lt;a href=&#34;#alfred-workflow-to-manage-a-things-list-with-ease&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Simply type the keyword &lt;code&gt;things&lt;/code&gt; and pick from the dropdown a list that you would like to open. Additionally you can navigate to the list of interest and hold a modifier key (Command &lt;code&gt;⌘&lt;/code&gt;, Option &lt;code&gt;⌥&lt;/code&gt;, Control &lt;code&gt;⌃&lt;/code&gt;, &lt;code&gt;Fn&lt;/code&gt; or Shift &lt;code&gt;⇧&lt;/code&gt;) to reveal an addition option to add an item to a particular list. Hit return &lt;code&gt;↩&lt;/code&gt; and you&amp;rsquo;re done.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-02-23-1.gif&#34;
  alt=&#34;Alfred workflow to manage Things lists&#34;
  loading=&#34;lazy&#34;
  width=&#34;960&#34;
  height=&#34;540&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Download &lt;a href=&#34;http://www.packal.org/workflow/things-1&#34;&gt;Things workflow for free from Packal&lt;/a&gt; and grab a source code from &lt;a href=&#34;https://github.com/pawelgrzybek/alfred-things&#34;&gt;Github repository&lt;/a&gt;. Improvements suggestions and feature requests are more than welcome. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2018 January</title>
      <link>https://pawelgrzybek.com/top-picks-2018-january/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2018-january/</guid>
      <description>&lt;h2 id=&#34;introducing-web-payments-easier-online-purchases-with-the-payment-request-apihttpswwwsmashingmagazinecom201801online-purchase-payment-request-api&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2018/01/online-purchase-payment-request-api/&#34;&gt;Introducing Web Payments: Easier Online Purchases With The Payment Request API&lt;/a&gt; &lt;a href=&#34;#introducing-web-payments-easier-online-purchases-with-the-payment-request-apihttpswwwsmashingmagazinecom201801online-purchase-payment-request-api&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Peter O&amp;rsquo;Shaughnessy — developer advocate in Samsung’s web browser team — published a great explanation post for the Payment Request API. Few companies use it by now and observe a significantly improved user experience. API is promise-based and easy to understand.&lt;/p&gt;
&lt;h2 id=&#34;additive-animation-with-the-web-animations-apihttpscss-trickscomadditive-animation-web-animations-api&#34;&gt;&lt;a href=&#34;https://css-tricks.com/additive-animation-web-animations-api/&#34;&gt;Additive Animation with the Web Animations API&lt;/a&gt; &lt;a href=&#34;#additive-animation-with-the-web-animations-apihttpscss-trickscomadditive-animation-web-animations-api&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The new property added to the Web Animation API configuration object — &lt;code&gt;composite&lt;/code&gt; — allows us to do something that previously was almost impossible (technically it was possible but the amount of multidimensional matrix math needed is crazy). Dan Wilson explains the magic behind it, how it is calculated and presents all the possible values. Really informative article.&lt;/p&gt;
&lt;h2 id=&#34;array-explorerhttpssdrasgithubioarray-explorer&#34;&gt;&lt;a href=&#34;https://sdras.github.io/array-explorer/&#34;&gt;Array Explorer&lt;/a&gt; &lt;a href=&#34;#array-explorerhttpssdrasgithubioarray-explorer&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/sarah_edo&#34;&gt;Sarah Drasner&lt;/a&gt; built an incredibly useful resource to help you find a method from &lt;code&gt;Array&lt;/code&gt;s prototype. Just few days latter the same helper tool for &lt;code&gt;Object&lt;/code&gt;s prototype came out — &lt;a href=&#34;https://sdras.github.io/object-explorer/&#34;&gt;Object Explorer&lt;/a&gt;. It is way quicker to digest than traversing through all props / methods on mdn! Thanks Sarah!&lt;/p&gt;
&lt;h2 id=&#34;apple-developer-program-membership-fee-waivers-now-availablehttpsdeveloperapplecomnewsid01032018a&#34;&gt;&lt;a href=&#34;https://developer.apple.com/news/?id=01032018a&#34;&gt;Apple Developer Program Membership Fee Waivers Now Available&lt;/a&gt; &lt;a href=&#34;#apple-developer-program-membership-fee-waivers-now-availablehttpsdeveloperapplecomnewsid01032018a&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apple now offers a free of charge dev accounts for nonprofit organizations, accredited educational institutions and government entities. For the time being new rules are only valid for US residents, but I&amp;rsquo;m sure it will be extended to rest of the world in next few months.&lt;/p&gt;
&lt;h2 id=&#34;hdr-photography-in-microsoft-excel-by-kevin-chenhttpsyoutubebkqjdaggvm8&#34;&gt;&lt;a href=&#34;https://youtu.be/bkQJdaGGVM8&#34;&gt;HDR Photography in Microsoft Excel by Kevin Chen&lt;/a&gt; &lt;a href=&#34;#hdr-photography-in-microsoft-excel-by-kevin-chenhttpsyoutubebkqjdaggvm8&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is probably the most hilarious talk that I have ever watched. Funny but very informative! You can learn a lot about photography, dynamic range, lightning reciprocity and Microsoft products performance.&lt;/p&gt;
&lt;h2 id=&#34;the-rise-of-the-state-machineshttpswwwsmashingmagazinecom201801rise-state-machines&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2018/01/rise-state-machines/&#34;&gt;The Rise Of The State Machines&lt;/a&gt; &lt;a href=&#34;#the-rise-of-the-state-machineshttpswwwsmashingmagazinecom201801rise-state-machines&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Krasimir Tsonev explains the concept of popular in computer science state machines. Clear explanation and very well introduced concept on minimal JavaScript example.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;State machines are good firewalls. They protect us from reaching unknown states because we set boundaries for what can happen and when, without explicitly saying how.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;whats-new-in-html-52httpsbitsofcodewhats-new-in-html-5-2&#34;&gt;&lt;a href=&#34;https://bitsofco.de/whats-new-in-html-5-2/&#34;&gt;What’s New in HTML 5.2?&lt;/a&gt; &lt;a href=&#34;#whats-new-in-html-52httpsbitsofcodewhats-new-in-html-5-2&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;HTML 5.2 just hit a status of W3C Recommendation — perfect time to review whats new in its spec. Ire Aderinokun reviews it all in this short article. The native &lt;code&gt;dialog&lt;/code&gt; element excites me the most for sure.&lt;/p&gt;
&lt;h2 id=&#34;careful-nowhttpscss-trickscomcareful-now&#34;&gt;&lt;a href=&#34;https://css-tricks.com/careful-now/&#34;&gt;Careful Now&lt;/a&gt; &lt;a href=&#34;#careful-nowhttpscss-trickscomcareful-now&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Chris Coyier shares his thoughts about websites build specifically for Google Chrome. It is a natural continuation of the &lt;a href=&#34;https://www.theverge.com/2018/1/4/16805216/google-chrome-only-sites-internet-explorer-6-web-standards&#34;&gt;&amp;ldquo;Chrome is turning into the new Internet Explorer 6&amp;rdquo; by Tom Warren&lt;/a&gt; from the prism of a web developer.&lt;/p&gt;
&lt;h2 id=&#34;a-letter-about-google-amphttpampletterorg&#34;&gt;&lt;a href=&#34;http://ampletter.org/&#34;&gt;A letter about Google AMP&lt;/a&gt; &lt;a href=&#34;#a-letter-about-google-amphttpampletterorg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AMEN!&lt;/p&gt;
&lt;h2 id=&#34;the-ultimate-guide-to-javascript-frameworkshttpsjavascriptreportcomthe-ultimate-guide-to-javascript-frameworks&#34;&gt;&lt;a href=&#34;https://javascriptreport.com/the-ultimate-guide-to-javascript-frameworks/&#34;&gt;The Ultimate Guide to JavaScript Frameworks&lt;/a&gt; &lt;a href=&#34;#the-ultimate-guide-to-javascript-frameworkshttpsjavascriptreportcomthe-ultimate-guide-to-javascript-frameworks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is not another comparison of React, Vue and Angular — it is much more comprehensive than that. John Hannah did a really great job for people who are joining the JS frameworks game. Interestingly there is a lot about fresh technologies / languages like Elm and Reason that take a big part of this complex post.&lt;/p&gt;
&lt;h2 id=&#34;css-print-apihttpsdevelopersgooglecomwebupdates201801paintapi&#34;&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2018/01/paintapi&#34;&gt;CSS Print API&lt;/a&gt; &lt;a href=&#34;#css-print-apihttpsdevelopersgooglecomwebupdates201801paintapi&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Surma from Google explains something that I am well excited about — canvas for CSS stylesheets (kind of). I can think of number of great use cases of this one and can&amp;rsquo;t wait to play around with this API. Expect an article dedicated to this one very soon.&lt;/p&gt;
&lt;h2 id=&#34;bootstrap-4httpbloggetbootstrapcom20180118bootstrap-4&#34;&gt;&lt;a href=&#34;http://blog.getbootstrap.com/2018/01/18/bootstrap-4/&#34;&gt;Bootstrap 4&lt;/a&gt; &lt;a href=&#34;#bootstrap-4httpbloggetbootstrapcom20180118bootstrap-4&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Personally I don&amp;rsquo;t use any frameworks, but working as a front end developer, it is hard to not to do something related with a Bootstrap. Version 3 came out in 2015 and about 3 years and 6000 commits later, there it is — Bootstrap 4.0. Nice &lt;a href=&#34;https://twitter.com/mdo&#34;&gt;Mark Otto&lt;/a&gt; and team!&lt;/p&gt;
&lt;h2 id=&#34;vanishing-boxes-with-display-contentshttpsrachelandrewcoukarchives20160129vanishing-boxes-with-display-contents&#34;&gt;&lt;a href=&#34;https://rachelandrew.co.uk/archives/2016/01/29/vanishing-boxes-with-display-contents/&#34;&gt;Vanishing boxes with display contents&lt;/a&gt; &lt;a href=&#34;#vanishing-boxes-with-display-contentshttpsrachelandrewcoukarchives20160129vanishing-boxes-with-display-contents&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The CSS &lt;code&gt;display: contents&lt;/code&gt; is on its way — Firefox comes with it since version 37, Chrome 65 and Safari 11.1 are joining very soon. You can &lt;a href=&#34;https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/10938981-implement-the-box-generation-keywords-from-css-dis&#34;&gt;leave your vote&lt;/a&gt; to speed things up for a Microsfot Edge. Very useful value when we work with a &lt;code&gt;flexbox&lt;/code&gt; or &lt;code&gt;grid&lt;/code&gt; type of a layout — allows us to follow the best practices for a markup, keeping the layout in place. &lt;a href=&#34;https://blogs.igalia.com/mrego/2018/01/11/display-contents-is-coming/&#34;&gt;Rego Casasnovas explains the details behind &lt;code&gt;display: contents&lt;/code&gt;&lt;/a&gt; really well too. For a first glance it is looking like a right solution for a sub-grid problem — Rachel Andrew explains why it is not in a &lt;a href=&#34;https://rachelandrew.co.uk/archives/2017/07/20/why-display-contents-is-not-css-grid-layout-subgrid/&#34;&gt;separated article&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;css-gridhttpscssgridio&#34;&gt;&lt;a href=&#34;https://cssgrid.io/&#34;&gt;CSS Grid&lt;/a&gt; &lt;a href=&#34;#css-gridhttpscssgridio&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wes Bos added another free course to his collection — it is about CSS Grid layout this time. I haven&amp;rsquo;t finished it yet but as I know previous content recorded by this dude it must be second to none! Highly recommended to all CSSers!&lt;/p&gt;
&lt;h2 id=&#34;puppeteer-10httpsdevelopersgooglecomwebtoolspuppeteer&#34;&gt;&lt;a href=&#34;https://developers.google.com/web/tools/puppeteer/&#34;&gt;Puppeteer 1.0&lt;/a&gt; &lt;a href=&#34;#puppeteer-10httpsdevelopersgooglecomwebtoolspuppeteer&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Puppeteer — node library which provides a high-level API to control headless Chromium — version 1.0 is ready now! If you want to programmatically generate screen shots of your web projects, crawl a single page app, scrape a content or automate form submission for testing — Puppeteer is a right tool for your usecase. Easy to read and write moder API is waiting for you to play around with on &lt;a href=&#34;https://try-puppeteer.appspot.com/&#34;&gt;try-puppeteer.appspot.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;laws-of-uxhttpslawsofuxcom&#34;&gt;&lt;a href=&#34;https://lawsofux.com/&#34;&gt;Laws of UX&lt;/a&gt; &lt;a href=&#34;#laws-of-uxhttpslawsofuxcom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well done! This website is just beautiful and contains so much useful knowledge for all UX designers! Pleasant animations and transitions, a great typography and tons of valuable content! Simply beautiful!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Laws of UX is a collection of the maxims and principles that designers can consider when building user interfaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mental-illness-in-the-web-industryhttpalistapartcomarticlemental-illness-in-the-web-industry&#34;&gt;&lt;a href=&#34;http://alistapart.com/article/mental-illness-in-the-web-industry&#34;&gt;Mental Illness in the Web Industry&lt;/a&gt; &lt;a href=&#34;#mental-illness-in-the-web-industryhttpalistapartcomarticlemental-illness-in-the-web-industry&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/authorbrandong&#34;&gt;Brandon Gregory&lt;/a&gt; on A List Apart meets few contributors who would like to share their stories about mental illness that they went through. This is a global problem and we don&amp;rsquo;t talk about it enough. Thanks Brandon for this fantastic collection of stories. Hopefully this article will reach masses of people in our industry.&lt;/p&gt;
&lt;h2 id=&#34;using-page-speed-in-mobile-search-rankinghttpswebmastersgoogleblogcom201801using-page-speed-in-mobile-searchhtml&#34;&gt;&lt;a href=&#34;https://webmasters.googleblog.com/2018/01/using-page-speed-in-mobile-search.html&#34;&gt;Using page speed in mobile search ranking&lt;/a&gt; &lt;a href=&#34;#using-page-speed-in-mobile-search-rankinghttpswebmastersgoogleblogcom201801using-page-speed-in-mobile-searchhtml&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Something that Google calls the &amp;ldquo;Speed Update&amp;rdquo; is staring in July 2018. Essentially a mobile searches speed ranking is going to be a big factor for the google results. It will harm owners of slow websites with a poor performance on mobile devices.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;We encourage developers to think broadly about how performance affects a user’s experience of their page and to consider a variety of user experience metrics.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;secure-contexts-everywherehttpsblogmozillaorgsecurity20180115secure-contexts-everywhere&#34;&gt;&lt;a href=&#34;https://blog.mozilla.org/security/2018/01/15/secure-contexts-everywhere/&#34;&gt;Secure Contexts Everywhere&lt;/a&gt; &lt;a href=&#34;#secure-contexts-everywherehttpsblogmozillaorgsecurity20180115secure-contexts-everywhere&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;HTTPS everywhere — and this is going to be required even to test a new browser feature. Firefox is bravely starting to introduce this reasonable requirement to a market and hopefully the other vendors come out with the same conclusion sooner than later.&lt;/p&gt;
&lt;h2 id=&#34;ios-113-and-macos-10134-include-service-workershttpstwittercomrmondellostatus956256845311590400&#34;&gt;&lt;a href=&#34;https://twitter.com/rmondello/status/956256845311590400&#34;&gt;iOS 11.3 and macOS 10.13.4 include Service Workers&lt;/a&gt; &lt;a href=&#34;#ios-113-and-macos-10134-include-service-workershttpstwittercomrmondellostatus956256845311590400&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the most exciting news this month for me. Mac OS and iOS version of Safari gets a full support for Service Workers in a next big release. Really can wait for mac OS 10.13.4 and iOS 11.3 to arrive. By the way — I&amp;rsquo;m working on offline support for this website and it is going to be enabled very soon — stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Resize Observer explained</title>
      <link>https://pawelgrzybek.com/the-resize-observer-explained/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/the-resize-observer-explained/</guid>
      <description>&lt;p&gt;How many times have you attached a &lt;code&gt;resize&lt;/code&gt; listener to the &lt;code&gt;window&lt;/code&gt; object just to track a single DOM element? I have done it many times simply because I&amp;rsquo;ve had no other choice. There is an issue though — &lt;code&gt;scroll&lt;/code&gt; and &lt;code&gt;resize&lt;/code&gt; events are performance bottlenecks. Nowadays, the &lt;code&gt;scroll&lt;/code&gt; event can be replaced with the &lt;a href=&#34;https://pawelgrzybek.com/the-intersection-observer-api-explained/&#34;&gt;Intersection Observer that I explained&lt;/a&gt; before. There&amp;rsquo;s now hope for the &lt;code&gt;resize&lt;/code&gt; event — &lt;a href=&#34;https://wicg.github.io/ResizeObserver/&#34;&gt;Resize Observer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;i-dont-care-about-window-resize&#34;&gt;I don&amp;rsquo;t care about window resize &lt;a href=&#34;#i-dont-care-about-window-resize&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What&amp;rsquo;s the big deal with &lt;code&gt;windw.onresize&lt;/code&gt; then? Essentially you have to trigger a callback every single time the size of the window changes — it doesn&amp;rsquo;t necessarily mean that the element of interest changes its dimensions. This is a performance heavy event because it fires frequently and blocks a thread preventing the buttery smooth flow of our website.
Look at &lt;a href=&#34;https://codepen.io/pawelgrzybek/pen/qxERYa&#34;&gt;this CodePen&lt;/a&gt; to understand the issue (open and resize the window size).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// define a callback
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// something cool here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// add resize listener to window object
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;resize&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-01-30-1.gif&#34;
  alt=&#34;window.onresize callbacks&#34;
  loading=&#34;lazy&#34;
  width=&#34;960&#34;
  height=&#34;540&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Can you see the issue? We&amp;rsquo;re trying to update the size of the box but the callback fires when the window changes its dimensions, not the box that we care about.&lt;/p&gt;
&lt;h2 id=&#34;fire-a-callback-only-when-you-need-it--thanks-to-the-resize-observer&#34;&gt;Fire a callback only when you need it — thanks to the Resize Observer &lt;a href=&#34;#fire-a-callback-only-when-you-need-it--thanks-to-the-resize-observer&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Similarly to &lt;a href=&#34;https://pawelgrzybek.com/the-intersection-observer-api-explained/&#34;&gt;the previously explained Intersection Observer&lt;/a&gt; the API of the Resize Observer is very simple. You have to instantiate a new &lt;code&gt;ResizeObserver&lt;/code&gt; object with a callback function in a constructor. Look at the example now (open it in a new window and play around with its size). Can you see the difference? Pay attention to when and how often the callback is triggered.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// define a callback
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// something cool here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// instantiate new observer
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myObserver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ResizeObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Observe one or multiple elements
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-01-30-2.gif&#34;
  alt=&#34;Resize Observer callbacks&#34;
  loading=&#34;lazy&#34;
  width=&#34;960&#34;
  height=&#34;540&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;yes-you-can-use-it-now&#34;&gt;Yes, you can use it now &lt;a href=&#34;#yes-you-can-use-it-now&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although the Resize Observer is supported only in Google Chrome 64+ and it is not fully polyfillable, there is a simple way to check if the browser supports it or not. If it does — take advantage of it. If it doesn&amp;rsquo;t &lt;code&gt;window.onresize&lt;/code&gt; will serve us as well as it has for all these years.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ResizeObserver&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// new ResizeObserver( callback );
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// window.addEventListener(&amp;#39;resize&amp;#39;, callback)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2018-01-30-3.jpg&#34;
  alt=&#34;Resize Observer support table&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;450&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;helpful-resources&#34;&gt;Helpful resources &lt;a href=&#34;#helpful-resources&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wicg.github.io/ResizeObserver/&#34;&gt;Resize Observer 1 specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WICG/ResizeObserver/blob/master/explainer.md&#34;&gt;ResizeObserver explainer document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2016/10/resizeobserver&#34;&gt;ResizeObserver: It’s Like document.onresize for Elements by Surma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new in ECMAScript 2018</title>
      <link>https://pawelgrzybek.com/whats-new-in-ecmascript-2018/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/whats-new-in-ecmascript-2018/</guid>
      <description>&lt;p&gt;It is that time of a year again after the TC39 meeting, which finalises a list of new features that we will get in the latest ECMAScript 2018 update. I published a list of new goodies for &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2017/&#34;&gt;2017 version&lt;/a&gt;, just as I did in &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2016-es7/&#34;&gt;2016&lt;/a&gt;. It is a good time to familiarise ourseves with the new features soon to be at to our disposal this year.&lt;/p&gt;
&lt;h2 id=&#34;restspread-properties-by-sebastian-markbåge&#34;&gt;Rest/Spread Properties by Sebastian Markbåge &lt;a href=&#34;#restspread-properties-by-sebastian-markb%c3%a5ge&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ECMASCript 2015 introuduced rest / spread operators for &lt;code&gt;Array&lt;/code&gt;s. This year the same feature welcomes &lt;code&gt;Object&lt;/code&gt;s. Let&amp;rsquo;s have a look at two examples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Pawel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Front End Developer&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Pawel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   age: 30,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   role: &amp;#39;Front End Developer&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Front End Developer&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Pawel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;details&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   name: &amp;#39;Pawel&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   age: 30,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   role: &amp;#39;Front End Developer&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-object-rest-spread&#34;&gt;Object Rest/Spread Properties proposal for ECMAScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://2ality.com/2016/10/rest-spread-properties.html&#34;&gt;ES2018: Rest/Spread Properties by Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;asynchronous-iteration-by-domenic-denicola&#34;&gt;Asynchronous Iteration by Domenic Denicola &lt;a href=&#34;#asynchronous-iteration-by-domenic-denicola&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Introduced in ECMAScript 2015, iterator interface returns an object with &lt;code&gt;{ value, done }&lt;/code&gt; keys via &lt;code&gt;next()&lt;/code&gt; interface. It is possible to use it with iterables that are known ahead of time. The &lt;code&gt;asyncIterator&lt;/code&gt; allows us to replicate the same functionality for asynchronous operations and returns a promise for a &lt;code&gt;{ value, done }&lt;/code&gt; pair.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createAsyncIterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;asyncIterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createAsyncIterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;async 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;async 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;asyncIterator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;asyncIterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Symbol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;asyncIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;asyncIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//   value: &amp;#39;async 1&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//   done: false,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;asyncIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//   value: &amp;#39;async 2&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//   done: false,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;asyncIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//   value: &amp;#39;undefined&amp;#39;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//   done: true,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-async-iteration&#34;&gt;Asynchronous iteration proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://2ality.com/2016/10/asynchronous-iteration.html&#34;&gt;ES2018: asynchronous iteration by Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ponyfoo.com/articles/javascript-asynchronous-iteration-proposal&#34;&gt;JavaScript Asynchronous Iteration Proposal by Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;promiseprototypefinally&#34;&gt;Promise.prototype.finally &lt;a href=&#34;#promiseprototypefinally&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A number of promise libraries have an implementation of the useful &lt;code&gt;finally()&lt;/code&gt; method. &lt;a href=&#34;http://bluebirdjs.com/docs/api/finally.html&#34;&gt;Bluebird&lt;/a&gt;, &lt;a href=&#34;https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback&#34;&gt;Q&lt;/a&gt;, and &lt;a href=&#34;https://github.com/cujojs/when/blob/master/docs/api.md#promisefinally&#34;&gt;when&lt;/a&gt; just to name few. It is now time for a native implementation — &lt;code&gt;Promise.prototype.finally&lt;/code&gt; is finally here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.github.com/users/pawelgrzybek&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;All fetched :-*&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-promise-finally&#34;&gt;Promise.prototype.finally proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;template-literal-revision-by-tim-disney&#34;&gt;Template Literal Revision by Tim Disney &lt;a href=&#34;#template-literal-revision-by-tim-disney&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Introduced in ECMAScript 2015, template literals come with some restrictions on escape sequences. This years version of the language solves all of these blockers. Currently valid escape sequences are replaced with a Unicode code point — invalid ones throw an early error. This proposal changes this behaviour by returning &lt;code&gt;undefined&lt;/code&gt; for invalid strings and keeping the original one accessible via &lt;code&gt;.raw&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// undefined
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;raw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// &amp;#34;\\Some string with invalid excape sequence \\u{55}&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;Some string with invalid excape sequence &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;u{55}`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tc39.github.io/proposal-template-literal-revision/&#34;&gt;Template Literal Revision proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;s-dotall-flag-for-regular-expressions-by-mathias-bynens&#34;&gt;s (dotAll) flag for regular expressions by Mathias Bynens &lt;a href=&#34;#s-dotall-flag-for-regular-expressions-by-mathias-bynens&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In regular expression patterns, the dot &lt;code&gt;.&lt;/code&gt; matches any character but it is getting a little bit problematic with astral and line terminator characters. The need for matching any character without resorting to cryptic workarounds is very common. Other languages like Java, C#, Pearl or PHP have got an implementation of this functionality. Now it is coming to JavaScript under the &lt;code&gt;s&lt;/code&gt; flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;sr&#34;&gt;/foo.bar/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;foo\nbar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// false
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;/foo.bar/s.test(&amp;#39;foo\nbar&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-regexp-dotall-flag&#34;&gt;s (dotAll) flag for regular expressions proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unicode-property-escapes-in-regular-expressions-by-mathias-bynens&#34;&gt;Unicode property escapes in regular expressions by Mathias Bynens &lt;a href=&#34;#unicode-property-escapes-in-regular-expressions-by-mathias-bynens&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently there is no way to access Unicode character properties natively in JavaScript regular expressions. This proposal adds Unicode property escapes via &lt;code&gt;\p{…}&lt;/code&gt; and &lt;code&gt;\P{…}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexGreekSymbol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/\p{Script=Greek}/u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;regexGreekSymbol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;π&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// → true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-regexp-unicode-property-escapes&#34;&gt;Unicode property escapes in regular expressions proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;regexp-named-capture-groups-by-gorkem-yakin-and-daniel-ehrenberg&#34;&gt;RegExp Named Capture Groups by Gorkem Yakin and Daniel Ehrenberg &lt;a href=&#34;#regexp-named-capture-groups-by-gorkem-yakin-and-daniel-ehrenberg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Numbered capture groups refer to a part of a string matched by regular expression — it works but it can get a little bit difficult to read and refactor. Named capture groups to the rescue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;re&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/(?&amp;lt;year&amp;gt;\d{4})-(?&amp;lt;month&amp;gt;\d{2})-(?&amp;lt;day&amp;gt;\d{2})/u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2019-01-29&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// result.groups.year === &amp;#39;2019&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// result.groups.month === &amp;#39;01&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// result.groups.day === &amp;#39;29&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// result[0] === &amp;#39;2019-01-29&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// result[1] === &amp;#39;2019&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// result[2] === &amp;#39;01&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// result[3] === &amp;#39;29&amp;#39;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-regexp-named-groups&#34;&gt;RegExp Named Capture Groups proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;regexp-lookbehind-assertions-by-gorkem-yakin-nozomu-katō-and-daniel-ehrenberg&#34;&gt;RegExp Lookbehind Assertions by Gorkem Yakin, Nozomu Katō and Daniel Ehrenberg &lt;a href=&#34;#regexp-lookbehind-assertions-by-gorkem-yakin-nozomu-kat%c5%8d-and-daniel-ehrenberg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently ECMAScript RegExp has lookahead assertions that check a string in a forward direction — it is missing a backward check though. This proposal adds this feature to the language via &lt;code&gt;(?&amp;lt;=…)&lt;/code&gt; and returns a result without capturing a checked string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;£10.53&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/(?&amp;lt;=\$)\d+(\.\d*)?/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// null
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;$10.53&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/(?&amp;lt;=\$)\d+(\.\d*)?/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [&amp;#34;10.53&amp;#34;, &amp;#34;.53&amp;#34;, index: 1, input: &amp;#34;$10.53&amp;#34;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-regexp-lookbehind&#34;&gt;RegExp Lookbehind Assertions proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 December</title>
      <link>https://pawelgrzybek.com/top-picks-2017-december/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-december/</guid>
      <description>&lt;h2 id=&#34;learn-react-fundamentals-and-advanced-patterns&#34;&gt;Learn React Fundamentals and Advanced Patterns &lt;a href=&#34;#learn-react-fundamentals-and-advanced-patterns&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.kentcdodds.com/learn-react-fundamentals-and-advanced-patterns-eac90341c9db&#34;&gt;https://blog.kentcdodds.com/learn-react-fundamentals-and-advanced-patterns-eac90341c9db&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kent C. Dodds just revealed a brand new series of courses about React. It is up to date and cover all that you need to know about Facebook&amp;rsquo;s framework. From component creation to advanced workflow using Redux. Well recommended resources.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;parcel&#34;&gt;Parcel &lt;a href=&#34;#parcel&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://parceljs.org/&#34;&gt;https://parceljs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Webpack is amazing but the only downside of it is overwhelming configuration. Parcel comes handy then. This is a new kid on the block — no configuration is required and somehow it resolves all dependencies for you in no time. Fingers crossed for future of this project.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;turbo&#34;&gt;Turbo &lt;a href=&#34;#turbo&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ericsimons/introducing-turbo-5x-faster-than-yarn-npm-and-runs-natively-in-browser-cc2c39715403&#34;&gt;https://medium.com/@ericsimons/introducing-turbo-5x-faster-than-yarn-npm-and-runs-natively-in-browser-cc2c39715403&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NPM client five time faster than it&amp;rsquo;s origin, smaller node_modules size and most interestingly works in the browser — Turbo. Another brand new tool that the dev community on Twitter went crazy about. Instant dependency resolution, robust caching mechanisms and works great with tiny and massive apps. Sounds nice. Time will show us if it is going to take over the popularity of good old npm and yarn.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;getting-your-site-ready-for-mobile-first-indexing&#34;&gt;Getting your site ready for mobile-first indexing &lt;a href=&#34;#getting-your-site-ready-for-mobile-first-indexing&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html&#34;&gt;https://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google changes indexing mechanism from desktop-first to mobile-first. We should expect a strong indexing bump for all websites that are mobile optimized and probably a significant drop for old-school, not maintained projects.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;an-update-on-better-ads&#34;&gt;An update on Better Ads &lt;a href=&#34;#an-update-on-better-ads&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2017/12/better-ads&#34;&gt;https://developers.google.com/web/updates/2017/12/better-ads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a good news for all publishers and everyday Google Chrome users. &lt;a href=&#34;https://www.betterads.org/&#34;&gt;Coalition for Better Ads&lt;/a&gt; is an organization that gather list of advices of non-destructive and more user friendly adds on the web. Google Chrome will implement a native add-blocker based on these rules since the January 15th.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;commandlinefucom&#34;&gt;commandlinefu.com &lt;a href=&#34;#commandlinefucom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.commandlinefu.com/index.php&#34;&gt;http://www.commandlinefu.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tons of great command line tricks and tips!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nectarjs--compiling-javascript-into-native-binaries-for-every-platform&#34;&gt;NectarJS : compiling JavaScript into Native Binaries for Every Platform &lt;a href=&#34;#nectarjs--compiling-javascript-into-native-binaries-for-every-platform&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codeburst.io/nectarjs-compiling-javascript-into-native-binaries-for-every-platform-2efb2083a4a&#34;&gt;https://codeburst.io/nectarjs-compiling-javascript-into-native-binaries-for-every-platform-2efb2083a4a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Worth to keep an eye on future of this one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We want to make JS a universal language for coding everything, everywhere. JS is present in every web browser; it’s more and more present in server side with NodeJS, and it is also used for IOT with Espruino. However, each platform has its own specifications. With NectarJS, we want to unify all of these in one solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-message-to-our-customers-about-iphone-batteries-and-performance&#34;&gt;A Message to Our Customers about iPhone Batteries and Performance &lt;a href=&#34;#a-message-to-our-customers-about-iphone-batteries-and-performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.apple.com/iphone-battery-and-performance/&#34;&gt;https://www.apple.com/iphone-battery-and-performance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apple published a response to customers with a clear explainer of the whole situation about deliberately slowing down a device when the older battery. Fair message Apple.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A look back at 2017</title>
      <link>https://pawelgrzybek.com/a-look-back-at-2017/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/a-look-back-at-2017/</guid>
      <description>&lt;p&gt;Once in a while I make an exception and use this blog to write some personal thoughts instead of trying to be a web geek. A year ago I published &lt;a href=&#34;https://pawelgrzybek.com/a-look-back-at-2016/&#34;&gt;&amp;ldquo;A look back at 2016&amp;rdquo;&lt;/a&gt; and now it is time to do the annual update. There are plenty of achievements that I would love to brag about and even more goals that I want to commit myself to next year.&lt;/p&gt;
&lt;h2 id=&#34;professional&#34;&gt;Professional &lt;a href=&#34;#professional&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being a part of a well-established company is a great opportunity to gain new experience and learn a lot, but I never thought that working for &lt;a href=&#34;https://www.enginecreative.co.uk/&#34;&gt;Engine Creative&lt;/a&gt; would give me so much. For the first time in my life I built a web app using &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt;, I learnt the basics of &lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel&lt;/a&gt;, created a VR experience using &lt;a href=&#34;https://aframe.io&#34;&gt;A-Frame&lt;/a&gt;, made an AR thing using &lt;a href=&#34;https://www.wikitude.com/&#34;&gt;Wikitude&lt;/a&gt; and went through my first steps to becoming a game developer using &lt;a href=&#34;https://unity3d.com/&#34;&gt;Unity&lt;/a&gt;. I embraced the basics of C# and paradigms related with its ecosystem. Having previous experience with &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; gave me a great starting point in building my first cross-browser mobile app using &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt;. Thanks a ton Engine Creative!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-12-30-1.jpg&#34;
  alt=&#34;Engine Creative team at Christmas dinner&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1200&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;My open source contribution exploded in 2017. &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;Siema&lt;/a&gt; — a lightweight and simple carousel in pure JavaScript that I released about a year ago just hit &lt;a href=&#34;https://github.com/pawelgrzybek/siema&#34;&gt;1800 stars on Github&lt;/a&gt;! &lt;a href=&#34;https://pawelgrzybek.com/snippet-generator/&#34;&gt;Snippet generator&lt;/a&gt; that I initially built just for myself as a tiny day-to-day helper turned out to be well adopted and  used by developers around the world. It has featured in top industry websites and has been recommended in multiple podcasts and tutorials. With around 15000 downloads my very own &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=pawelgrzybek.bimbo-theme&#34;&gt;Bimbo Theme&lt;/a&gt; for Visual Studio Code received some amazing feedback from users with visual impairments! It is such a cool feeling to know that it has helped thousands of people in resolving their everyday problems using open source.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-12-30-2.jpg&#34;
  alt=&#34;GitHub contribution graph in 2017&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;343&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Another reason for feeling proud is the website that you are on now. The number of unique visitors to this website went totally crazy. I&amp;rsquo;m really happy about some of the discussions that took place beneath some of my articles. It motivates me to keep writing good stuff for my readers. Thank you all.&lt;/p&gt;
&lt;p&gt;However there is no rose without a thorn — I had a few professional downfalls too. I experienced my first burnout and a strong experience of &amp;lsquo;imposter syndrome&amp;rsquo;. It happened in parallel with some big personal changes. Luckily I managed to give myself a little bit of time off and everything is back to normal. I realised that not every single tweet about a new JavaScript framework is worth of my attention. Not every single plugin needs to be added to my tool-chain, nor that every Medium article must be read. I&amp;rsquo;m back, I&amp;rsquo;m productive and happy.&lt;/p&gt;
&lt;h2 id=&#34;personal&#34;&gt;Personal &lt;a href=&#34;#personal&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s been a crazy time in my personal life! Lots of finished chapters just to begin a whole new book! The first months of the year were a nightmare! By the end of the year — I have never been happier in my whole life. Yes! I&amp;rsquo;m a truly happy man!&lt;/p&gt;
&lt;p&gt;I would like to introduce you to Zuzia. The most beautiful human being — inside and out. I&amp;rsquo;m a lucky man because she has decided to share her life with me and it&amp;rsquo;s probably the best thing that has ever happened to me. She is full of an incredible amount of passion and talent. She is caring, thoughtful, inspiring and on top of it — an incredibly beautiful woman! Thank you Zuzia :-*&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-12-30-3.jpg&#34;
  alt=&#34;Zuzia :-*&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1200&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;One of my biggest achievements was a big drop in weight. Exactly a year ago when I visited my parents over Christmas I was 10 kilograms (1.6 stone) heavier than I currently am. This is a huge difference. Physically I feel much better than ever before. I&amp;rsquo;m able to run a decent distance and cycle like never before. The &lt;a href=&#34;https://www.reddit.com/r/keto/wiki/faq&#34;&gt;Keto diet&lt;/a&gt; is not the best fit for all obese people, but I&amp;rsquo;m extremely glad that I managed to apply its rules to my daily routine and even start enjoying it.&lt;/p&gt;
&lt;p&gt;Another big realisation — my hidden passion for photography is slowly coming out of the shadows and I&amp;rsquo;m really pumped about taking more and more cool looking photos. Recently I invested in a really great &lt;a href=&#34;https://www.sony.co.uk/electronics/interchangeable-lens-cameras/ilce-7rm3&#34;&gt;Sony A7R III&lt;/a&gt; and a couple of still lenses (&lt;a href=&#34;https://www.sony.co.uk/electronics/camera-lenses/sel85f14gm&#34;&gt;85mm 1.4 G&lt;/a&gt; and &lt;a href=&#34;https://www.sony.co.uk/electronics/camera-lenses/sel35f28z&#34;&gt;35mm 2.8&lt;/a&gt; by Carl Zeiss). Photography is one of the most relaxing pursuits for my brain. I&amp;rsquo;m really glad that I&amp;rsquo;ve found it again.&lt;/p&gt;
&lt;p&gt;There was another incredibly big personal accomplishment this year — balance. I found a balance between my professional and my personal life. Balance between the things that I need and the things that would be nice to have. Balance between fast food and healthy quality food. Balance between having a crazy party and time spent with my girlfriend and best friends and a bottle of wine. It sounds trivial but actually it has made a big difference to my professional and personal sides.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-12-30-4.jpg&#34;
  alt=&#34;My best friends&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1200&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;in-2018-i-will&#34;&gt;In 2018 I will… &lt;a href=&#34;#in-2018-i-will&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post would be a bit lacking without some commitment to the goals that I&amp;rsquo;m planning for next year. I won&amp;rsquo;t slow down that&amp;rsquo;s for sure. I&amp;rsquo;m more than happy to list below a few of the things that are on my roadmap, but some of the more personal ones I&amp;rsquo;ll share with you at the right time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;learn a new programming language — C++ or Go&lt;/li&gt;
&lt;li&gt;move out to Birmingham and move my career forward&lt;/li&gt;
&lt;li&gt;Visit Sri Lanka&lt;/li&gt;
&lt;li&gt;take more photos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you all for reading. I wish you all wonderful 2018!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Change macOS user preferences via command line</title>
      <link>https://pawelgrzybek.com/change-macos-user-preferences-via-command-line/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/change-macos-user-preferences-via-command-line/</guid>
      <description>&lt;p&gt;The System Preferences window is not the only way to adjust user settings. Macs come with a &lt;a href=&#34;https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html&#34;&gt;&lt;code&gt;defaults&lt;/code&gt;&lt;/a&gt; command line interface that lets you read, write, and delete macOS user defaults. You may have even used it before — revealing hidden files in Finder is a popular snippet (hot tip: &lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;⇧&lt;/code&gt; + &lt;code&gt;.&lt;/code&gt; is quicker).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -string YES
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s take it apart to get familiar with the terminology used throughout this article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;defaults&lt;/code&gt; - interface&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write&lt;/code&gt; - method&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comapple.finder&lt;/code&gt; - domain&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AppleShowAllFiles&lt;/code&gt; - key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-string&lt;/code&gt; - type descriptor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YES&lt;/code&gt; - new value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may be scratching your head asking yourself — why the hell would I prefer to do it through the command line instead of using a nice looking GUI (graphical user interface) to change things? Two reasons! A command line way gives you access to things that you cannot change via graphical panels (toggling hidden files is a perfect example). The next one is even better — do you remember last time when you had to set up a new computer from scratch? Change the settings, add a desktop background, disable the screen saver, download your favourite software etc. How long do you spend on these tasks? Two hours? Four? Ten? I spent about five minutes. Boom!&lt;/p&gt;
&lt;h2 id=&#34;write-read-and-delete-defaults-settings&#34;&gt;Write, read and delete defaults settings &lt;a href=&#34;#write-read-and-delete-defaults-settings&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html&#34;&gt;&lt;code&gt;defaults&lt;/code&gt;&lt;/a&gt; interface isn&amp;rsquo;t complicated to use and comes equipped with just a few methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt; - prints current user settings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read-type&lt;/code&gt; - prints the type of given key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write&lt;/code&gt; - writes new settings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt; - deletes a key or a full domain&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domains&lt;/code&gt; - prints the full list of domains&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt; - searches all domain and keys for a given name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; - I&amp;rsquo;m sure you know what this does&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;domains--system-components-and-installed-apps&#34;&gt;Domains — system components and installed apps &lt;a href=&#34;#domains--system-components-and-installed-apps&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Printing all the domains via &lt;code&gt;defaults domains&lt;/code&gt; is a very helpful way to check what actually can be changed. Domains are objects that contain settings for a particular system component, installed application or a configuration &lt;code&gt;.plist&lt;/code&gt; file located in &lt;code&gt;/Library/Preferences/&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defaults domains
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;...com.apple.ActivityMonitor, com.apple.AddressBook, com.apple.Console, com.apple.DiskUtility, com.apple.FontBook, com.apple.Image_Capture, com.apple.Maps, com.apple.Messages, com.apple.Notes...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;making-the-output-of-domains-a-little-bit-cleaner&#34;&gt;Making the output of domains a little bit cleaner &lt;a href=&#34;#making-the-output-of-domains-a-little-bit-cleaner&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you (like me) are not a big fan of the comma separated output of &lt;code&gt;defaults domains&lt;/code&gt;, you can pipe it through a translate command to make the output much easier to read.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defaults domains | tr &#39;,&#39; &#39;\n&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;...
com.apple.ActivityMonitor
com.apple.AddressBook
com.apple.Console
com.apple.DiskUtility
com.apple.FontBook
com.apple.Image_Capture
com.apple.Maps
com.apple.Messages
com.apple.Notes
...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;a-basic-workflow-to-amend-user-defaults&#34;&gt;A basic workflow to amend user defaults &lt;a href=&#34;#a-basic-workflow-to-amend-user-defaults&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The idea is to traverse through any domains that we would like to change and compose a command that overrides the current setting. Let&amp;rsquo;s say we would like to find the command to change spell checking inside the Notes app. The workflow would look something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Print the settings for the notes app to find the right key.&lt;/li&gt;
&lt;li&gt;Check the value type for a given key.&lt;/li&gt;
&lt;li&gt;Write new settings.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;defaults read com.apple.Notes
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;defaults read-type com.apple.Notes NotesContinuousSpellCheckingEnabled
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;defaults write com.apple.Notes NotesContinuousSpellCheckingEnabled -bool true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see it is not that complicated. Bear in mind that some changes require you to restart an app or, occasionally, a full reboot of the operating system. A good idea is to close an app before changing any of its settings via the command line.&lt;/p&gt;
&lt;h2 id=&#34;the-way-to-find-the-domain--key-responsible-for-a-setting&#34;&gt;The way to find the domain &amp;amp; key responsible for a setting &lt;a href=&#34;#the-way-to-find-the-domain--key-responsible-for-a-setting&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Browsing through the output of a &lt;code&gt;defaults read&lt;/code&gt; command or browsing uncle Google for the correct domain and key can be a daunting task. Luckily you can easily find it out by yourself. Good old &lt;code&gt;diff&lt;/code&gt; to the rescue!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Save a state before a change.&lt;/li&gt;
&lt;li&gt;Make a change through GUI.&lt;/li&gt;
&lt;li&gt;Save a state after a change.&lt;/li&gt;
&lt;li&gt;Find the difference.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;defaults read &amp;gt; before
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;defaults read &amp;gt; after
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;diff before after
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reading output of the default &lt;code&gt;diff&lt;/code&gt; command isn&amp;rsquo;t exactly enjoyable so feel free to use any other diff tool. Time for a hot tip now! Visual Studio Code, apart from being really cool code editor, is a fantastic diff tool. Just have a look!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;code --diff before after
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-12-18-1.jpg&#34;
  alt=&#34;Visual Studio Code as a diff tool&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;780&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;my-defaults-tweaks&#34;&gt;My defaults tweaks &lt;a href=&#34;#my-defaults-tweaks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I actively maintain a list of settings that I change on my machine and you can find it on &lt;a href=&#34;https://github.com/pawelgrzybek/dotfiles/blob/master/setup-macos.sh&#34;&gt;my dotfiles repository&lt;/a&gt; on Github. It isn&amp;rsquo;t too complex so if you are looking for a real ninja-level defaults tweaks example look at &lt;a href=&#34;https://github.com/mathiasbynens/dotfiles/blob/master/.macos&#34;&gt;Mathias Bynens one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully this article helped you to embrace the power of the defaults command. Share in the comments below your favourite defaults tweaks and stay tuned as more tutorial articles like this one are coming soon. Until next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 November</title>
      <link>https://pawelgrzybek.com/top-picks-2017-november/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-november/</guid>
      <description>&lt;h2 id=&#34;the-book-of-shaders&#34;&gt;The Book of Shaders &lt;a href=&#34;#the-book-of-shaders&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://thebookofshaders.com/&#34;&gt;https://thebookofshaders.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Are you into a computer graphics? Are you into a math as well? If yes — this is a resource for you. I learned a lot from this book and I can&amp;rsquo;t believe that this amazing resource is available totally for free. Thanks to talented and super clever &lt;a href=&#34;https://twitter.com/patriciogv&#34;&gt;Patricio Gonzalez Vivo&lt;/a&gt; and &lt;a href=&#34;http://jenlowe.net/&#34;&gt;Jen Lowe&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This book is about the revolutionary computational technique, fragment shaders, that is taking digitally generated images to the next level. You can think of it as the equivalent of Gutenberg&amp;rsquo;s press for graphics. Fragment shaders give you total control over the pixels rendered on the screen at a super fast speed. This is why they&amp;rsquo;re used in all sort of cases, from video filters on cellphones to incredible 3D video games.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introducing-visual-studio-live-share&#34;&gt;Introducing Visual Studio Live Share &lt;a href=&#34;#introducing-visual-studio-live-share&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/blogs/2017/11/15/live-share&#34;&gt;https://code.visualstudio.com/blogs/2017/11/15/live-share&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A collaborative working in a real time is something that lots of digital tools implemented recently. Figma, Google Docs, iWork apps and many more. Today Microsoft is joining the bandwagon and announces Live Sharing. The demo video on the website is looking fantastic.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;animista&#34;&gt;Animista &lt;a href=&#34;#animista&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://animista.net/&#34;&gt;http://animista.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;O wow! Ana Travas created this amazing collection of smooth CSS animations ready to copy and paste into your project. This is such an cool resource!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dynamic-import&#34;&gt;Dynamic import() &lt;a href=&#34;#dynamic-import&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2017/11/dynamic-import&#34;&gt;https://developers.google.com/web/updates/2017/11/dynamic-import&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/mathias&#34;&gt;Mathias Bynens&lt;/a&gt; from V8 team explains a syntax of dynamic &lt;code&gt;import()&lt;/code&gt; in JavaScript and provides a great practical example. Clear comparison between static &lt;code&gt;import&lt;/code&gt; helped me a lot to grasp the new concept.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-intimidating-zero&#34;&gt;The Intimidating Zero &lt;a href=&#34;#the-intimidating-zero&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://m.signalvnoise.com/the-intimidating-zero-4d90fcdcc3b2&#34;&gt;https://m.signalvnoise.com/the-intimidating-zero-4d90fcdcc3b2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The sad truth about publishing nowadays.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-element-function&#34;&gt;CSS element() function &lt;a href=&#34;#css-element-function&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://iamvdo.me/en/blog/css-element-function&#34;&gt;https://iamvdo.me/en/blog/css-element-function&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article literally blown my mind! CSS element can draw an image based on a reference to &lt;code&gt;id&lt;/code&gt; of a HTML element. Again! Image from HTML element! Played around with it a little while and I&amp;rsquo;m shocked! Firefox only — gutted!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;take-control-of-your-scroll-customizing-pull-to-refresh-and-overflow-effects&#34;&gt;Take control of your scroll: customizing pull-to-refresh and overflow effects &lt;a href=&#34;#take-control-of-your-scroll-customizing-pull-to-refresh-and-overflow-effects&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2017/11/overscroll-behavior&#34;&gt;https://developers.google.com/web/updates/2017/11/overscroll-behavior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You know this situation when you have a multiple scrollable elements on a page — lets say a main content and chat-box in the corner of your Facebook window. How many times you left a cursor of a conversation window because you overscrolled it? CSS comes with some solution — &lt;code&gt;overscroll-behavior&lt;/code&gt;. Never again JavaScript hacks on a fixed navigations.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;getting-started-with-css-math-functions-level-4&#34;&gt;Getting Started With CSS Math Functions Level 4 &lt;a href=&#34;#getting-started-with-css-math-functions-level-4&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://webdesign.tutsplus.com/tutorials/mathematical-expressions-calc-min-and-max--cms-29735&#34;&gt;https://webdesign.tutsplus.com/tutorials/mathematical-expressions-calc-min-and-max&amp;ndash;cms-29735&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/DroidPinkman&#34;&gt;Dennis Gaebel&lt;/a&gt; published a great intro to the magic of CSS Math Functions Level 4. It allows us to clamp values in very intuitive way — no more messy CSS locks. Can&amp;rsquo;t wait to see this implementation across the browsers.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;memory-dont-forget-to-take-out-the-garbage&#34;&gt;Memory don&amp;rsquo;t forget to take out the garbage &lt;a href=&#34;#memory-dont-forget-to-take-out-the-garbage&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.katiefenn.co.uk/memory-dont-forget-to-take-out-the-garbage/&#34;&gt;http://www.katiefenn.co.uk/memory-dont-forget-to-take-out-the-garbage/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The best explanation of garbage collector, memory bloat and memory leaks ever. The reason of a problem and potential solutions presented in easy to digest JavaScript examples.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unity development on macOS with Visual Studio Code</title>
      <link>https://pawelgrzybek.com/unity-development-on-macos-with-visual-studio-code/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/unity-development-on-macos-with-visual-studio-code/</guid>
      <description>&lt;p class=&#34;update&#34;&gt;I published this article some time ago and Unity environment changed a lot. I wouldn&amp;rsquo;t recommend this path nowadays. Just download &lt;a href=&#34;https://www.visualstudio.com/vs/community/&#34;&gt;Visual Studio Community&lt;/a&gt;, switch default Unity IDE and enjoy very smooth integration.&lt;/p&gt;

&lt;p&gt;First things first — I&amp;rsquo;m not an experienced game developer. I just started my journey with Unity not long time ago and this article is a result of my early explorations that can be useful for newcomers.&lt;/p&gt;
&lt;p&gt;As a day to day front end developer I spend majority of the time in HTML, CSS and JavaScript. Jumping from one territory to a completely new environment is a fantastic experience but comes with lots of difficulties. My biggest issue on early Unity expedition wasn&amp;rsquo;t a C#, it wasn&amp;rsquo;t a convoluted interface, nor a crazy amount of 3D vector math. It was a MonoDevelop — the default IDE that Unity comes with and works smoothly out of the box. Lack of my favorite shortcuts, snippets system and absence of core functionalities that I use hundreds times a day. Visual Studio Code served me well for last few months and I couldn&amp;rsquo;t stand writing a single line of code without it. After a while it turned up that VSCode can be linked with Unity to take an advantage of all the things that it is best at. Let&amp;rsquo;s go through the whole process step by step.&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-code-and-c-extension&#34;&gt;Visual Studio Code and C# extension &lt;a href=&#34;#visual-studio-code-and-c-extension&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can download &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode from Microsoft website&lt;/a&gt; for free. Installation process is very straight forward. Out of the box it doesn&amp;rsquo;t support a language used by Unity — it can be easily solved by installing &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp&#34;&gt;C# extension&lt;/a&gt; from official marketplace.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-11-27-1.jpg&#34;
  alt=&#34;Visual Studio Code and C# extension&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1214&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;In the theory Unity works with three scripting languages — C#, JavaScript and Python-like Boo. &lt;a href=&#34;https://blogs.unity3d.com/2014/09/03/documentation-unity-scripting-languages-and-you/&#34;&gt;Ditching Boo&lt;/a&gt; has been announced long time ago and the same thing has been recently revealed about &lt;a href=&#34;https://blogs.unity3d.com/2017/08/11/unityscripts-long-ride-off-into-the-sunset/&#34;&gt;the future of Javascript-like UnityScript&lt;/a&gt;. C# is the future of this platform — much nicer ecosystem, tooling support and the bright future full of powerful features that wouldn&amp;rsquo;t be possible in the other language. If you have never worked with C# you don&amp;rsquo;t have to worry — &lt;a href=&#34;https://unity3d.com/learn/tutorials/s/scripting&#34;&gt;official documentation&lt;/a&gt; is a fantastic place to get you running.&lt;/p&gt;
&lt;h2 id=&#34;unity-and-its-external-script-editor&#34;&gt;Unity and it&amp;rsquo;s external script editor &lt;a href=&#34;#unity-and-its-external-script-editor&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite the time that it takes to download, Unity set up isn&amp;rsquo;t scary. I just would like to point your attention to the step where you can choose addition components that are going to be added during the installation process. As we are aiming to use it with Visual Studio Code, you can un-check MonoDevelop from the list of add-ons.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-11-27-2.jpg&#34;
  alt=&#34;Unity comes with MonoDevelop&#34;
  loading=&#34;lazy&#34;
  width=&#34;1424&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Now you can go to the Unity settings and change your &amp;ldquo;External Script Editor&amp;rdquo; to Visual Studio Code.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-11-27-3.jpg&#34;
  alt=&#34;Visual Studio code as a external script editor for Unity&#34;
  loading=&#34;lazy&#34;
  width=&#34;1068&#34;
  height=&#34;900&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;install-net-skd&#34;&gt;Install .NET SKD &lt;a href=&#34;#install-net-skd&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Command Line Interface for the .NET Software Development Kit is something that we need. Download the &lt;a href=&#34;https://www.microsoft.com/net/learn/get-started/macos&#34;&gt;latest version of the installer&lt;/a&gt; from Microsoft website and follow the installation guide.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-11-27-4.jpg&#34;
  alt=&#34;.NET SDK installation screen&#34;
  loading=&#34;lazy&#34;
  width=&#34;1464&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;brew-and-mono&#34;&gt;Brew and Mono &lt;a href=&#34;#brew-and-mono&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mono is the last ingredient that we need to install to have a smooth integration with VSCode &lt;a href=&#34;http://www.omnisharp.net/&#34;&gt;OmniSharp&lt;/a&gt;. The easiest way is to download it from Homebrew. If you don&amp;rsquo;t have it installed on your machine, you live your life wrong! &lt;a href=&#34;https://brew.sh/&#34;&gt;Visit a website&lt;/a&gt; to the missing package manager for macOS and follow the installation guide. Now the only thing that you need to run is…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install mono
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vscode--unity--3&#34;&gt;VSCode + Unity = &amp;lt;3 &lt;a href=&#34;#vscode--unity--3&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There seem to be a lot of steps but actual the whole setup takes just a few minutes. You can now enjoy smooth integration of Unity and your favourite code editor.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-11-27-5.gif&#34;
  alt=&#34;Unity integration into Visual Studio Code&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;600&#34;
/&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 October</title>
      <link>https://pawelgrzybek.com/top-picks-2017-october/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-october/</guid>
      <description>&lt;h2 id=&#34;microsoft-edge-for-ios-and-android-what-developers-need-to-know&#34;&gt;Microsoft Edge for iOS and Android: What developers need to know &lt;a href=&#34;#microsoft-edge-for-ios-and-android-what-developers-need-to-know&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blogs.windows.com/msedgedev/2017/10/05/microsoft-edge-ios-android-developer/#3ZUtLS8GXDAl1RbT.97&#34;&gt;https://blogs.windows.com/msedgedev/2017/10/05/microsoft-edge-ios-android-developer/#3ZUtLS8GXDAl1RbT.97&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And it is confirmed — Microsofts browser is coming to Android and iOS devices. WebKit engine provided by iOS in the WKWebView is going to be used on Apple devices — that was the obvious (and probably the only possible) choice. Androids engine is going to be Blink from the Chromium project. Not too late Edge?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;front-end-center--caching--cdns&#34;&gt;Front End Center — Caching &amp;amp; CDNs &lt;a href=&#34;#front-end-center--caching--cdns&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/_QeNLrkPvdI&#34;&gt;https://youtu.be/_QeNLrkPvdI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another free episode of Front End Center by Glen Maddern — next top explainer. Cache and CDNs networks is a todays subject. I can&amp;rsquo;t thank this dude enough for making this fantastic content!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;you-can-get-pretty-far-in-making-a-slider-with-just-html-and-css&#34;&gt;You can get pretty far in making a slider with just HTML and CSS &lt;a href=&#34;#you-can-get-pretty-far-in-making-a-slider-with-just-html-and-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/can-get-pretty-far-making-slider-just-html-css/&#34;&gt;https://css-tricks.com/can-get-pretty-far-making-slider-just-html-css/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chris Coyier collected a great list of tips to build a slider in pure HTML and CSS. Some of these things are not great supported, some of them require nasty vendor prefixes, some are pure browser hacks but overall experience of final result is really impressive! If this kind of a slider doesn&amp;rsquo;t give you what you need, don&amp;rsquo;t forget about my very own &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;Siema&lt;/a&gt; :P&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;firefox-quantum&#34;&gt;Firefox Quantum &lt;a href=&#34;#firefox-quantum&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/firefox/&#34;&gt;https://www.mozilla.org/en-US/firefox/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New generation of one of the most popular browsers is coming. Firefox Quantum apparently is twice as fast and requires 30% less energy than the most popular Google Chrome. Apart from internal changes it is entirely redesigned — screen shots available on demo website look really stunning. Will new Mozilla product shake the world of browsers again — I hope so! November 14th is the day — for now enjoy a beautiful presentation page.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;studio---the-worlds-most-powerful-screen-design-tool&#34;&gt;Studio - The world&amp;rsquo;s most powerful screen design tool &lt;a href=&#34;#studio---the-worlds-most-powerful-screen-design-tool&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.invisionapp.com/studio&#34;&gt;https://www.invisionapp.com/studio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Few years ago Sketch was born. Successful app that entirely changed the UI design game. Adobe XD joined the game. Competition didn&amp;rsquo;t slow down — fantastic Figma came out with tons of revolutionary features. These are design tools — not a great ones to create interactive prototypes tho. The market of prototyping tools is much more chock-full — Framer, Principle, Marvel, ProtoIO, Flinto, Origami, Napkin and many more. One of the first ones is InVision! Today this one is changing the game (hopefully). Studio — design tool with the whole power of prototyping functionality baked in. Personally I was waiting for a tool that allows me to do these two things in a single app (no, Adobe XD can&amp;rsquo;t do it well). And this promo video! WOW!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;welcome-adobe-xd-cc&#34;&gt;Welcome Adobe XD CC &lt;a href=&#34;#welcome-adobe-xd-cc&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://theblog.adobe.com/welcome-adobe-xd-cc/&#34;&gt;https://theblog.adobe.com/welcome-adobe-xd-cc/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Boom! Just wrote about InVision Studio just to read another big announcement. Adobe XD is officially out od beta and you can have it for £9.98/month in new Single App plan.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;documenting-the-web-together&#34;&gt;Documenting the Web together &lt;a href=&#34;#documenting-the-web-together&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blogs.windows.com/msedgedev/2017/10/18/documenting-web-together-mdn-web-docs/&#34;&gt;https://blogs.windows.com/msedgedev/2017/10/18/documenting-web-together-mdn-web-docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WOW! Microsoft, Mozilla, Google, the W3C and Samsung team up to make MDN Web Docs the best place for web developers to learn and share information about building for the open web. Isn&amp;rsquo;t that fascinating? Finally something in web dev gets easier.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chrome-dev-summit-2017&#34;&gt;Chrome Dev Summit 2017 &lt;a href=&#34;#chrome-dev-summit-2017&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNYkxOF6rcICUD5nBfRdAR6Fveosnqa5m&#34;&gt;https://www.youtube.com/playlist?list=PLNYkxOF6rcICUD5nBfRdAR6Fveosnqa5m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If not the most important, probably one of the most important dev oriented events for web developers just happened in San Francisco this month. This youtube playlist contains all the talks from this two days event and some of them are mind blowing. I&amp;rsquo;m really excited about the future of WebVR, features and adoption of brand new templating library called lit-HTML and the strong global focus on accessibility and performance. News about PWAs on top of a Wordpress sounds revolutionary too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From callback hell, through promises to async functions</title>
      <link>https://pawelgrzybek.com/from-a-callback-hell-through-promises-to-async-functions/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/from-a-callback-hell-through-promises-to-async-functions/</guid>
      <description>&lt;p&gt;Working with asynchronous JavaScript has changed a lot in the last few years. When &lt;code&gt;Promise&lt;/code&gt;s were introduced to ECMAScript a few years ago life became a dream. Two years later, the &lt;code&gt;async&lt;/code&gt; function was added to the specification — I still can&amp;rsquo;t believe how nice and easy to read it is! What&amp;rsquo;s next? Time will tell, but now let&amp;rsquo;s review what we went through to get where we are. You have to agree — a random Chuck Norris joke generator is the perfect demo program!&lt;/p&gt;
&lt;h2 id=&#34;callbacks&#34;&gt;Callbacks &lt;a href=&#34;#callbacks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you joined the JS stage a few years ago or earlier you&amp;rsquo;ll remember the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)&#34;&gt;doom&lt;/a&gt; that you could easily end up in by nesting callbacks. Luckily those days are over. A simple &lt;code&gt;XMLHttpRequest&lt;/code&gt; request fetches a piece of JSON from an API and it isn&amp;rsquo;t hard to read (yet). Imagine a situation where you have to call another request based on the result of the first one — I don&amp;rsquo;t miss that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getRandomJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// show loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.icndb.com/jokes/random/1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;responseType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// print a joke
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// hide loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onerror&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;onerror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// print an error
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Error :-(&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// hide loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;the-promise-of-a-better-future&#34;&gt;The promise of a better future &lt;a href=&#34;#the-promise-of-a-better-future&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An asynchronous operation takes some time and the only thing that we can be assured of ahead of time is the fact that it is going to be resolved or rejected. This could easily be the definition of a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;JavaScript &lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;. It landed in the ECMAScript spec in 2015 and totally revolutionized the way developers handle asynchronous programs. Promised-based methods (the ones that return the promise) are slowly replacing callback-based equivalents and &lt;code&gt;fetch()&lt;/code&gt;, used in example below, is one of them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getRandomJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// show loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.icndb.com/jokes/random/1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// print a joke
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;c1&#34;&gt;// hide loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// print an error
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Error: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;c1&#34;&gt;// hide loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Living on the bleeding edge? Safari 11, Google Chrome 63, EDGE and Node under the &lt;code&gt;-​-harmony-promise-finally&lt;/code&gt; flag comes with the additional handler &lt;code&gt;finally()&lt;/code&gt;. Keep it DRY!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getRandomJoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// show loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.icndb.com/jokes/random/1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// print a joke
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// print an error
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Error: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// hide loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;async-code-sync-look&#34;&gt;Async code, sync look &lt;a href=&#34;#async-code-sync-look&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In 2017 ECMAScript introduced another game changer — the &lt;a href=&#34;https://tc39.github.io/ecmascript-asyncawait/&#34;&gt;Async Function&lt;/a&gt;. It makes working with asynchronous operations very intuitive because it is written in the same way as synchronous code with two tiny nuances — an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&#34;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt; keyword in front of a function declaration and an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&#34;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; operator as a promise prefix. Apart from it just being syntactically much nicer to read, it comes with &lt;a href=&#34;https://mathiasbynens.be/notes/async-stack-traces&#34;&gt;optimizations in JavaScript engines&lt;/a&gt; as well. Based on the current &lt;a href=&#34;https://caniuse.com/#feat=async-functions&#34;&gt;browser support&lt;/a&gt; and the help that &lt;a href=&#34;https://github.com/babel/babel-preset-env&#34;&gt;babel-preset-env&lt;/a&gt; can offer this is my preferred way of working with asynchronous JavaScript.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getRandomJoke&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// show loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.icndb.com/jokes/random/1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// print a joke
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;joke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// print an error
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Error: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// hide loading screen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loading--active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Hopefully you liked this quick time travel through asynchronous programming in JavaScript. The changes introduced in latest versions of the language are really exciting and I am really looking forward to see what&amp;rsquo;s next! Until next time pals!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Return multiple elements from a component with React 16</title>
      <link>https://pawelgrzybek.com/return-multiple-elements-from-a-component-with-react-16/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/return-multiple-elements-from-a-component-with-react-16/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://reactjs.org/blog/2017/09/26/react-v16.0.html&#34;&gt;React 16 is here&lt;/a&gt; and it brings lots of exciting changes. One of the most requesting features around React community has been &lt;a href=&#34;https://github.com/facebook/react/issues/2127&#34;&gt;returning multiple elements&lt;/a&gt; from a component&amp;rsquo;s render method. Skipping wrapper tag is definitely something that developers are happy about — popularity of &lt;a href=&#34;https://twitter.com/pawelgrzybek/status/913697990849826816&#34;&gt;my tweet&lt;/a&gt; proves this point.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The basic way is to return an array of elements. To avoid warnings you have to add a key to each element, although it may not be needed in the future.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;To avoid array notation and manually added keys to each of the element, you can use an &lt;code&gt;Aux&lt;/code&gt; helper function that simply returns all its children. Like so…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Aux&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Aux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Aux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;UPDATE!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html&#34;&gt;React v16.2&lt;/a&gt; introduced another way of returning multiple elements. &lt;code&gt;React.Fragment&lt;/code&gt; abstracted in JSX way via just an empty tag. Bare in mind that JSX syntax doesn&amp;rsquo;t support attributes — use a verbose way if you need so. No extra components needed, no array notation, no keys. Nice!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// if your build tool goes crazy, do this…
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;React.Fragment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiple&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;❤️&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;React.Fragment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Nice! Isn&amp;rsquo;t it?! Find out about more really cool features added in the new version of React in this &lt;a href=&#34;https://egghead.io/courses/leverage-new-features-of-react-16&#34;&gt;great Egghead course&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/nikgraf&#34;&gt;Nik Graf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Did you find it helpful? Consider to hit the share button below to make me more popular than I am! Have a great day you all 🥑&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 September</title>
      <link>https://pawelgrzybek.com/top-picks-2017-september/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-september/</guid>
      <description>&lt;h2 id=&#34;so-you-need-a-css-utility-library&#34;&gt;So you need a CSS utility library? &lt;a href=&#34;#so-you-need-a-css-utility-library&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/need-css-utility-library/&#34;&gt;https://css-tricks.com/need-css-utility-library/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chris Coyier throws a bunch of insights about utility libraries and strategies of using them. Personally I like writing CSS and I always prefer to do it by myself although I can see a need for having one of them at some point. The second part of this article is a long list of the most popular tools of this type. I can&amp;rsquo;t get the point of mixing one of them with currently existing CSS base. Totally agreed with Chris about it…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I can&amp;rsquo;t tell you if you&amp;rsquo;ll love working with an all in utility library approach like this or not, but long-term, I imagine you&amp;rsquo;ll be happier picking either all-in or not-at-all than a tweener approach.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;authentication-still-sucks&#34;&gt;Authentication Still Sucks &lt;a href=&#34;#authentication-still-sucks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rdegges.com/2017/authentication-still-sucks/&#34;&gt;https://www.rdegges.com/2017/authentication-still-sucks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I learned tons about authentication, authorization, and user management from &lt;a href=&#34;https://twitter.com/rdegges&#34;&gt;Randall Degges&lt;/a&gt;. In this essay he tells the story behind Stormpath (previous employer) being acquired and lunched as a &lt;a href=&#34;https://developer.okta.com/&#34;&gt;Okta Identity Platform&lt;/a&gt;. With current pricing plan there is no better solution to handle authentication, authorization, and user management in a secure way.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sketch--libraries-beta&#34;&gt;Sketch — Libraries (Beta) &lt;a href=&#34;#sketch--libraries-beta&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sketchapp.com/docs/libraries/&#34;&gt;https://sketchapp.com/docs/libraries/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sketch 47 comes with another revolutionary feature called Libraries. If you are a Sketch user, it won&amp;rsquo;t take long to master new version. The concept is essentially the same as using symbols — the only difference is the fact that symbols are no longer attached to a single document and become global. If the file is marked as a library you can drop it to your server or local network and use with all team members. It will make projects well synced and consistent. I&amp;rsquo;m sure the players of big design teams will benefit from this feature. &lt;a href=&#34;https://medium.com/ux-power-tools/sketch-libraries-how-they-work-and-the-crazy-stuff-you-can-do-with-them-fc10f142ac80&#34;&gt;This Medium article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/uxpowertools&#34;&gt;Jon Moore&lt;/a&gt; is a great primer to this feature.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lazy-async-svg-rasterisation&#34;&gt;Lazy async SVG rasterisation &lt;a href=&#34;#lazy-async-svg-rasterisation&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jakearchibald.com/2017/lazy-async-svg/&#34;&gt;https://jakearchibald.com/2017/lazy-async-svg/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jake Archibald wrote a nice primer to bleeding edge &lt;code&gt;createImageBitmap&lt;/code&gt; API that now allows to asynchronously render expensive SVG images off the main thread. Short and nice intro (requires Chrome Canary and &lt;code&gt;chrome://flags/#enable-experimental-canvas-features&lt;/code&gt; flag enabled).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;using-es-modules-natively-in-nodejs&#34;&gt;Using ES modules natively in Node.js &lt;a href=&#34;#using-es-modules-natively-in-nodejs&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://2ality.com/2017/09/native-esm-node.html&#34;&gt;http://2ality.com/2017/09/native-esm-node.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Native support for ECMAScript modules in Node should be dropped with version 10 LTS. Thanks to &lt;a href=&#34;https://twitter.com/bradleymeck&#34;&gt;Bradley Farias&lt;/a&gt; we may play around with a current version of Node by passing a flag &lt;code&gt;--experimental-modules&lt;/code&gt;. On this article &lt;a href=&#34;https://twitter.com/rauschma&#34;&gt;Dr. Axel Rauschmayer&lt;/a&gt; explains technical details and provides an example.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sublime-text-30&#34;&gt;Sublime Text 3.0 &lt;a href=&#34;#sublime-text-30&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sublimetext.com/blog/articles/sublime-text-3-point-0&#34;&gt;https://www.sublimetext.com/blog/articles/sublime-text-3-point-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally! After years of waiting and lots of people migrating to other tools like an Atom or my favorite Visual Studio Code — Sublime Text just officially hit version 3. The upgrade costs next to noting (in majority of cases it is totally for free) and the brand new license costs just 80$. Made from grounds up, redesigned with brand new website and documentation! Worth dropping money for!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;finally-the-promiseprototypefinally-is-available&#34;&gt;Finally the Promise.prototype.finally() is available &lt;a href=&#34;#finally-the-promiseprototypefinally-is-available&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hospodarets.com/promise.prototype.finally&#34;&gt;https://hospodarets.com/promise.prototype.finally&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Serg Hospodarets explains an always missing bit of Promise API that is going to be merged with the ECMAScript 2017 spec (hopefully) — the &lt;code&gt;finally()&lt;/code&gt; method. Thanks for writing it Serg — very helpful!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;relicensing-react-jest-flow-and-immutablejs&#34;&gt;Relicensing React, Jest, Flow, and Immutable.js &lt;a href=&#34;#relicensing-react-jest-flow-and-immutablejs&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/&#34;&gt;https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yes! React, Jest, Flow and Immutable under MIT license.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;relicensing-the-graphql-specification&#34;&gt;Relicensing the GraphQL specification &lt;a href=&#34;#relicensing-the-graphql-specification&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.facebook.com/posts/121714468491809/relicensing-the-graphql-specification/&#34;&gt;https://code.facebook.com/posts/121714468491809/relicensing-the-graphql-specification/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And there you go! GraphQL is joining the bag of MIT frameworks!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;web-truths-css-is-not-real-programming&#34;&gt;Web truths: CSS is not real programming &lt;a href=&#34;#web-truths-css-is-not-real-programming&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://christianheilmann.com/2017/09/19/web-truths-css-is-not-real-programming/&#34;&gt;https://christianheilmann.com/2017/09/19/web-truths-css-is-not-real-programming/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A CSS language through the prism of programming language — very subjective opinion and full of good points article by Christian Heilmann. I really like the way how the author highlights the core principle of CSS language and what was the aim of creating it in the first place.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;designing-websites-for-iphone-x&#34;&gt;Designing Websites for iPhone X &lt;a href=&#34;#designing-websites-for-iphone-x&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://webkit.org/blog/7929/designing-websites-for-iphone-x/&#34;&gt;https://webkit.org/blog/7929/designing-websites-for-iphone-x/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very specific bump on new iPhoneX makes designers life a little bit more difficult. There needs to be some extra padding accommodated around a sensor housing. Webkit (Safari engine) creators come with some helpful explanation and introduce new &lt;code&gt;constant()&lt;/code&gt; CSS function. Dig deeper into the technical aspects and practical use case in this article.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;leverage-new-features-of-react-16&#34;&gt;Leverage New Features of React 16 &lt;a href=&#34;#leverage-new-features-of-react-16&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://egghead.io/courses/leverage-new-features-of-react-16&#34;&gt;https://egghead.io/courses/leverage-new-features-of-react-16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nikgraf&#34;&gt;Nik Graf&lt;/a&gt; released a quick 17 minutes long series to explain the new features added to 16 version of Facebooks framework. It comes with lots of great goodies. My favorite one is definitely ability to &lt;a href=&#34;https://twitter.com/pawelgrzybek/status/913697990849826816&#34;&gt;return multiple objects from single component&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;react---a-javascript-library-for-building-user-interfaces&#34;&gt;React - A JavaScript library for building user interfaces &lt;a href=&#34;#react---a-javascript-library-for-building-user-interfaces&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;https://reactjs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This month belongs to React! Brand new website design by &lt;a href=&#34;https://twitter.com/brian_d_vaughn&#34;&gt;Brian Vaughn&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/joecritch&#34;&gt;Joe Critchley&lt;/a&gt; is looking sexy and more legible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thanks to BrowserStack</title>
      <link>https://pawelgrzybek.com/thanks-to-browserstack/</link>
      <pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/thanks-to-browserstack/</guid>
      <description>&lt;p&gt;Have you ever built a JavaScript library that works great across multiple browsers, platforms and devices? If yes — you know exactly how hard it can be. If no — trust me, this shit can be hard. As a creator and the only maintainer of a popular carousel library &lt;a href=&#34;https://github.com/pawelgrzybek/siema&#34;&gt;Siema&lt;/a&gt; I have spent a crazy amount of time jumping from one device to another, juggling operating systems and browser versions. Having a tool that automates and simplifies this process would be irreplaceable.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-09-23-1.jpg&#34;
  alt=&#34;BrowserStack for Open Source account&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1073&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;At this point I would love to thank &lt;a href=&#34;https://www.browserstack.com&#34;&gt;BrowserStack&lt;/a&gt; team for giving me a free access to Automate Pro account to support my open source contribution! It allows me to seamlessly test my local project on hundreds of real devices with ease! Thanks again for your amazing support and for your love to open source! You rock!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 August</title>
      <link>https://pawelgrzybek.com/top-picks-2017-august/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-august/</guid>
      <description>&lt;h2 id=&#34;hate-comic-sans-you-dont-know-anything-about-typography&#34;&gt;Hate Comic Sans? You don’t know anything about typography &lt;a href=&#34;#hate-comic-sans-you-dont-know-anything-about-typography&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.prototypr.io/you-hate-comic-sans-you-dont-know-anything-about-typography-5133fbd4c8c4&#34;&gt;https://blog.prototypr.io/you-hate-comic-sans-you-dont-know-anything-about-typography-5133fbd4c8c4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you hate Comic Sans? Of course you do. Do you have a strong opinion about it or just follow the crowd? Thomas Payne shares his perspective and gives tons of interesting insights and facts about the most disliked typeface ever. I found extremely interesting the words of Comic Sans author…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vincent Connare, designer of Comic Sans, said, “if you love Comic Sans, you don’t know anything about typography. But if you hate Comic Sans, then you don’t know anything about typography either… and you should get another hobby”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;front-end-center--crafting-webfont-fallbacks&#34;&gt;Front End Center — Crafting Webfont Fallbacks &lt;a href=&#34;#front-end-center--crafting-webfont-fallbacks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/tO01ul1WNW8&#34;&gt;https://youtu.be/tO01ul1WNW8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Glen Maddern (the guy behind &lt;a href=&#34;https://frontend.center/&#34;&gt;Front End Center&lt;/a&gt;) recorded another video that is the best explainer of a subject ever made. This episode is all about webfonts fallback. Very detailed introduction that highlights all potential issues, list of potential solutions and practical implementation using &lt;a href=&#34;https://fontfaceobserver.com/&#34;&gt;Font Face Observer&lt;/a&gt;. All the videos by this dude that I saw so far are top noche. I have to consider his support and apply for premium plan of Front End Center.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;compression-decompressed-or-making-things-smaller-a-visual-introduction&#34;&gt;Compression Decompressed or, Making Things Smaller: A Visual Introduction &lt;a href=&#34;#compression-decompressed-or-making-things-smaller-a-visual-introduction&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://unwttng.com/compression-decompressed&#34;&gt;https://unwttng.com/compression-decompressed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great visual guide to compression, compression ratio and Kolmogorov complexity by &lt;a href=&#34;https://twitter.com/unwttng&#34;&gt;Jack Preston&lt;/a&gt;. Very well presented! Great sense of humor.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;unityscripts-long-ride-off-into-the-sunset&#34;&gt;UnityScript’s long ride off into the sunset &lt;a href=&#34;#unityscripts-long-ride-off-into-the-sunset&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blogs.unity3d.com/2017/08/11/unityscripts-long-ride-off-into-the-sunset/&#34;&gt;https://blogs.unity3d.com/2017/08/11/unityscripts-long-ride-off-into-the-sunset/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The time is now! Unity decided to ditch JavaScript-like syntax (to be totally correct — UnityScript). There is just 0.8% of developers who rely on this syntax. There is no better time to learn C# fellaz :) As a developer very new to Unity ecosystem I started my journey with C# few weeks back and actually it is very enjoyable language to work with! Good luck guys!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;using-es2017-async-functions&#34;&gt;Using ES2017 Async Functions &lt;a href=&#34;#using-es2017-async-functions&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/using-es2017-async-functions/&#34;&gt;https://css-tricks.com/using-es2017-async-functions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the best comparison of callbacks, promises and async / await functions in JavaScript. Worth to have a quick read for all of you who struggle with an asynchronous code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Observer Pattern in JavaScript explained</title>
      <link>https://pawelgrzybek.com/the-observer-pattern-in-javascript-explained/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/the-observer-pattern-in-javascript-explained/</guid>
      <description>&lt;p&gt;The Observer Pattern is a popular pattern used across all sorts of JavaScript applications. The instance (subject) maintains a collection of objects (observers) and notifies them all when changes to the state occurs. Does that sound difficult to you? Yes, it was upsetting me as well when I came across this pattern for a first time. A tiny practical example may help you to grasp the concept.&lt;/p&gt;
&lt;p&gt;Imagine that you have to update multiple elements simultaneously when some event occurs (typing inside the &lt;code&gt;input&lt;/code&gt; field perhaps). You need to be able to add more (subscribe) elements that react (observe) to a change of an input value. Removing subscriptions (unsubscribe) can be handy if you no longer need to broadcast state changes to a particular object. Do you get the idea now? Let&amp;rsquo;s code it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// define a class
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Observable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// each instance of the Observer class
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// starts with an empty array of things (observers)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// that react to a state change
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// add the ability to subscribe to a new object / DOM element
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// essentially, add something to the observers array
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// add the ability to unsubscribe from a particular object
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// essentially, remove something from the observers array
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;unsubscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscriber&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subscriber&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// update all subscribed objects / DOM elements
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// and pass some data to each of them
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;observer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The usecase example goes like this…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// some DOM references
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-p1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-p2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-p3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// some actions to add to the observers array
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;updateP1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;updateP2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;updateP3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// instantiate new Observer class
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;headingsObserver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// subscribe to some observers
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;headingsObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateP1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;headingsObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateP2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;headingsObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateP3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// notify all observers about new data on event
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;keyup&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;headingsObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With a little help of a few control buttons (added to make the demo more interactive), it gives you the power to do cool things like this with just a few lines of code. Isn&amp;rsquo;t it nice?&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This very simplified version of the observer pattern can save you from downloading some costly frameworks like Vue or React. If you are looking for a detailed explanation of it, I can&amp;rsquo;t recommend enough &lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript&#34;&gt;&amp;ldquo;Learning JavaScript Design Patterns&amp;rdquo;&lt;/a&gt; by Addy Osmani. Classic! Sometimes &amp;ldquo;Publication / Subscription&amp;rdquo; is used interchangeably to describe this pattern, although &lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript&#34;&gt;there are some minor differences&lt;/a&gt; between them and Addy points them all out in his book. Hopefully this article helped you out. Until next time curious people :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 July</title>
      <link>https://pawelgrzybek.com/top-picks-2017-july/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-july/</guid>
      <description>&lt;h2 id=&#34;everything-you-ever-wanted-to-know-about-authentication-in-nodejs&#34;&gt;Everything You Ever Wanted To Know About Authentication in Node.js &lt;a href=&#34;#everything-you-ever-wanted-to-know-about-authentication-in-nodejs&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/yvviEA1pOXw&#34;&gt;https://youtu.be/yvviEA1pOXw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not any new, but very helpful to understand authentication process between the client and node server. &lt;a href=&#34;https://twitter.com/rdegges&#34;&gt;Randall Degges&lt;/a&gt; explains everything really clearly step by step.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;if-you-have-a-disability-whats-the-hardest-thing-about-browsing-the-web&#34;&gt;If you have a disability, what&amp;rsquo;s the hardest thing about browsing the web? &lt;a href=&#34;#if-you-have-a-disability-whats-the-hardest-thing-about-browsing-the-web&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/captainsafia/status/871056480799162368&#34;&gt;https://twitter.com/captainsafia/status/871056480799162368&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very insightful discussion on the twitter under Safia Abdallas tweet. Eye opening comments present that accessibility is a big concern of an internet nowadays. Some &lt;a href=&#34;https://axesslab.com/accessibility-according-to-pwd/&#34;&gt;helpful&lt;/a&gt; &lt;a href=&#34;https://hugogiraudel.com/2017/07/02/accessibility-feedback/&#34;&gt;people&lt;/a&gt; summarized this discussion into meaningful categories.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-fullstack-tutorial-for-graphql&#34;&gt;The Fullstack Tutorial for GraphQL &lt;a href=&#34;#the-fullstack-tutorial-for-graphql&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.howtographql.com/&#34;&gt;https://www.howtographql.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not a back end developer and I normally don&amp;rsquo;t think about the API design to work nicely with front-end part of a project. Very recently I entered the world of Node.js development seriously and I embraced things like REST API, requests, responses, headers etc. A moment after that I came across this amazing resource about GraphQL. I understand it! It is superb! Can&amp;rsquo;t recommend this series of free tutorials enough.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;flash--the-future-of-interactive-content&#34;&gt;Flash &amp;amp; the future of interactive content &lt;a href=&#34;#flash--the-future-of-interactive-content&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blogs.adobe.com/conversations/2017/07/adobe-flash-update.html&#34;&gt;https://blogs.adobe.com/conversations/2017/07/adobe-flash-update.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Steve Jobs was right — there is no future for Flash content on the web and Adobe just confirmed that. I took them a while. The official notice provides a date — end of 2020 — when Adobe Flash support will be absolutely discontinued. Companies like &lt;a href=&#34;https://webkit.org/blog/7839/adobe-announces-flash-distribution-and-updates-to-end/&#34;&gt;Apple&lt;/a&gt;, &lt;a href=&#34;https://developers.facebook.com/blog/post/2017/07/25/Games-Migration-to-Open-Web-Standards/&#34;&gt;Facebook&lt;/a&gt;, &lt;a href=&#34;https://www.blog.google/products/chrome/saying-goodbye-flash-chrome/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://blogs.windows.com/msedgedev/2017/07/25/flash-on-windows-timeline/#YU0hKCkgu6313YzR.97&#34;&gt;Microsoft&lt;/a&gt; and &lt;a href=&#34;https://blog.mozilla.org/futurereleases/2017/07/25/firefox-roadmap-flash-end-life/&#34;&gt;Mozzilla&lt;/a&gt; put few words for their products users as well.&lt;/p&gt;
&lt;h2 id=&#34;figma-20-now-with-prototyping-and-developer-handoff&#34;&gt;Figma 2.0: Now with Prototyping and Developer Handoff &lt;a href=&#34;#figma-20-now-with-prototyping-and-developer-handoff&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.figma.com/figma-2-0-now-with-prototyping-and-developer-handoff-1b309a5d025c&#34;&gt;https://blog.figma.com/figma-2-0-now-with-prototyping-and-developer-handoff-1b309a5d025c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I heard of &lt;a href=&#34;https://www.figma.com/&#34;&gt;Figma&lt;/a&gt; for a first time just few months ago and today I came across another big news about this product! The biggest competitor for my beloved &lt;a href=&#34;https://www.sketchapp.com/&#34;&gt;Sketch&lt;/a&gt; just hit a version 2.0. The development pace of this company is impressive. Brand new prototyping mode is definitely a handy feature having it built into the same tool that we use to design beautiful things. Developer hand-off is a massive time saver (from front end developer perspective). You can watch a quick presentation of both new features on great videos made by &lt;a href=&#34;https://twitter.com/stolinski&#34;&gt;Scott Tolinski&lt;/a&gt; (&lt;a href=&#34;https://youtu.be/ex9rP3SEHW4&#34;&gt;prototype mode&lt;/a&gt; and &lt;a href=&#34;https://youtu.be/tVPHB7gOAGs&#34;&gt;dev hando-ff&lt;/a&gt;). I&amp;rsquo;m looking forward to play around with new features and you will definitely hear more about it from me shortly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I built a thing - Bimbo Theme for Visual Studio Code</title>
      <link>https://pawelgrzybek.com/i-built-a-thing-bimbo-theme-for-visual-studio-code/</link>
      <pubDate>Sat, 15 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-built-a-thing-bimbo-theme-for-visual-studio-code/</guid>
      <description>&lt;p class=&#34;update&#34;&gt;I changed the name of this theme to Gatito Theme. It is still in active development and you can download it from here: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=pawelgrzybek.gatito-theme&#34;&gt;Gatito Theme on Visual Studio Code Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After a long romance with &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; and the ultra-hackable &lt;a href=&#34;https://packagecontrol.io/packages/Boxy%20Theme&#34;&gt;Boxy Theme&lt;/a&gt; I switched to Visual Studio Code by Microsoft. I love it! Functionality-wise there is nothing missing. Visually — yyyhhh. Fortunately some time ago VS Code got a set of features that allows us to customise almost every single aspect of the user interface. It opened tons of opportunities for theme developers to create beautiful looking colour schemes.&lt;/p&gt;
&lt;p&gt;But I still love the Ocean Boxy theme on my Sublime Text more than anything else. I couldn&amp;rsquo;t find anything similar in the &lt;a href=&#34;https://marketplace.visualstudio.com/&#34;&gt;Marketplace&lt;/a&gt; so I decided to build one.&lt;/p&gt;
&lt;h2 id=&#34;hello-bimbo&#34;&gt;Hello Bimbo &lt;a href=&#34;#hello-bimbo&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bimbo is a modern and minimalistic looking theme with a syntax scheme heavily inspired by the &lt;a href=&#34;https://github.com/voronianski/oceanic-next-color-scheme&#34;&gt;Oceanic Next Color Scheme&lt;/a&gt; for Sublime Text. Every single UI element has been restyled using the recently added options applicable to the &lt;code&gt;workbench.colorCustomizations&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=pawelgrzybek.bimbo-theme&#34;&gt;download it today from the official Microsoft Marketplace&lt;/a&gt; — totally for free! From a developer for developers! Feedback much appreciated. Thanks &lt;a href=&#34;https://twitter.com/marktay10r&#34;&gt;Mark&lt;/a&gt; for creating a cool icon for me. Enjoy and have a fantastic day.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-07-15-1.jpg&#34;
  alt=&#34;Bimbo Theme - main view&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1016&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-07-15-2.jpg&#34;
  alt=&#34;Bimbo Theme - colors palette&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;340&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-07-15-3.jpg&#34;
  alt=&#34;Bimbo Theme - logo (thanks Mark Taylor)&#34;
  loading=&#34;lazy&#34;
  width=&#34;1071&#34;
  height=&#34;300&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-07-15-4.jpg&#34;
  alt=&#34;Bimbo Theme - layout variations&#34;
  loading=&#34;lazy&#34;
  width=&#34;1586&#34;
  height=&#34;1353&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O wow! I really considered great contrast building this theme but I didn&amp;rsquo;t realize that I built something that can be actually really helpful. Accessibility &lt;a href=&#34;https://www.reddit.com/r/webdev/comments/6nb6ne/i_built_a_thing_bimbo_theme_for_visual_studio_code/dk88pw0/&#34;&gt;win&lt;/a&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have terrible vision and high contrast themes make my life so much easier. Problem is, many of the high contrast themes are blindingly bright. Your theme is muted just enough to not be hard on the eyes, but bright enough to not have to strain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Awesome theme and being red/green colour blind and have warnings with yellow squiggles is sooooo much better. Thanks for making my life easier!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/adrianpacala&#34;&gt;Adrian Pacała&lt;/a&gt; ported a Bimbo Theme from Visual Studio Code to &lt;a href=&#34;https://hyper.is/&#34;&gt;hyper&lt;/a&gt;. Download it today from &lt;a href=&#34;https://www.npmjs.com/package/hyper-bimbo&#34;&gt;here&lt;/a&gt;. Thanks a lot!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-07-15-5.jpg&#34;
  alt=&#34;Bimbo Theme - layout variations&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1333&#34;
/&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 June</title>
      <link>https://pawelgrzybek.com/top-picks-2017-june/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-june/</guid>
      <description>&lt;h2 id=&#34;a-unified-styling-language&#34;&gt;A Unified Styling Language &lt;a href=&#34;#a-unified-styling-language&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660&#34;&gt;https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I need to admit that for a first time when I saw JSX in React I thought it is a joke. I really did my best to master famous separation of concerns. Then people started porting CSS into JavaScript — crazy idea I thought. Nowadays my mindset changed and I really love tha idea of real separation od concerns (not separation of technologies that I was practicing for years). &lt;a href=&#34;https://twitter.com/markdalgleish&#34;&gt;Mark Dalgleish&lt;/a&gt; published a fantastic article about it. I have read many posts about this subject but non of them is as wll explained and convincing as this one is. It isn&amp;rsquo;t a three minutes read but it is wort it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;stuff-at-the-top-of-an-svg&#34;&gt;Stuff at the Top of an SVG &lt;a href=&#34;#stuff-at-the-top-of-an-svg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@pnowelldesign/stuff-at-the-top-of-an-svg-f3ad198eb54e&#34;&gt;https://medium.com/@pnowelldesign/stuff-at-the-top-of-an-svg-f3ad198eb54e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Typical SVG exported straight from Adobe Illustrator, Sketch or any other software contains a lot of meta declarations. Should we keep it or should we safety delete bunch of stuff? &lt;a href=&#34;https://twitter.com/pnowelldesign&#34;&gt;Peter Nowell&lt;/a&gt; published a great explanation of all declarations and helps us to decide which parts of SVG we can bin.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exploring-es2017-decorators-in-javascript&#34;&gt;Exploring ES2017 Decorators in JavaScript &lt;a href=&#34;#exploring-es2017-decorators-in-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/exploring-es2017-decorators-javascript/&#34;&gt;https://www.sitepoint.com/exploring-es2017-decorators-javascript/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The title is very misleading as the spec for ES2017 is finalized and decorators are definitely not part of a new specification but this article is a very good primer to start with decorators. It is a mechanism well known in other programing languages, implemented and very heavily used in Angular 2 (thanks to power of TypeScript). It would be very cool to see decorators in the language.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;object-rest-and-spread-properties&#34;&gt;Object rest and spread properties &lt;a href=&#34;#object-rest-and-spread-properties&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2017/06/object-rest-spread&#34;&gt;https://developers.google.com/web/updates/2017/06/object-rest-spread&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/mathias&#34;&gt;Mathias Bynens&lt;/a&gt; &lt;a href=&#34;https://twitter.com/mathias/status/869910349193019392&#34;&gt;just joined the V8 team&lt;/a&gt; at Google and he managed to implement a new feature to Chrome&amp;rsquo;s engine — rest and spread are coming with the version 60. This post explains the details and shows practical examples.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;results-of-the-ultimate-css-survey-2017&#34;&gt;Results of the Ultimate CSS Survey 2017 &lt;a href=&#34;#results-of-the-ultimate-css-survey-2017&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/results-ultimate-css-survey-2017/&#34;&gt;https://www.sitepoint.com/results-ultimate-css-survey-2017/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Annual CSS survey made by SitePoint is always a great source of front-end important insights. The most surprising for me is number of people still supporting IE8 (and even older browsers).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;webpack-3-official-release&#34;&gt;Webpack 3: Official Release!! &lt;a href=&#34;#webpack-3-official-release&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b&#34;&gt;https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We saw a big release of webpack 2 just few months — perfect timing to release another major release. Webpack 3 just landed with few highly requested features like: scope hoisting and &amp;ldquo;magic comments&amp;rdquo;. Maintainers of this popular module bundler confirm that for 98% of users the migration from previous version to current one is smooth without any breaking changes (doesn&amp;rsquo;t apply to plugin creators). Cool cool!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;connect-behind-the-front-end-experience&#34;&gt;Connect: behind the front-end experience &lt;a href=&#34;#connect-behind-the-front-end-experience&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://stripe.com/blog/connect-front-end-experience&#34;&gt;https://stripe.com/blog/connect-front-end-experience&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/bdc&#34;&gt;Benjamin De Cock&lt;/a&gt; from stripe shares a number of useful advices and use cases for cool new browser features like: CSS grid module, 3D animations, Web Animation API and Intersection Observer. It is such a good read and it is really cool to see a project in the wild that is that heavily packed in modern features.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;embracing-the-power-of-styled-components&#34;&gt;Embracing the power of styled-components &lt;a href=&#34;#embracing-the-power-of-styled-components&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://building.sentisis.com/embracing-the-power-of-styled-components-7b79a166c01b&#34;&gt;https://building.sentisis.com/embracing-the-power-of-styled-components-7b79a166c01b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we are talking about styles in JavaScript — styled-components is one of the most frequently recommended way of doing it. Personally it took me a while to understand the concept of it but it finally clicked after this explanation! Thanks for writing it down &lt;a href=&#34;https://twitter.com/fjaguero&#34;&gt;Fernando&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;move-modal-in-on-a-path&#34;&gt;Move Modal in on a Path &lt;a href=&#34;#move-modal-in-on-a-path&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/move-modal-path/&#34;&gt;https://css-tricks.com/move-modal-path/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A cool little idea by Chris Coyier on CSS Tricks. I&amp;rsquo;m sure that the use case for this feature can be much more creative though. Works nice with native CSS feature detection using &lt;a href=&#34;https://pawelgrzybek.com/native-feature-detection-with-csssupports-api/&#34;&gt;@supports keyword&lt;/a&gt; — I published a whole article about it if you are not familiar with it yet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using webpack with gulp.js</title>
      <link>https://pawelgrzybek.com/using-webpack-with-gulpjs/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/using-webpack-with-gulpjs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://webpack.js.org/&#34;&gt;Webpack&lt;/a&gt; is a popular module bundler for modern JavaScript applications. Its biggest advantage is its flexibility — it can be as simple or as complicated as you need it to be. It doesn&amp;rsquo;t matter if you live on the edge and your app is full of modern ES2015 modules or still depends on some legacy code written in AMD style — this tool has you covered.&lt;/p&gt;
&lt;p&gt;If I&amp;rsquo;m not working on a &lt;code&gt;jsFuckingEverythingInMyWholeLife.js&lt;/code&gt; project I like to use &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt;. It is a user friendly task runner that handles common tasks like: Sass compilation, media asset compression etc. However there is a chance that you may need to add a tiny bit of JavaScript functionality to a project. What&amp;rsquo;s the solution for this scenario?&lt;/p&gt;
&lt;h2 id=&#34;webpack--gulpjs--3&#34;&gt;webpack + gulp.js = &amp;lt;3 &lt;a href=&#34;#webpack--gulpjs--3&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s combine the simplicity of Gulp&amp;rsquo;s API with webpack to take advantage of a modern JavaScript workflow. Less talking, more coding…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i -D gulp webpack webpack-stream
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// gulpfile.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gulp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;webpack&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;webpackStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;webpack-stream&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;webpackConfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./webpack.config.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;gulp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;gulp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./src/js/index.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;webpackStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;webpackConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;webpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gulp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./dist/js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s the Gulp task ready. Let&amp;rsquo;s tell webpack what to do now.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i -D babel-core babel-loader babel-preset-latest
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// webpack.config.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bundle.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/\.(js|jsx)$/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/(node_modules)/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;loader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;babel-loader&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;presets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;modules&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is just an example of a basic configuration file. From this point you can go crazy with your &lt;a href=&#34;https://webpack.js.org/configuration/&#34;&gt;settings&lt;/a&gt;. To use the task now just run in terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _________
&amp;lt; gulp js &amp;gt;
 ---------
        \   ^__^
         \  (@@)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Cloning DOM nodes and handling attached events</title>
      <link>https://pawelgrzybek.com/cloning-dom-nodes-and-handling-attached-events/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/cloning-dom-nodes-and-handling-attached-events/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m the creator and sole maintainer of &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;Siema&lt;/a&gt; — a simple carousel library that gained quite unexpected popularity on &lt;a href=&#34;https://github.com/pawelgrzybek/siema&#34;&gt;Github&lt;/a&gt; (thanks by the way). I constantly look to improve it and work hard to drop some new features in every once in a while. I recently came across a very minor challenge — I had to clone some DOM elements. Let me share with you some short and easy tips through what I learnt.&lt;/p&gt;
&lt;h2 id=&#34;cloning-dom-elements&#34;&gt;Cloning DOM elements &lt;a href=&#34;#cloning-dom-elements&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To clone a DOM element we have two options: &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode&#34;&gt;&lt;code&gt;cloneNode()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode&#34;&gt;&lt;code&gt;importNode()&lt;/code&gt;&lt;/a&gt;. The differences between these two methods are very minor and it shouldn&amp;rsquo;t really matter which one you use to perform cloning within a single document. If you are a performance freak — &lt;a href=&#34;https://jsperf.com/innerhtml-vs-importnode/6&#34;&gt;jsPerf&lt;/a&gt; shows a slightly faster computation for &lt;code&gt;importNode()&lt;/code&gt;. I doubt that you will ever need to duplicate thousands of elements on the page so I wouldn&amp;rsquo;t worry yourself about these numbers too much.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// using cloneNode()
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sourceElement&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-source div&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-destination&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sourceElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cloneNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// using importNode()
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sourceElement&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-source div&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-destination&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;importNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sourceElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reattach-an-event-listener-to-a-cloned-element&#34;&gt;Reattach an event listener to a cloned element &lt;a href=&#34;#reattach-an-event-listener-to-a-cloned-element&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After cloning, the element loses reference to all events attached to it via JavaScript. It creates something commonly known as a shallow copy. We can manually reattach all event listeners to the cloned node but that sounds like a tedious task. Back in the day we could find something like &lt;a href=&#34;https://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010823/events.html#Events-EventListenerList&#34;&gt;&lt;code&gt;EventListenerList()&lt;/code&gt;&lt;/a&gt; in the DOM spec. That would be very helpful in solving our issue but unfortunately it has been removed from the specification and the implementation isn&amp;rsquo;t available on any browser. The reason for ditching this part of the spec can be found on multiple &lt;a href=&#34;https://stackoverflow.com/a/7814692/2290040&#34;&gt;W3C mailing conversations&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] what is the motivation for adding this functionality at all? Previously, the working group resolved to remove the related but less powerful hasEventListenerNS method for lack of a use case, and because there are potential security issues.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t be tricked by &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/console/command-line-reference#geteventlistenersobject&#34;&gt;&lt;code&gt;getEventListeners()&lt;/code&gt;&lt;/a&gt; either as this is only a part of the Chrome Command Line API and is available only from the Google browser&amp;rsquo;s console. You cannot use it in your scripts.&lt;/p&gt;
&lt;p&gt;Because the native method for checking the events attached to an element doesn&amp;rsquo;t exist we need to find a different solution. Let&amp;rsquo;s have a look at the available options.&lt;/p&gt;
&lt;h3 id=&#34;inline-events&#34;&gt;Inline events &lt;a href=&#34;#inline-events&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A little bit old-school but it will do in some circumstances. HTML elements allow us to add an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers&#34;&gt;event attribute&lt;/a&gt; with a tiny bit of JavaScript functionality inside it. Like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;alert(&amp;#39;Hello&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;some element&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;clickHandler()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;some element&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although it is not very elegant, not pleasant to maintain and can cause some accessibility difficulties sometimes it can be the best way to go. As always — it depends on the situation…&lt;/p&gt;
&lt;h3 id=&#34;event-delegation&#34;&gt;Event delegation &lt;a href=&#34;#event-delegation&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Instead of adding an event listener to every element, let&amp;rsquo;s just add it once to a parent element and take advantage of event bubbling. Sounds complicated but it is easier than you think and can save you from potential memory leaks and performance degradation. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;list__item&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Ed&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;list__item&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Edd&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;list__item&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Eddy&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adding a listener to every list item…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// declare handler
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clickHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// reference to all list items
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.list__item&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// loop through list items and add listener to click event
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clickHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead, it&amp;rsquo;s better to do this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// declare handler
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clickHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.list__item&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// reference to a list
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// add a single listener on list item
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clickHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Do you already know where I&amp;rsquo;m going with this in the context of cloned elements? Instead of fighting with attaching handlers to cloned nodes, attach a single event on the closest common parent element. Makes sense?&lt;/p&gt;
&lt;h2 id=&#34;jquery-clone-method&#34;&gt;jQuery clone() method &lt;a href=&#34;#jquery-clone-method&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Popular DOM libraries like jQuery, YUI and Moo have their own methods for event delegation and I highly recommend using them if you can. The most popular one — jQuery — uses wrapper methods to deal with events. It internally tracks all the handlers attached to the node so whenever we use the &lt;a href=&#34;https://api.jquery.com/clone/&#34;&gt;&lt;code&gt;clone()&lt;/code&gt;&lt;/a&gt; method it creates a deep copy (optional argument) that contains the source element&amp;rsquo;s events.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-source div&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-destination&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;Example &lt;a href=&#34;#example&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully that made sense and this article helped you out. Thanks for reading and don&amp;rsquo;t forget about the share buttons below this article — I&amp;rsquo;m sure that your friends don&amp;rsquo;t know much about cloning yet. I put together two examples for you to play with. The first one uses event delegation and &lt;code&gt;cloneNode()&lt;/code&gt;, and the second one uses the jQuery &lt;code&gt;clone()&lt;/code&gt; method. Peace!&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Basic Node.js debugging in Google Chrome</title>
      <link>https://pawelgrzybek.com/basic-nodejs-debugging-in-google-chrome/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/basic-nodejs-debugging-in-google-chrome/</guid>
      <description>&lt;p&gt;Hi! To debug Node.js in Chrome you need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node (v6.3.0+ required)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;Chrome (v55+ required)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surprised? We need some playground script as well. Let&amp;rsquo;s build something extremely useful. How many times have you had a great idea for what to cook for dinner, but struggled to decide what to drink with it? This simple script will give you suggestions for the best beer to drink with your meal based on your food input. Thanks to the great &lt;a href=&#34;https://punkapi.com/&#34;&gt;Punk API&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/samjbmason&#34;&gt;Sam Mason de Caires&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I really fancy some prawns today. Let&amp;rsquo;s run our script&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;node beer.js prawns
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-06-03-1.gif&#34;
  alt=&#34;Node js — find the best beer for prawns&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;604&#34;
/&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Node version of fetch, needs to be downloaded from npm or yarn
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;node-fetch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// The first argument is a node path
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// The second is the file path
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// The third is our food argument
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;food&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Print array of suggested beers
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;printMyBeersBro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;—&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;beers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Beer: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; - &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tagline&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Description: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Alcohol by volume: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;abv&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;—&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Thanks to the cool PUNK API we are able get some beer suggestions
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// It&amp;#39;s good fun - try it yourself: https://punkapi.com/
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`https://api.punkapi.com/v2/beers?food=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;food&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;printMyBeersBro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;run-nodejs-script-in-google-chrome-dev-tools&#34;&gt;Run Node.js script in Google Chrome dev tools &lt;a href=&#34;#run-nodejs-script-in-google-chrome-dev-tools&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google Chrome allows us to debug the Node.js application in exactly the same manner as we use it with front-end code. Now let&amp;rsquo;s run our script with an extra flag. All the options are well explained in the &lt;a href=&#34;https://nodejs.org/en/docs/inspector/#command-line-options&#34;&gt;Node.js documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;node --inspect-brk beer.js prawns
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-06-03-2.jpg&#34;
  alt=&#34;node &amp;amp;ndash;inspect&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;638&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;At the moment the debugger is running and is stopped before the user&amp;rsquo;s code parsing begins. To access the debugger we have a few options.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;chrome://inspect&lt;/code&gt; and click &amp;ldquo;inspect&amp;rdquo; under the process.&lt;/li&gt;
&lt;li&gt;Click the small Node.js dedicated icon (this option is available on Google Chrome Canary at the time of writing this article).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-06-03-3.jpg&#34;
  alt=&#34;Debug Node.js in Google Chrome - chrome://inspect&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1024&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-06-03-4.jpg&#34;
  alt=&#34;Debug Node.js in Google Chrome - dedicated icon&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1024&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-06-03-5.jpg&#34;
  alt=&#34;Node js — Developer Tools&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1140&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for today. Hope you find this quick tip useful. I really fancy prawns now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 May</title>
      <link>https://pawelgrzybek.com/top-picks-2017-may/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-may/</guid>
      <description>&lt;h2 id=&#34;four-killer-features-of-nunjucks&#34;&gt;Four Killer Features of Nunjucks &lt;a href=&#34;#four-killer-features-of-nunjucks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/killer-features-of-nunjucks/&#34;&gt;https://css-tricks.com/killer-features-of-nunjucks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/chriscoyier&#34;&gt;Chris Coyier&lt;/a&gt; gives us a nice introduction to his favorite features in a new templating language — Nunjucks. It takes Mustache and Handlebars to the next level. The easiest way to play around with it are recently announced &lt;a href=&#34;https://codepen.io/pro/projects&#34;&gt;CodePen projects&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prepack&#34;&gt;Prepack &lt;a href=&#34;#prepack&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://prepack.io/&#34;&gt;https://prepack.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;A tool for making JavaScript code run faster&amp;rdquo; is the official pitch of a new tool — Prepack. The idea is brilliant — eliminate compilation at run-time and delegate as much optimization logic to compilation. Looking forward to see Prepack out of beta. Really nice explanation of what it does internally and how to use it is &lt;a href=&#34;https://hackernoon.com/facebooks-prepack-the-next-killer-in-the-javascript-zone-d932556ffd8c&#34;&gt;here&lt;/a&gt;. Sebastian McKenzie — one of the authors — explains the concept of faster initialization on &lt;a href=&#34;https://youtu.be/xbZzahWakGs&#34;&gt;this video&lt;/a&gt; from React Europe 2016.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tom-hudson---writing-readable-code&#34;&gt;Tom Hudson - Writing Readable Code &lt;a href=&#34;#tom-hudson---writing-readable-code&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/OVf0xP4BLq0&#34;&gt;https://youtu.be/OVf0xP4BLq0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A number of great advices of writing human readable code by Tom Hudson. It is just a 15 minutes presentation that every developer should give a quick watch with morning coffee.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-i-abandoned-apply&#34;&gt;Why I Abandoned @apply &lt;a href=&#34;#why-i-abandoned-apply&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.xanthir.com/b4o00&#34;&gt;http://www.xanthir.com/b4o00&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you remember one of the recent CSS proposal to create basic mixins to CSS via &lt;code&gt;@apply&lt;/code&gt; keyword? I even published a &lt;a href=&#34;https://pawelgrzybek.com/css-mixins-with-apply-rule/&#34;&gt;short article&lt;/a&gt; about it the other day. OK — it&amp;rsquo;s been ditched by the author. The only thing what we can do now is to wait for a better solution that hopefully will come at some point.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s plenty more space to experiment here, and while it does suck to lose a tool that you might have gotten excited about, @apply really is just quite a bad idea technically. Let&amp;rsquo;s solve these problems correctly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prototyping-in-sketch-is-herepowered-by-invision&#34;&gt;Prototyping in Sketch is here—powered by inVision &lt;a href=&#34;#prototyping-in-sketch-is-herepowered-by-invision&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.invisionapp.com/blog/prototyping-in-sketch/&#34;&gt;https://www.invisionapp.com/blog/prototyping-in-sketch/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I head a chance to test Adobe XD on one ot the recent project. The thing that I really liked about it was the ease of creating interactive prototypes. It would be cool if we could do it in Sketch! Thanks inVision — it is looking really good.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;npm-v500&#34;&gt;npm v5.0.0 &lt;a href=&#34;#npm-v500&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.npmjs.org/post/161081169345/v500&#34;&gt;http://blog.npmjs.org/post/161081169345/v500&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wowowowowow npm@5!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is a big wow. We were waiting for big update of npm for months. Better performance, offline support out of the box, lockfiles, &lt;code&gt;--save&lt;/code&gt; keyword as a default &lt;code&gt;install&lt;/code&gt; command flag, more user friendly log output are just a few big changes in a new manager.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-event-bubbling-in-javascript-event-propagation-explained&#34;&gt;What Is Event Bubbling in JavaScript? Event Propagation Explained &lt;a href=&#34;#what-is-event-bubbling-in-javascript-event-propagation-explained&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/event-bubbling-javascript/&#34;&gt;https://www.sitepoint.com/event-bubbling-javascript/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This subject confused me so much when I started working with DOM for a first time. &lt;a href=&#34;https://twitter.com/mgiulio&#34;&gt;Giulio Mainardi&lt;/a&gt; did a really amazing job in explaining concept of event propagation, capturing and bubbling. Quick read for all DOM devs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I built a thing - Snippet Generator for VS Code, Sublime Text and Atom</title>
      <link>https://pawelgrzybek.com/i-built-a-thing-snippet-generator-for-vs-code-sublime-text-and-atom/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-built-a-thing-snippet-generator-for-vs-code-sublime-text-and-atom/</guid>
      <description>&lt;p&gt;Snippets — one of the most powerful features of my code editor. I use these reusable chunks of code constantly. Over the years I&amp;rsquo;ve built a huge collection of snippets for Sublime Text. Then I used Atom for a little while and eventually ended up using Visual Studio Code. All of these tools allow us to boost productivity by using custom snippets — if you&amp;rsquo;re not using them yet I highly recommend embracing the power. There is one thing that really sucks about snippets though — creating them. I found it especially painful in VS Code because it splits each line into a separated string. I decided to simplify the process a little bit…&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pawelgrzybek.com/snippet-generator/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-05-01-1.jpg&#34;
  alt=&#34;Snippet Generator for VS Code, Sublime Text and Atom&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1201&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pawelgrzybek.com/snippet-generator/&#34;&gt;Snippet Generator&lt;/a&gt; is a tiny React app that makes it much easier and more user-friendly. The source code for the app is available &lt;a href=&#34;https://github.com/pawelgrzybek/snippet-generator&#34;&gt;on Github&lt;/a&gt;. Don&amp;rsquo;t judge me — I&amp;rsquo;m not React expert but it&amp;rsquo;s been a fun to build something with it. If you have any ideas for improvements, suggestions or bugs to report, use Github issues please. Enjoy :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 April</title>
      <link>https://pawelgrzybek.com/top-picks-2017-april/</link>
      <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-april/</guid>
      <description>&lt;h2 id=&#34;build-complex-layouts-with-css-grid-layout&#34;&gt;Build Complex Layouts with CSS Grid Layout &lt;a href=&#34;#build-complex-layouts-with-css-grid-layout&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://egghead.io/courses/build-complex-layouts-with-css-grid-layout&#34;&gt;https://egghead.io/courses/build-complex-layouts-with-css-grid-layout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We ware waiting for a real layout system since the born of the web. Recent version of Google Chrome, Firefox and Safari (yep, we are waiting for you Edge) finally brought it to us! CSS Grid Layout is here and it is more powerful that we expected. It can be as simple or as complex as you want. In this 40 minutes egghead course &lt;a href=&#34;https://twitter.com/alan0buchanan&#34;&gt;Rory Smith&lt;/a&gt; goes through numbers of techniques of using it. Fantastic resource to get yourself familiar with basic concept as with complex techniques.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-dao-of-web-design&#34;&gt;A Dao of Web Design &lt;a href=&#34;#a-dao-of-web-design&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://alistapart.com/article/dao&#34;&gt;https://alistapart.com/article/dao&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Living in 2017 and working as software developer makes me feel that something that I embraced today is going to be outdated tomorrow. This article shows the opposite. Published in 2000 (epic article by John Allsopp precisely points out a key principles of web that many web professionals don&amp;rsquo;t understand even 17 years later. This article is timeless! I cannot event quote here my favorite part — I would must copy the whole article here. It is just a must read for all web professionals.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;welcome-to-mastodon&#34;&gt;Welcome to Mastodon &lt;a href=&#34;#welcome-to-mastodon&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@Gargron/welcome-to-mastodon-111d9227e56a&#34;&gt;https://medium.com/@Gargron/welcome-to-mastodon-111d9227e56a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I really don&amp;rsquo;t know what is going on but on the beginning of an April so many people across all social media channels started exchanging their links to profile on totally new social media channel — Mastodon. Of course &lt;a href=&#34;https://mastodon.social/@pawelgrzybek&#34;&gt;I have my own account&lt;/a&gt; by now! Author of Mastodon published a nice primer and pointed out the differences between micro-blogging platforms that we tend to use. The growing pace looks very promising for this platform. The most important benefits for me are — open source, free and decentralized. I&amp;rsquo;m very curious what will future bring to the Mastodon!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;grid-garden&#34;&gt;Grid garden &lt;a href=&#34;#grid-garden&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cssgridgarden.com/&#34;&gt;http://cssgridgarden.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you remember &lt;a href=&#34;http://flexboxfroggy.com/&#34;&gt;Flexbox Froggy&lt;/a&gt;? It was a big thing when flexbox arrived to browsers. It has been a while since we got a solid layout update spec across all vendors. CSS Grid Module landed just month ago and Thomas Park again made our life much easier to grasp the basic concept of it. Grow your carrots and enjoy 24 levels of interactive game that will teach you a basic grid syntax. Such a good fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;microsoft-edge-developer---css-variables&#34;&gt;Microsoft Edge Developer - CSS Variables &lt;a href=&#34;#microsoft-edge-developer---css-variables&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6261292-css-variables&#34;&gt;https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6261292-css-variables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yeah boy, we have a CSS custom properties in all major browsers now. The future is now! In my opinion the most powerful feature ever added to Cascade Style Sheets. I already saw so many amazing examples that take an advantage of this and I&amp;rsquo;m looking forward to see more of them.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-post-javascript-apocalypse---douglas-crockford&#34;&gt;The Post JavaScript Apocalypse - Douglas Crockford &lt;a href=&#34;#the-post-javascript-apocalypse---douglas-crockford&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/NPB34lDZj3E&#34;&gt;https://youtu.be/NPB34lDZj3E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Douglas Crockford is speculating about future language that will come after JavaScript. A nice presentation full of good conclusions about design of current set of languages. Of course you will find here a a little bit of Douglas&amp;rsquo; crankiness.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;an-overview-of-javascript-testing-in-2017&#34;&gt;An Overview of JavaScript Testing in 2017 &lt;a href=&#34;#an-overview-of-javascript-testing-in-2017&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/powtoon-engineering/a-complete-guide-to-testing-javascript-in-2017-a217b4cd5a2a&#34;&gt;https://medium.com/powtoon-engineering/a-complete-guide-to-testing-javascript-in-2017-a217b4cd5a2a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/vzaidman&#34;&gt;Vitalik Zaidman&lt;/a&gt; wrote a very helpful article to understand testing in JavaScript world. It is a really comprehensive article that covers basics like test types and presents a number of helpful frameworks that we may use with brief summary of each of them. I&amp;rsquo;m not very experience &amp;ldquo;tester&amp;rdquo; and this post definitely helped me a lot to understand it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make some magic with CSS blend modes</title>
      <link>https://pawelgrzybek.com/make-some-magic-with-css-blend-modes/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/make-some-magic-with-css-blend-modes/</guid>
      <description>&lt;p&gt;It was an ordinary Wednesday morning, I was enjoying my morning espresso shot at &lt;a href=&#34;https://twitter.com/enginecreative&#34;&gt;Engine Creative&lt;/a&gt;, when suddenly my lovely colleague Chloe put on my desk the latest issue of &lt;a href=&#34;https://twitter.com/netmag&#34;&gt;net magazine&lt;/a&gt; freshly delivered by the postman. I had a quick glance at the cover art that boldly stated &amp;ldquo;Make magic with CSS&amp;rdquo;. Pfff — I totally ignored it — I know everything about CSS, don&amp;rsquo;t I? It was a really nice espresso.&lt;/p&gt;
&lt;p&gt;It is an ordinary Sunday morning, I&amp;rsquo;m enjoying my morning espresso shot on my sofa — time for some press. After reading the first three paragraphs of &amp;ldquo;Make magic with CSS&amp;rdquo; by &lt;a href=&#34;https://twitter.com/aganaplocha&#34;&gt;Aga Naplocha&lt;/a&gt; I&amp;rsquo;ve realised that I had really fallen behind on my CSS skills. It is a really nice espresso but I&amp;rsquo;m going to brew more because today is the day to catch up on some CSS magic — blend modes.&lt;/p&gt;
&lt;h2 id=&#34;blend-modes-essentials&#34;&gt;Blend modes essentials &lt;a href=&#34;#blend-modes-essentials&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have ever used any image editing software like Adobe Photoshop, Affinity Photo or Sketch App you probably have some experience with blend modes. Yes — it is one of those features that designers love as it&amp;rsquo;s essentially a shortcut method for doing beautiful things but front-end developers hate them because they are laborious to implement. A-ha! Not anymore! I will show you how in a second but first let&amp;rsquo;s brush up on some theory courtesy of &lt;a href=&#34;https://en.wikipedia.org/wiki/Blend_modes&#34;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blend modes in digital image editing are used to determine how two layers are blended into each other. However, as each pixel has a numerical representation, a large number of ways to blend two layers is possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-1.jpg&#34;
  alt=&#34;Blend modes in Adobe Photoshop, Sketch App and Affinity Photo&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;906&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;For lots of designers and developers working with blend modes is a very experimental process. Memorising all the mathematical calculations isn&amp;rsquo;t required to use them effectively. It doesn&amp;rsquo;t take much time to juggle with some options in Photoshop but it can be very time consuming when the same needs to be done in CSS or JavaScript. A little bit of understanding helps and I will do my best to help you with that.&lt;/p&gt;
&lt;h3 id=&#34;blend-modes-by-group&#34;&gt;Blend modes by group &lt;a href=&#34;#blend-modes-by-group&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Photoshop and Sketch separate blending options into a few meaningful groups. Unfortunately Affinity Photo presents its options in a non-grouped manner (this would be worth adding in a future version). I&amp;rsquo;m not going to describe the algorithm behind each of them as there are plenty of &lt;a href=&#34;https://photoshoptrainingchannel.com/blending-modes-explained/&#34;&gt;detailed explanations&lt;/a&gt; out there — a brief summary of each group is enough to grasp the concept.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-2.jpg&#34;
  alt=&#34;Grouped blend modes in Sketch App&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;806&#34;
/&gt;
&lt;/p&gt;
&lt;h4 id=&#34;normal&#34;&gt;Normal &lt;a href=&#34;#normal&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;No mathematical algorithm is applied. If you are wondering why the very random looking &amp;ldquo;Dissolve&amp;rdquo; mode belongs to this group, you&amp;rsquo;ve just answered your own question — &lt;a href=&#34;https://en.wikipedia.org/wiki/Blend_modes#Dissolve&#34;&gt;random&lt;/a&gt;. The example below shows the &amp;ldquo;Normal&amp;rdquo; blend mode.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-3.jpg&#34;
  alt=&#34;Blend mode - Normal group&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;800&#34;
/&gt;
&lt;/p&gt;
&lt;h4 id=&#34;darken&#34;&gt;Darken &lt;a href=&#34;#darken&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As the name suggests — the result will be darker than the initial look of the blended layer. The base colour is pure white. Every pixel darker than white results in a darkened output of blended pixels. Using this mode with pure white layers won&amp;rsquo;t generate any effect. Darken generates inverted effects to modes from the &amp;ldquo;Lighten&amp;rdquo; category. The example below shows the &amp;ldquo;Darken&amp;rdquo; blend mode.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-4.jpg&#34;
  alt=&#34;Blend mode - Darken group&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;800&#34;
/&gt;
&lt;/p&gt;
&lt;h4 id=&#34;lighten&#34;&gt;Lighten &lt;a href=&#34;#lighten&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As the name suggests — the result will be lighter than the initial look of the blended layer. The base colour is a pure black. Every pixel brighter than black results in a lightened output of blended pixels. Using this mode with pure black layers won&amp;rsquo;t generate any effect. Lighten generates inverted effects to modes from the &amp;ldquo;Darken&amp;rdquo; category. The example below shows the &amp;ldquo;Lighten&amp;rdquo; blend mode.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-5.jpg&#34;
  alt=&#34;Blend mode - Lighten group&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;800&#34;
/&gt;
&lt;/p&gt;
&lt;h4 id=&#34;contrast&#34;&gt;Contrast &lt;a href=&#34;#contrast&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Darken blend modes use pure white as the neutral point. Lighten ones use pure black. The Contrast group uses 50% gray as the base colour to recalculate the blended result. The purpose of this category is to manipulate the contrast of an image. The example below shows the &amp;ldquo;Hard Light&amp;rdquo; blend mode.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-6.jpg&#34;
  alt=&#34;Blend mode - Contrast group&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;800&#34;
/&gt;
&lt;/p&gt;
&lt;h4 id=&#34;inversion&#34;&gt;Inversion &lt;a href=&#34;#inversion&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This set of blend modes calculate the difference or colour inversion between two layers. This produces results where colours are cancelled or inverted in the colour wheel. The example below shows the &amp;ldquo;Difference&amp;rdquo; blend mode.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-7.jpg&#34;
  alt=&#34;Blend mode - Inversion group&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;800&#34;
/&gt;
&lt;/p&gt;
&lt;h4 id=&#34;component&#34;&gt;Component &lt;a href=&#34;#component&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The Component group allows us to blend primary colour components: hue, saturation and brightness. The example below shows the &amp;ldquo;Hue&amp;rdquo; blend mode.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-8.jpg&#34;
  alt=&#34;Blend mode - Component group&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;800&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;software-vs-web-reality&#34;&gt;Software vs. web reality &lt;a href=&#34;#software-vs-web-reality&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Web design software is much more generous with the available options than the web platform is. Adobe Photoshop gives us access to 27 blend modes, Sketch gives us 16 options and Affinity Photo offers a crazy 30 variations.&lt;/p&gt;
&lt;p&gt;According to the recent &lt;a href=&#34;https://drafts.fxtf.org/compositing-1/&#34;&gt;Compositing and Blending Level Spec&lt;/a&gt;, CSS comes with 16 values that we can use in our projects. These are exactly the same values as are available in Sketch.&lt;/p&gt;
&lt;h2 id=&#34;working-with-css-blend-modes&#34;&gt;Working with CSS blend modes &lt;a href=&#34;#working-with-css-blend-modes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Enough theory — time for some practice. As mentioned a second ago, CSS allows us to use the following values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-normal&#34;&gt;&lt;code&gt;normal&lt;/code&gt;&lt;/a&gt; (initial value)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-multiply&#34;&gt;&lt;code&gt;multiply&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-screen&#34;&gt;&lt;code&gt;screen&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-overlay&#34;&gt;&lt;code&gt;overlay&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-darken&#34;&gt;&lt;code&gt;darken&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-lighten&#34;&gt;&lt;code&gt;lighten&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-color-dodge&#34;&gt;&lt;code&gt;color-dodge&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-color-burn&#34;&gt;&lt;code&gt;color-burn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-hard-light&#34;&gt;&lt;code&gt;hard-light&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-soft-light&#34;&gt;&lt;code&gt;soft-light&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-difference&#34;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-exclusion&#34;&gt;&lt;code&gt;exclusion&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-hue&#34;&gt;&lt;code&gt;hue&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-saturation&#34;&gt;&lt;code&gt;saturation&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-color&#34;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/compositing-1/#valdef-blend-mode-luminosity&#34;&gt;&lt;code&gt;luminosity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two CSS properties out there that allow us to work with blend modes: &lt;a href=&#34;https://www.w3.org/TR/compositing-1/#propdef-background-blend-mode&#34;&gt;&lt;code&gt;background-blend-mode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.w3.org/TR/compositing-1/#mix-blend-mode&#34;&gt;&lt;code&gt;mix-blend-mode&lt;/code&gt;&lt;/a&gt;. The effect that those properties produce is identical but the use case for them is different. Let&amp;rsquo;s have a quick look at both of them.&lt;/p&gt;
&lt;h3 id=&#34;background-blend-mode&#34;&gt;background-blend-mode &lt;a href=&#34;#background-blend-mode&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As it says on the tin &lt;code&gt;background-blend-mode&lt;/code&gt; applies a blend mode to &lt;code&gt;background-color&lt;/code&gt; or &lt;code&gt;background-image&lt;/code&gt;. It can take multiple values when we use more than one background. Using it with gradients can produce really impressive results — but I will leave the creativity to you. Let&amp;rsquo;s have a look at a simple example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#D3545B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;image.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-blend-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;multiply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;mix-blend-mode&#34;&gt;mix-blend-mode &lt;a href=&#34;#mix-blend-mode&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It would be a bit restrictive to use blend modes with backgrounds only. That&amp;rsquo;s the reason why &lt;code&gt;mix-blend-mode&lt;/code&gt; exists. It allows us to blend any element with its backdrop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;image.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;deg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;#D3545B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;#D3545B&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kc&#34;&gt;transparent&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kc&#34;&gt;transparent&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;mix-blend-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;darken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;A word of advice! There is a bug in Chrome. Blending with the &lt;code&gt;body&lt;/code&gt; element is broken in Google&amp;rsquo;s browser — it works like a charm in other ones though.&lt;/p&gt;
&lt;h3 id=&#34;but-internet-explorer-edge-and-safari&#34;&gt;But Internet Explorer, Edge and Safari&amp;hellip; &lt;a href=&#34;#but-internet-explorer-edge-and-safari&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s be honest — the browser support isn&amp;rsquo;t fantastic. Internet Explorer and Edge don&amp;rsquo;t support it at all. Desktop and mobile Safari has a real issue with all non-separable blend modes: &lt;code&gt;hue&lt;/code&gt;, &lt;code&gt;saturation&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;luminosity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-9.jpg&#34;
  alt=&#34;Blend modes support in the browsers&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;393&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Let me introduce a new term now — &amp;ldquo;no blend modes first&amp;rdquo;. Your project on an old-school browser shouldn&amp;rsquo;t be any less functional as the one on the latest version of Google Chrome. Take the support for a crazy feature as an opportunity, not as something that should dictate your design decisions. But if you really, really must…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mixBlendMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; no-mix-blend-mode&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;backgroundBlendMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; no-background-blend-mode&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#D3545B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;image.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-blend-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;hard-light&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;no-background-blend-mode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;some-fallback-image.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the result on the latest version of Google Chrome and IE 9.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-28-10.jpg&#34;
  alt=&#34;Cross browser Internet Explorer 9 CSS blend mode&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1150&#34;
/&gt;
&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;i-missed-you-css&#34;&gt;I missed you CSS &lt;a href=&#34;#i-missed-you-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/aganaplocha&#34;&gt;Aga&lt;/a&gt;, thanks for giving me the inspiration to write this article. I promise to catch up on some of the latest CSS magic — actually I really miss it.&lt;/p&gt;
&lt;p&gt;Hopefully this article helped you out guys. For me, writing it was a really enjoyable path to learning it. I officially announce that I&amp;rsquo;m starting to use CSS blend modes in production today. Until next time CSS magicians!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Native ECMAScript modules in the browser</title>
      <link>https://pawelgrzybek.com/native-ecmascript-modules-in-the-browser/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/native-ecmascript-modules-in-the-browser/</guid>
      <description>&lt;p&gt;Three things that I wish I could ditch from my everyday front-end workflow: CSS preprocessors, JavaScript transpilers and module bundlers. Let me elaborate…&lt;/p&gt;
&lt;p&gt;I love Sass but wouldn&amp;rsquo;t it be cool to have its power built into CSS? The good news is native &lt;a href=&#34;https://pawelgrzybek.com/css-custom-properties-explained/&#34;&gt;custom properties&lt;/a&gt; are much more powerful than statically declared ones from Sass. Mixins are amazing — unfortunately the &lt;a href=&#34;https://pawelgrzybek.com/css-mixins-with-apply-rule/&#34;&gt;&lt;code&gt;@apply&lt;/code&gt; rule&lt;/a&gt; has been &lt;a href=&#34;http://www.xanthir.com/b4o00&#34;&gt;abandoned by the spec creator&lt;/a&gt; but I&amp;rsquo;m sure we will get some decent replacement at some point. &lt;a href=&#34;https://www.chromium.org/blink#vendor-prefixes&#34;&gt;The vendor prefixes imbroglio&lt;/a&gt; is over and will never come back. With all those goodies I would say that the first of my dreams is fulfilled.&lt;/p&gt;
&lt;p&gt;When &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt; came around it was like living in the future. We were able to use modern features that browsers didn&amp;rsquo;t support at the time. Things have changed though. Nowadays, browsers have really &lt;a href=&#34;https://kangax.github.io/compat-table/es6/&#34;&gt;strong support&lt;/a&gt; for present-day ingredients. Have a look at your Gulp build task or Webpack config — there&amp;rsquo;s a good chance that you don&amp;rsquo;t need to transpile your code anymore. The second item in my wish list has become a reality.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_1.html&#34;&gt;Safari 10.1&lt;/a&gt; brings me hope that one day I will check the box next to the last item that I would like to forget — module bundlers.&lt;/p&gt;
&lt;h2 id=&#34;javascript-modules-recap&#34;&gt;JavaScript modules recap &lt;a href=&#34;#javascript-modules-recap&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before 2015 JavaScript didn&amp;rsquo;t have a native way of working with modular codebases. For years web developers managed to find a number of ways to implement it: splitting the codebase into separated files and scopes, using &lt;a href=&#34;https://en.wikipedia.org/wiki/Asynchronous_module_definition&#34;&gt;AMD (Asynchronous module definition)&lt;/a&gt; with file loaders like &lt;a href=&#34;http://requirejs.org/&#34;&gt;RequireJS&lt;/a&gt; or making the Node-style &lt;a href=&#34;https://en.wikipedia.org/wiki/CommonJS&#34;&gt;CommonJS&lt;/a&gt; work in the browser via libraries like &lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finalised in June 2015 the spec for the &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/&#34;&gt;6th edition&lt;/a&gt; of JavaScript changed things a lot. One of the many amazing things that it brought was a native way of working with modules. It turned out that it was &lt;a href=&#34;https://blog.whatwg.org/js-modules&#34;&gt;immensely hard&lt;/a&gt; to implement on the web platform — so module bundlers like &lt;a href=&#34;https://webpack.js.org/&#34;&gt;Webpack&lt;/a&gt; came into the game. They allowed us to write code in a modern way and spit out a bundled script understandable by the browser.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_1.html&#34;&gt;Safari 10.1&lt;/a&gt; is the first browser that has received &lt;a href=&#34;https://kangax.github.io/compat-table/es6/#safari10_1&#34;&gt;100% complete coverage for ECMAScript 2015 features&lt;/a&gt;. Really great work Apple (&lt;a href=&#34;https://jakearchibald.github.io/isserviceworkerready/&#34;&gt;Service Workers&lt;/a&gt; next please). It means that it is the first browser that allows us to use native modules. Another implementation landed on Google Chrome 61, Firefox 54 – behind the &lt;code&gt;dom.moduleScripts.enabled&lt;/code&gt; setting in &lt;code&gt;about:config&lt;/code&gt; and Edge 16. Let&amp;rsquo;s have a look at the nitty-gritty.&lt;/p&gt;
&lt;h2 id=&#34;working-with-modules-in-the-browser&#34;&gt;Working with modules in the browser &lt;a href=&#34;#working-with-modules-in-the-browser&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have ever used &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; in your project, migrating this concept to a client won&amp;rsquo;t be a challenging task. If you have never worked with these concepts before, give &lt;a href=&#34;http://exploringjs.com/es6/ch_modules.html&#34;&gt;this chapter&lt;/a&gt; of Dr. Axel Rauschmayer&amp;rsquo;s book a quick read.&lt;/p&gt;
&lt;p&gt;Nothing works better than a practical example. Let&amp;rsquo;s create a script that prints a stylish log message into the console. Let&amp;rsquo;s split it out into two files — &lt;code&gt;index.js&lt;/code&gt; as an entry point and &lt;code&gt;print.js&lt;/code&gt; that holds a reusable print function (module). It goes something like this (sorry for the &lt;a href=&#34;https://github.com/jneen/rouge/issues/432&#34;&gt;issue&lt;/a&gt; with ES2015 syntax highlighting).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// index.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./print.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Native ECMAScript modules in the browser&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// print.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;sb&#34;&gt;`%c &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;sb&#34;&gt;`
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;    color: hotpink;
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;    font-family: Comic Sans MS;
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;    font-size: 1.5rem;
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;    `&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the world of module bundlers we need to run this set of files through it to get a bundled file that contains our script and some boilerplate on top of it. Then we have to smash a &lt;code&gt;script&lt;/code&gt; tag with a &lt;code&gt;src&lt;/code&gt; attribute that points to this file and voilà — it works. Now let&amp;rsquo;s forget about bundling for a sec and take advantage of a browser that can finally resolve all dependencies for us. This is how to do it baby…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./index.js&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes the essence lies here — &lt;code&gt;type=&amp;quot;module&amp;quot;&lt;/code&gt;. According &lt;a href=&#34;https://html.spec.whatwg.org/multipage/scripting.html#script-type-module-example-1&#34;&gt;to the spec&lt;/a&gt; these few characters tell the browser that it can be used to include external module scripts. This is exactly what we need! Pay attention to the &lt;code&gt;import&lt;/code&gt; path inside the &lt;code&gt;index.js&lt;/code&gt; file — it needs to be a concrete path to an imported file (including the extension). Let&amp;rsquo;s open it in the browser (more about the support later on).&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-18-1.jpg&#34;
  alt=&#34;Native ECMAScript modules in Safari&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1024&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;The browser managed to resolve the dependency of the &lt;code&gt;print.js&lt;/code&gt; file. No Webpack magic here! Beautiful, isn&amp;rsquo;t it?&lt;/p&gt;
&lt;h2 id=&#34;but-my-browser-doesnt-yes-it-does&#34;&gt;But my browser doesn&amp;rsquo;t… Yes it does! &lt;a href=&#34;#but-my-browser-doesnt-yes-it-does&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A quick word about support of native modules across the browsers and some possible solutions. At the time of writing this article it&amp;rsquo;s looking like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome Canary 61&lt;/li&gt;
&lt;li&gt;Firefox 54 – behind the &lt;code&gt;dom.moduleScripts.enabled&lt;/code&gt; setting in &lt;code&gt;about:config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edge 16&lt;/li&gt;
&lt;li&gt;Safari — hell yeah!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-18-2.jpg&#34;
  alt=&#34;Browser support for Native ECMAScript modules&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;940&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;It doesn&amp;rsquo;t look very promising and is definitely not ready to use in production. There is a hope though! Let&amp;rsquo;s have a look at what the console of any browser that lacks native module support shows when I open our pretty print example.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-18-3.jpg&#34;
  alt=&#34;Native ECMAScript modules in Google Chrome&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1024&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;So what happened here? NOTHING! Absolutely nothing. Because Google Chrome doesn&amp;rsquo;t support JavaScript modules it totally ignores it. You probably know where I&amp;rsquo;m going with this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./index.js&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./bundle.js&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;nomodule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes! When modules are not supported natively let&amp;rsquo;s use something that definitely works. As a fallback script let&amp;rsquo;s use an output file from our module bundler of choice. It works perfectly well now in any browser that doesn&amp;rsquo;t have a clue how to handle JavaScript modules. Make sure that you are not duplicating the same functionality for browsers that do support it — it is exactly for this reason the &lt;a href=&#34;https://html.spec.whatwg.org/multipage/scripting.html#attr-script-nomodule&#34;&gt;&lt;code&gt;nomodule&lt;/code&gt;&lt;/a&gt; attribute has been recently added to the spec. Let&amp;rsquo;s have a look at the results in Safari and Google Chrome (or any other browser that doesn&amp;rsquo;t support modules) now…&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-04-18-4.jpg&#34;
  alt=&#34;Native ECMAScript modules in Safari Technology Preview and Google Chrome&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;2767&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;last-word-about-javascript-modules&#34;&gt;Last word about JavaScript modules &lt;a href=&#34;#last-word-about-javascript-modules&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it. I hope that you are as equally excited about native modules as I am. I would like to leave you here with two conclusions.&lt;/p&gt;
&lt;p&gt;The last few years introduced many tools and added massive complexity to front-end development. The rapid change of the JavaScript workflow constantly attracts new developers and scares others. Module bundling is one of those things that adds gigantic confusion — hopefully in this post I have demonstrated to you that it won&amp;rsquo;t last forever. Things just became much simpler.&lt;/p&gt;
&lt;p&gt;The thing that I love about the web is its unpredictability and active transformation. One day, something becomes much simpler and the next day a new idea comes in to confuse our brains even more. I can&amp;rsquo;t wait to see what the future has to offer…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 March</title>
      <link>https://pawelgrzybek.com/top-picks-2017-march/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-march/</guid>
      <description>&lt;h2 id=&#34;convert-string-to-dom-nodes&#34;&gt;Convert String to DOM Nodes &lt;a href=&#34;#convert-string-to-dom-nodes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://davidwalsh.name/convert-html-stings-dom-nodes&#34;&gt;https://davidwalsh.name/convert-html-stings-dom-nodes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David Walsh explains how to convert strings to DOM nodes by using &lt;code&gt;parseFromString()&lt;/code&gt; method from &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/DOMParser&#34;&gt;DOMParser&lt;/a&gt; instance. Nice, clean and library free solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;Hello, I am paragraph&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DOMParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parseFromString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// prints &amp;lt;p&amp;gt;Hello, I am paragraph&amp;lt;/p&amp;gt; as a HTML
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;javascript-deep-merge&#34;&gt;JavaScript Deep Merge &lt;a href=&#34;#javascript-deep-merge&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://davidwalsh.name/javascript-deep-merge&#34;&gt;https://davidwalsh.name/javascript-deep-merge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David Walsh comaes with another great tip this month. ECMAScript 2015 brought us &lt;code&gt;Object.assign()&lt;/code&gt; that allows us to merge two object in elegant way. Newer feature that is coming to JavaScript spec is object spread operator that allows us to do it in even more redeable way (&lt;code&gt;{...obj1, ...obj2}&lt;/code&gt;). Both of these methods come with one downside — they generate shallow merge of top properties only. In majority of cases it is all that we need but if we need some more reliable way to construct deeply merged objects from multi-level collections &lt;a href=&#34;https://www.npmjs.com/package/deepmerge&#34;&gt;deepmerge&lt;/a&gt; is a great utility.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Shallow merge
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Deep merge
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;merge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deepmerge&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;grid&#34;&gt;Grid &lt;a href=&#34;#grid&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://tympanus.net/codrops/css_reference/grid/&#34;&gt;https://tympanus.net/codrops/css_reference/grid/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It was a great month for our browsers. Firefox in version 52, Google Chrome 57 and Safari 10.1 brought a bunch of great features. The most important one for me is the CSS Grids Module that I&amp;rsquo;m very excited about. If you don&amp;rsquo;t have a clue what I am talking about have a look at my &lt;a href=&#34;https://pawelgrzybek.com/lets-get-into-the-basics-of-css-grid-layout-model/&#34;&gt;basic introduction&lt;/a&gt; that I published some time ago. It is definitely going to change the way how we create layouts. Internet is full of great resources to learn it and we are going to see more and more of it in a near future. This one by codrops is a really comprehensive tutorial with tons of illustrated examples. Another one worth to mention is &lt;a href=&#34;http://gridbyexample.com/&#34;&gt;http://gridbyexample.com/&lt;/a&gt; created by Rachel Andrew — can&amp;rsquo;t think of a better person who could create a tutorial about this subject. You better catch up guys, you are going to see more and more of &amp;ldquo;gridy&amp;rdquo; CSS lines soon.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses&#34;&gt;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) &lt;a href=&#34;#the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&#34;&gt;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This 14 years old post is such a great introduction to characters encoding. Joel Spolsky, CEO and co-founder of &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;stackoverflow.com&lt;/a&gt; does a really amazing job in explaining some historical background, languages differences and actions taken to find a solutions for encoding &amp;ldquo;problem&amp;rdquo;. Must read!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;world-wide-web-not-wealthy-western-web&#34;&gt;World Wide Web, Not Wealthy Western Web &lt;a href=&#34;#world-wide-web-not-wealthy-western-web&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/&#34;&gt;https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-2/&#34;&gt;https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Probably my favorite article of a month. Bruce Lawson shares tons of insights about difference between internet usage around the glob, born of a world wide web on land of Asia and possible solutions to reach this audience.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Horatio, as every schoolchild knows, is a designer from Berlin (or sometimes London or Silicon Valley) who has a top-of-the-line MacBook, the latest iPhone and an unlimited data plan over the fastest, most reliable network. But, as Hamlet points out to him, this is not the experience of most of the world’s web visitors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Please, do your part to ensure the health of the web that has provided you with so much, and pay it forward so the next people can benefit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dr-axel-rauschmayer---ecmascript-2017-and-beyond&#34;&gt;Dr. Axel Rauschmayer - ECMAScript 2017 and beyond &lt;a href=&#34;#dr-axel-rauschmayer---ecmascript-2017-and-beyond&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/5Kw4XVSb4P4&#34;&gt;https://youtu.be/5Kw4XVSb4P4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Can&amp;rsquo;t think of a better person that should introduce a set of new ECMAScript 2017 features than Dr. Axel Rauschmayer. Very well explained recently added parts of a spec proceeded by brief summary of spec and organizations behind it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;react-conf-2017&#34;&gt;React Conf 2017 &lt;a href=&#34;#react-conf-2017&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0&#34;&gt;https://www.youtube.com/playlist?list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was a big month not only for browser vendors, but for React community as well. Official React conference is an event where a lot happens every year — this year wasn&amp;rsquo;t an exception. I cannot decide what I am the most excited about. Simplifying process of boilerplating a mobil app using &lt;a href=&#34;https://youtu.be/9baaVjGdBqs&#34;&gt;create-react-native-app&lt;/a&gt; is very cool feature. Playing around and testing it with &lt;a href=&#34;https://blog.expo.io/sketch-a-playground-for-react-native-16b2401f44a2&#34;&gt;Sketch&lt;/a&gt; is even simpler to get started (don&amp;rsquo;t get why they called it Sketch, this name seems to be reserved for product by Bohemian Coding for me). Of course &lt;a href=&#34;https://facebook.github.io/react-vr/&#34;&gt;React VR&lt;/a&gt; is a game changer in my eyes — this talk by &lt;a href=&#34;https://youtu.be/CtVo3z_o9Rw&#34;&gt;Michaela Lehr&lt;/a&gt; is a great primer to get started. &lt;a href=&#34;https://youtu.be/ZCuYPiUIONs&#34;&gt;A Cartoon Intro to Fiber&lt;/a&gt; by Link Clark well explains the functionality of future insides of React. &lt;a href=&#34;https://youtu.be/-VC7o6wZ_a8&#34;&gt;Using React for Anything but Website&lt;/a&gt; by Ken Wheeler is a funny showcase how can you use React for other things than web apps. A lot&amp;hellip; Have a look at the youtube playlist and pick ones out of your interest.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sketch-43-is-coming-to-town-with-a-new-game-an-open-file-format&#34;&gt;Sketch 43 is coming to town with a new game. An open file format! &lt;a href=&#34;#sketch-43-is-coming-to-town-with-a-new-game-an-open-file-format&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/sketch-app-sources/sketch-43-is-coming-to-town-with-a-new-game-an-open-file-format-ae62e7e7c223&#34;&gt;https://medium.com/sketch-app-sources/sketch-43-is-coming-to-town-with-a-new-game-an-open-file-format-ae62e7e7c223&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sketch 43 is coming with big change — open file format (now I&amp;rsquo;m talking about this well-known Sketch, not the mobile React native parser by Expo). What does it mean? Essentially every single file is not a piece of binary data anymore. You can open it in your code editor and it is nothing else than JSON formated collection of data about your project. It is just a matter of time to see Windows / Linux sketch file readers or even some template generators as a web apps. It opens a huge opportunities and I can&amp;rsquo;t wait what kind of amazing ideas community will come up with.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;slow-the-fuck-down&#34;&gt;Slow the fuck down &lt;a href=&#34;#slow-the-fuck-down&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.officehours.io/slow-the-fuck-down/&#34;&gt;http://blog.officehours.io/slow-the-fuck-down/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The subject of burnout isn&amp;rsquo;t a rare thing nowadays. We are aiming to get things done and it is very difficult to prioritize things. We are surrounded by many things that drive our attention and taking out attention span away from things that we should actually do at the time. &lt;a href=&#34;https://twitter.com/karj&#34;&gt;Eric Karjaluoto&lt;/a&gt; published a fantastic article that is full of amazing advices how to deal with this issues.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;beyond-the-browser-from-web-apps-to-desktop-apps&#34;&gt;Beyond The Browser: From Web Apps To Desktop Apps &lt;a href=&#34;#beyond-the-browser-from-web-apps-to-desktop-apps&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2017/03/beyond-browser-web-desktop-apps/&#34;&gt;https://www.smashingmagazine.com/2017/03/beyond-browser-web-desktop-apps/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An amazing introduction to building your first &lt;a href=&#34;https://nwjs.io/&#34;&gt;nw.js&lt;/a&gt; or &lt;a href=&#34;https://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; desktop app using nothing more than you already know — HTML, CSS and JavaScript. Great explanation of these two popular frameworks with main differences between them clearly highlighted. It is not a 5 minutes read but definitely worth it — I built first working desktop app in less than an hour after reading this article.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;angular-400-now-available&#34;&gt;Angular 4.0.0 Now Available &lt;a href=&#34;#angular-400-now-available&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.co.uk/2017/03/angular-400-now-available.html&#34;&gt;http://angularjs.blogspot.co.uk/2017/03/angular-400-now-available.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We didn&amp;rsquo;t wait too long for the next big number bump in Angular&amp;rsquo;s version. Version 4.0.0 just landed with massive rendering engine optimization that can reduce total size of an app even by 60%. Animations package has been detached from the core to save even more on total projects size. I&amp;rsquo;m confused about versioning of this framework now a bit. Aren&amp;rsquo;t you?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-road-to-resilient-web-design&#34;&gt;The Road To Resilient Web Design &lt;a href=&#34;#the-road-to-resilient-web-design&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2017/03/resilient-web-design/&#34;&gt;https://www.smashingmagazine.com/2017/03/resilient-web-design/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jeremy Keith emphasizing the importance of learning from the past. From &amp;ldquo;Book of Kells&amp;rdquo; through Gutenberg’s invention, &amp;ldquo;A Dao of Web Design&amp;rdquo; by John Allsopp to nowadays where we constantly struggle to reinvite the ideas that the past  solved for us ages ago. It is just an excerpt from Jeremy&amp;rsquo;s web book &lt;a href=&#34;https://resilientwebdesign.com/&#34;&gt;&amp;ldquo;Resilient Web Design&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;functional-setstate-is-the-future-of-react&#34;&gt;Functional setState is the future of React &lt;a href=&#34;#functional-setstate-is-the-future-of-react&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.com/functional-setstate-is-the-future-of-react-374f30401b6b&#34;&gt;https://medium.freecodecamp.com/functional-setstate-is-the-future-of-react-374f30401b6b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really great introduction to functional state management in React. As it turns out from few tweets published the other day by Dan Abramov, this is the future of working with React. Testing process if much easier with it and it is just one of many adventages a doing that in functional manner. Great explanation by &lt;a href=&#34;https://twitter.com/Daajust&#34;&gt;Justice Mba&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fluent interfaces explained</title>
      <link>https://pawelgrzybek.com/fluent-interfaces-explained/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/fluent-interfaces-explained/</guid>
      <description>&lt;p&gt;It doesn&amp;rsquo;t matter whether it is a professional developer writing a complicated Java application, a bored secretary playing Candy Crush Saga on Facebook or my father drinking a beer and reading football news on the Eurosport website — every single activity that is carried out on a computer ends up as a series of ones and zeros that tells the processor what to actually do. All programming languages are just a layer of abstraction on top of this principle. This article isn&amp;rsquo;t about this concept but there is a publication that I can highly recommend to those curious — &lt;a href=&#34;https://www.amazon.com/Definitive-Guide-How-Computers-Math/dp/0471732788&#34;&gt;&amp;ldquo;The Definitive Guide to How Computers Do Math&amp;rdquo;&lt;/a&gt; by Clive Maxfield. The crucial outcome here is the fact that the computer doesn&amp;rsquo;t care about the code readability — we developers do however so the code should be written in a way to help humans to read it. I&amp;rsquo;m almost sure that you heard before this popular sentence taken from from Martin Fowler&amp;rsquo;s &lt;a href=&#34;https://www.amazon.co.uk/Refactoring-Improving-Design-Existing-Technology/dp/0201485672&#34;&gt;book&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Knowing this, imagine a program that is written like a sentence instead of a series of commands in terminated lines. Method chaining, also known as a &amp;ldquo;fluent interface&amp;rdquo;, is a design pattern that allows us to do just that. Today&amp;rsquo;s example is written in JavaScript as that is the language I feel most comfortable with, but the same pattern can be used in many other programming languages too. As always, I&amp;rsquo;m here to explain the practice — the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fluent_interface&#34;&gt;wiki page&lt;/a&gt; contains a great definition and tons of great examples if you need it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In software engineering, a fluent interface (as first coined by Eric Evans and Martin Fowler) is an implementation of an object oriented API that aims to provide more readable code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;create-an-element-add-some-content-and-color-append-to-another-node&#34;&gt;Create an element, add some content and color, append to another node&amp;hellip; &lt;a href=&#34;#create-an-element-add-some-content-and-color-append-to-another-node&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the best fluent interfaces out there is the good old friend of all front-end developers — &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;. The similarity of code written using it to sentences written in English is surely one of the reasons why it has gained such popularity.&lt;/p&gt;
&lt;p&gt;We are going to write a small script that creates a DOM element, manipulates its content, changes colour and allows us to append it to another node. It looks something like this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myElement&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;addText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;addColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;addToElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To use it&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// create a new empty paragraph
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myParagraph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// add text to the element
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myParagraph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;my super paragraph&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// add colour to the element
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myParagraph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// add element to the body
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myParagraph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addToElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is nothing wrong about this code. The amount repetitive steps that we&amp;rsquo;ve taken isn&amp;rsquo;t needed though. Wouldn&amp;rsquo;t it be cool to just write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myParagraph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;some test here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addToElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It looks much better, cleaner and we&amp;rsquo;re not repeating ourselves. Unfortunately it is not going to work because the methods don&amp;rsquo;t return a value at the moment. Luckily the solution is very simple — each method execution should not only edit an element but should also return a reference to the &lt;code&gt;myElement&lt;/code&gt; instance via the &lt;code&gt;this&lt;/code&gt; keyword. Like so&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myElement&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;addText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// returning the instance allows method chaining
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;addColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// returning the instance allows method chaining
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;addToElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// returning the instance allows method chaining
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Fluent interface explained. Bye :-*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 February</title>
      <link>https://pawelgrzybek.com/top-picks-2017-february/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-february/</guid>
      <description>&lt;h2 id=&#34;new-roadmap-for-future-of-publishing-is-underway-as-w3c-and-idpf-officially-combine&#34;&gt;New Roadmap for Future of Publishing is Underway as W3C and IDPF Officially Combine &lt;a href=&#34;#new-roadmap-for-future-of-publishing-is-underway-as-w3c-and-idpf-officially-combine&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3.org/2017/01/pressrelease-idpf-w3c-combination.html.en&#34;&gt;https://www.w3.org/2017/01/pressrelease-idpf-w3c-combination.html.en&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is biggie! W3C responsible for technologies like HTML, CSS, SVG, XML and WCAG combines powers with IDPF that developed the EPUB standard. Future of publishing is much brighter after this announcement. Another great reason to care more about semantic and accessible markup. The difference between books and web pages gets even thinner now.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;html--css-is-hard-but-it-doesnt-have-to-be&#34;&gt;HTML &amp;amp; CSS is hard (But it doesn’t have to be) &lt;a href=&#34;#html--css-is-hard-but-it-doesnt-have-to-be&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://internetingishard.com/html-and-css/&#34;&gt;https://internetingishard.com/html-and-css/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I love web and day by day I love it even more. It&amp;rsquo;s been a long and interesting learning curve to gain the skills that I have and I&amp;rsquo;m sure it will be fun to embrace it even more in the future. I cannot imagine to star my journey with web development today — where to start, how to start, what to do, who should I follow? This resource seems to be an amazing primer for beginners. It is well explained, beautiful and really comprehensive.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;javascript-start-up-performance&#34;&gt;JavaScript Start-up Performance &lt;a href=&#34;#javascript-start-up-performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/dev-channel/javascript-start-up-performance-69200f43b201&#34;&gt;https://medium.com/dev-channel/javascript-start-up-performance-69200f43b201&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Addy Osmani about performance, who else?! Must read for all js devs. As this article clearly presents it is not always about file size. V8 is fantastic with doing an performance optimization for you but it doesn&amp;rsquo;t handle every scenario. Don&amp;rsquo;t dispatch your responsibilities to engine — care about it yourself. Such a great in depth read.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;an-animated-intro-to-rxjs&#34;&gt;An Animated Intro to RxJS &lt;a href=&#34;#an-animated-intro-to-rxjs&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/animated-intro-rxjs/&#34;&gt;https://css-tricks.com/animated-intro-rxjs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks &lt;a href=&#34;https://twitter.com/DavidKPiano&#34;&gt;David Khourshid&lt;/a&gt;, it clicked. Great explanation of RxJS a library to work in reactive style with data. CSS example is only one of the amazing examples how you can use power of RxJs. It is a big part of async workflow of big frameworks like Angular and other ones. It is a great paradigm that it is worth to know.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;testing-your-frontend-code--part-i-introduction&#34;&gt;Testing Your Frontend Code : Part I (Introduction) &lt;a href=&#34;#testing-your-frontend-code--part-i-introduction&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/testing-your-frontend-code-part-i-introduction-7e307eac4446&#34;&gt;https://hackernoon.com/testing-your-frontend-code-part-i-introduction-7e307eac4446&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/giltayar&#34;&gt;Gil Tayar&lt;/a&gt; published an introduction to testing front-end frameworks on hackernoon. It is a initial part from three-parts series but it is already looking promising. Looking forward to following posts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My setup — 2017 February</title>
      <link>https://pawelgrzybek.com/my-setup-2017-february/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/my-setup-2017-february/</guid>
      <description>&lt;p&gt;Programming isn&amp;rsquo;t the only thing that I read about although that&amp;rsquo;s what I mainly write about and very rarely broach other subjects. You definitely won&amp;rsquo;t find any gluten-free vegan cake recipes here, but there is a good chance that I can share with you a few words about some software or hardware. I &lt;a href=&#34;https://pawelgrzybek.com/my-web-development-setup/&#34;&gt;did it before&lt;/a&gt; about two years ago so I think it&amp;rsquo;s just about the right time to wrtie an update. Some things have changed, some things have been replaced but overall everything has been simplified and minimised. I always enjoy these kind of reads so I thought you may like to find out more about my equipment.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#hardware&#34;&gt;Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#software&#34;&gt;Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-services&#34;&gt;Web Services&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hardware&#34;&gt;Hardware &lt;a href=&#34;#hardware&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mattias P Johansson, one of my favourite developers that I highly recommend you to follow on &lt;a href=&#34;https://twitter.com/mpjme&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q&#34;&gt;Youtube&lt;/a&gt;, made a &lt;a href=&#34;https://youtu.be/hlYiWznhhzw&#34;&gt;whole video&lt;/a&gt; about minimalism. Let me quote my favourite part…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything that you acquire, carries a little bit of tiny work that you have to do with it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few years ago I was focused on owning things: the latest devices, top spec computers, expensive cameras etc. It took me a while to realise that I&amp;rsquo;m much happier without it. Reducing the maintenance cost and time that I had to spend with all those things gave me that extra bit of time that I can use to do other things like riding my bike, listening good music or hanging out with my friends. Following this principle my hardware setup hasn&amp;rsquo;t grow at all — the opposite in fact. Essentially I don&amp;rsquo;t have (and don&amp;rsquo;t want to have) things that I don&amp;rsquo;t need. Let&amp;rsquo;s check what&amp;rsquo;s inside my bag.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-02-25-1.jpg&#34;
  alt=&#34;Bose QC 35 &amp;#43; Macbook Pro 2015&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1072&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;macbook-pro-with-retina-display-early-2015&#34;&gt;Macbook Pro with Retina display (Early 2015) &lt;a href=&#34;#macbook-pro-with-retina-display-early-2015&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is a top spec MacBook Pro with a 13 inch screen from early 2015 (3.1GHz Dual-core Intel Core i7, 16GB 1866MHz LPDDR3 SDRAM, Intel Iris Graphics 6100 and 128GB PCIe-based Flash Storage). Of course when I saw a &lt;a href=&#34;http://www.apple.com/macbook-pro/&#34;&gt;new MacBook Pro&lt;/a&gt; with a Touch Bar I was tempted for a little while but… I really like my actual Esc button, I don&amp;rsquo;t need more powerful components and definitely don&amp;rsquo;t want to spend £2500 on something that I don&amp;rsquo;t need (yet). I have an Apple care with extended warranty plan till mid 2018 — the sexy body on each new MacBook won&amp;rsquo;t convince me to throw a small fortune in Tim Cook&amp;rsquo;s pocket any earlier than that. Overall I&amp;rsquo;m very happy with this computer - I don&amp;rsquo;t even use the power that its inner-components have. It has a solid day&amp;rsquo;s battery life, is portable enough to always keep in my rucksack, it still looks sexy and works great with my other devices — it&amp;rsquo;s all I need.&lt;/p&gt;
&lt;h3 id=&#34;iphone-7-plus-32gb&#34;&gt;iPhone 7 Plus 32GB &lt;a href=&#34;#iphone-7-plus-32gb&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I bought my first iPhone in 2010. Since then I haven&amp;rsquo;t used devices from different manufacturers because this one just works. No surprises here - the 32GB version of the iPhone 7 Plus resides in my pocket. It is extremely stable, comfortable to use and it has one feature that makes me love this device — the camera! Sometimes it is just hard to believe that something that small can produce such insanely good quality pictures. There&amp;rsquo;s no rose without a thorn though. I&amp;rsquo;m getting increasingly jealous about the really cool features that users of the latest Android smartphones have access to. &lt;a href=&#34;https://www.smashingmagazine.com/2016/12/the-not-so-secret-powers-of-the-mobile-browser/&#34;&gt;The (Not So) Secret Powers Of The Mobile Browser&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/WalterStephanie/&#34;&gt;Stéphanie Walter&lt;/a&gt; is a great article in Smashing Magazine that walks us through the cool modern features of mobile browsers. Cool, but even though I&amp;rsquo;m ultra excited about it doesn&amp;rsquo;t mean that I can try any of them so… Apple, please — catch up! We (developers) need Service Workers, we want to make progressive web apps, we want to play around with the payment or bluetooth interface as Googlers do. I won&amp;rsquo;t use an Android device for convenience reasons only but I may buy one of those fancy Pixel XL&amp;rsquo;s to mess around with VR and the other cool stuff that Stéphanie wrote about. Apple, please…&lt;/p&gt;
&lt;h3 id=&#34;bose-qc35&#34;&gt;Bose QC35 &lt;a href=&#34;#bose-qc35&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This year another cool gadget joined a list of things that I&amp;rsquo;m not going out without in my bag. The &lt;a href=&#34;https://www.bose.co.uk/en_gb/products/headphones/over_ear_headphones/quietcomfort-35-wireless.html&#34;&gt;Bose QuietComfort 35&lt;/a&gt; wireless headphones is probably the best spent £329.95 in my whole life. When I&amp;rsquo;m coding or writing the importance of isolation from the outside world and being alone with my own thoughts is immensely important. I doubted the sound quality of wireless, non-physical connectivity before I got them. Things have changed and I won&amp;rsquo;t go back to having a cable — no chance. It has some occasional bluetooth connectivity quirks and the battery doesn&amp;rsquo;t last forever but overall I&amp;rsquo;m very happy and I can&amp;rsquo;t imagine a single day of productive work without it. A lightweight construction, robust build and incredible sound quality is what I expected from a product in this price range and I&amp;rsquo;m not disappointed at all. Do you want to test them before placing an order? Grab a beer and pop in my friend.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;software&#34;&gt;Software &lt;a href=&#34;#software&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following the same principle as the hardware, I use much less software on my devices. Compared to &lt;a href=&#34;https://pawelgrzybek.com/my-web-development-setup/&#34;&gt;the same list&lt;/a&gt; that I made few years ago, some of the little toys have been replaced with more holistic productivity solutions, some stayed as they were and lots of stuff just disappeared. Let&amp;rsquo;s check what&amp;rsquo;s on my hard drive.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-02-25-2.jpg&#34;
  alt=&#34;My favorite software&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1072&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;google-chrome&#34;&gt;Google Chrome &lt;a href=&#34;#google-chrome&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There must be a reason why this app has kept it&amp;rsquo;s status of &lt;a href=&#34;http://gs.statcounter.com/&#34;&gt;the most popular web browser&lt;/a&gt; for so many years. No surprises here — Google Chrome is probably the most frequently used app on my computer. Even setting aside the seamless bookmarks, plugins and settings synchronization, this browser has one big advantage over it&amp;rsquo;s competitors — dev tools. The number of helpful panels for web developers is the main reason why I use it. A fantastic team of engineers who are constantly working hard to make it better surprise me every time they announce a new version. React Developer Tools, Vue.js devtools, uBlock Origin, Pinboard Tools, 1Password and JSON Formatter are the only extensions that I have added to it.&lt;/p&gt;
&lt;h3 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code &lt;a href=&#34;#visual-studio-code&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a huge fan and long term &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; user, creator of a few plugins and active supporter of it&amp;rsquo;s development, switching to a different code editor would be the last thing I would have expected a little while ago. However, in the meantime Microsoft produced two things that front-end developers should know about: &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;. Typescript is fantastic, but do you know what I like even more? Yes, Visual Studio Code! Open-source, written entirely with web technologies like HTML, CSS and JavaScript wrapped into a multi-platform desktop app with Electron. It is lightweight, fast, beautiful and extremely powerful. Compared to ST where the learning curve and configuration means it takes some time to fully embrace it&amp;rsquo;s potential, VSCode gives you a top-notch user experience out of the box. The community already loves using and improving it — just have a look at any of the monthly updates and the change log is full of new features. The integrated command line saves me so much time instead of jumping back and forth between editor and iTerm. The integrated git client allows me to commit the progress of my work, fetch changes from my remote branch or push its current state in a fraction of a second. Built in IntelliSense it makes my life a whole lot easier — method definitions, parameter info, auto-completion. When the IDE-ish look of it distracts me I can switch to the minimal Zen mode with a single shortcut. I can really wax lyrical about it but there is no point, just download it, use it and love it as I do. If you are looking for helpful tips for a smooth transition from Sublime Text to Microsoft&amp;rsquo;s product, check a few of my recent articles about &lt;a href=&#34;https://pawelgrzybek.com/sync-vscode-settings-and-snippets-via-dotfiles-on-github/&#34;&gt;config files&lt;/a&gt; and &lt;a href=&#34;https://pawelgrzybek.com/using-the-javascript-console-in-visual-studio-code/&#34;&gt;custom tasks&lt;/a&gt;. You can be assured that I&amp;rsquo;m going to be writing more about it here.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-02-25-3.jpg&#34;
  alt=&#34;Visual Studio Code&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1200&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-02-25-4.jpg&#34;
  alt=&#34;Visual Studio Code Zen Mode&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1200&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sketch--affinity-photo&#34;&gt;Sketch &amp;amp; Affinity Photo &lt;a href=&#34;#sketch--affinity-photo&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m not a designer and I don&amp;rsquo;t use graphic applications as often as I use my code editor. I just need a reliable tool to make a simple logo for my tiny open source projects, quickly smash together a prototype for a client or crop an image of my cat to upload to Facebook. Sketch is probably the best UI design tool that I have ever worked with — not a surprise as the &lt;a href=&#34;https://avocode.com/design-report-2016/&#34;&gt;2016 Web Design Trend Report&lt;/a&gt; clearly shows that Sketch is not a niche application anymore. I love the intuitive workflow, the performance, iCloud integration, resizing options that are not available in other tools and of course the plugins API that opens up a wide range of new features.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://affinity.serif.com/en-gb/photo/&#34;&gt;Affinity Photo&lt;/a&gt; is my Photoshop replacement. Okay so maybe it isn&amp;rsquo;t as powerful, it doesn&amp;rsquo;t have video editing options (why would you need that in PHOTOshop anyway?!) and maybe there aren&amp;rsquo;t as many Youtube tutorials as there are for Photoshop but it still does the job really well. A recent update to &lt;a href=&#34;https://affinity.serif.com/en-gb/photo/new-features/&#34;&gt;version 1.5&lt;/a&gt; brought the app a decent bunch of features that means this app genuinely competes with Adobe Photoshop. It&amp;rsquo;s no suprise that this app won the &lt;a href=&#34;https://affinity.serif.com/blog/affinity-photo-wins-best-imaging-software-award/&#34;&gt;Best Imaging Software Award in 2016&lt;/a&gt;. I published &lt;a href=&#34;https://pawelgrzybek.com/i-wont-miss-you-adobe/&#34;&gt;&amp;ldquo;I won&amp;rsquo;t miss you Adobe&amp;rdquo;&lt;/a&gt; two years ago and nothing has really changed since.&lt;/p&gt;
&lt;h3 id=&#34;alfred&#34;&gt;Alfred &lt;a href=&#34;#alfred&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a long term Alfred user I embraced it&amp;rsquo;s true power only recently. On first glance it looks like the default Spotlight app but when you dig deeper it can be one of the best productivity friends in your life. It&amp;rsquo;s power allowed me to delete so many little apps like &lt;a href=&#34;https://copyless.net/&#34;&gt;CopyLess&lt;/a&gt; and &lt;a href=&#34;http://mizage.com/divvy/&#34;&gt;Divvy&lt;/a&gt;. Apart from features like custom web search, a snippets manager and the multi clipboard it does one more thing that provides almost endless possibilities — &lt;a href=&#34;https://www.alfredapp.com/workflows/&#34;&gt;workflows&lt;/a&gt;. Recently I created a few workflows that were adopted really well in the community: &lt;a href=&#34;https://pawelgrzybek.com/div-simple-alfred-windows-manager/&#34;&gt;Div — a simple Alfred window manager&lt;/a&gt;, &lt;a href=&#34;http://www.packal.org/workflow/github-search&#34;&gt;Github Search&lt;/a&gt; and a handy &lt;a href=&#34;http://www.packal.org/workflow/alfred-npm-search&#34;&gt;npm search&lt;/a&gt;. If you are one of those who like to automate repetitive tasks, this is the tool for you. The basic version is free of charge but the real power comes with &lt;a href=&#34;https://www.alfredapp.com/powerpack/&#34;&gt;Powerpack&lt;/a&gt; that costs the same as about three pints of beer.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-02-25-5.gif&#34;
  alt=&#34;Alfred GitHub and npm search&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;600&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;tweetbot&#34;&gt;Tweetbot &lt;a href=&#34;#tweetbot&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m addicted of Twitter — I literally read every single tweet. The web client is getting better with every update, but in my opinion it is not the most convenient way to consume your feed. Tweetbot by &lt;a href=&#34;https://tapbots.com/&#34;&gt;Tapbots&lt;/a&gt; is an app that I found very useful by giving me features that I don&amp;rsquo;t have from the official app. The &lt;a href=&#34;https://tapbots.com/tweetbot/mac/&#34;&gt;Desktop version&lt;/a&gt; and &lt;a href=&#34;https://tapbots.com/tweetbot/&#34;&gt;iOS one&lt;/a&gt; is the perfect combination because it comes with a timeline sync —  I never miss a single tweet. Mute filters are great for hiding football crap and Rihanna&amp;rsquo;s videos from my feed. The easy shortcut to send items to &amp;ldquo;read later&amp;rdquo; makes it my app of choice and is something that I use a lot. On top of that, this app just looks beautiful. It&amp;rsquo;s not cheap though — wait for a sale that happens occasionally and you won&amp;rsquo;t regret it.&lt;/p&gt;
&lt;h3 id=&#34;reeder&#34;&gt;Reeder &lt;a href=&#34;#reeder&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve used this app since it first came out. I tested other RSS readers in the meantime but I haven&amp;rsquo;t found one that is as good as my favourite &lt;a href=&#34;http://reederapp.com/&#34;&gt;Reeder&lt;/a&gt; by Silvio Rizzi. It&amp;rsquo;s beautiful, full of useful gestures that makes it feel as if it&amp;rsquo;s one of the core mac OS / iOS apps, fast and reliable. If you are old-school like myself and still believe in power of RSS then give this one a try. In combination with a free Feedly account it serves me with fresh content everyday.&lt;/p&gt;
&lt;h3 id=&#34;1password&#34;&gt;1password &lt;a href=&#34;#1password&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Probably the first piece of software that I install on my devices whenever I get new one. It holds all of my passwords and private data under one single password or touch or my thumb on iOS. I know that many other password managers exist and I haven&amp;rsquo;t tried them because this one suits my needs perfectly. The Google Chrome extension gives me access to all my super complicated passwords straight from window of my browser. It syncs really well between my devices via iCloud. If you are concerned about keeping encrypted data in the cloud you can always sync it via wifi and stay away from remote servers. The number of &lt;a href=&#34;https://1password.com/love-from-customers/&#34;&gt;happy 1Password users&lt;/a&gt; doesn&amp;rsquo;t suprise me because I&amp;rsquo;m one of them.&lt;/p&gt;
&lt;h3 id=&#34;things&#34;&gt;Things &lt;a href=&#34;#things&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m not a productivity ninja but I use a kind of &amp;ldquo;to do&amp;rdquo; methodology because I easily forget about stuff. &lt;a href=&#34;https://culturedcode.com/&#34;&gt;Things&lt;/a&gt; is really cool for this! If perfectly fits into GTD (get things done) methodology workflow, offers a dedicated cloud sync and looks beautiful on both iPhone and mac OS. Repetitive tasks, project management and events scheduling is something that sets it apart from default reminder apps.&lt;/p&gt;
&lt;h3 id=&#34;screenflow&#34;&gt;ScreenFlow &lt;a href=&#34;#screenflow&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Do you record screen-casts? Do you need a basic video editing app? Animated gifs are cool, aren&amp;rsquo;t they? This is the app for you. Every single video that I post on Twitter / Facebook, animated gif, screen-cast, &amp;ldquo;how to do&amp;rdquo; video for a client I record via &lt;a href=&#34;http://www.telestream.net/screenflow/&#34;&gt;ScreenFlow&lt;/a&gt;. It is not cheap but worth the money. The very intuitive interface requires almost no learning curve, it has great integration with all possible media formats, tons of shortcuts, configurations options, an amazing library of video tutorials and so many more cool things make it the best screen-cast app ever.&lt;/p&gt;
&lt;h3 id=&#34;mail-app&#34;&gt;Mail App &lt;a href=&#34;#mail-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I do receive emails mainly from Ebay, Amazon, PayPal, Discogs and occasionally from my mom. Default Mail App is everything that I need.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;web-services&#34;&gt;Web services &lt;a href=&#34;#web-services&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The web is powerful enough to work as a great environment to handle powerful and useful web apps. There are plenty of great tools but I use only a few of them. I&amp;rsquo;m not going to go through obvious things like mail providers or contacts / calendars sync services. Just specific tools for specific tasks.&lt;/p&gt;
&lt;h3 id=&#34;pinboard&#34;&gt;Pinboard &lt;a href=&#34;#pinboard&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some time ago I published a &lt;a href=&#34;https://pawelgrzybek.com/bookmarking-with-pinboard/&#34;&gt;whole article&lt;/a&gt; about &lt;a href=&#34;https://pinboard.in/&#34;&gt;Pinboard&lt;/a&gt; created by Maciej Cegłowski. In my opinion this is the best place to bookmark links, opened browser tabs, tweets and articles to read later. The design isn&amp;rsquo;t catchy, it costs a bit of money and it isn&amp;rsquo;t the first bookmarking service that pops out on Google results but it comes with other benefits — usability and performance. The great tagging system, handy browser extensions, and an advanced API that allows other apps to connect with it are my main reasons for using it and not looking elsewhere.&lt;/p&gt;
&lt;h3 id=&#34;feedly&#34;&gt;Feedly &lt;a href=&#34;#feedly&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yeah I know, RSS is dead, blah, blah, blah… Nope! I love RSS and it is still my main source of web info. Since the early days of Google Reader I&amp;rsquo;ve used this technology and it doesn&amp;rsquo;t slow down. Nowadays I use Feedly to fetch feeds from my favourite websites. To consume them I use mentioned above Reeder. The free version is absolutely enough if you need just an aggregator.&lt;/p&gt;
&lt;h3 id=&#34;codepen&#34;&gt;Codepen &lt;a href=&#34;#codepen&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is one of the very few web services that I pay money for and I absolutely don&amp;rsquo;t regret it. I use &lt;a href=&#34;http://codepen.io/&#34;&gt;Codepen&lt;/a&gt; every single day to smash some quick front-end experiment, to check possibilities of my stupid ideas and for…&lt;/p&gt;
&lt;h3 id=&#34;crossbrowsertestingcom&#34;&gt;CrossBrowserTesting.com &lt;a href=&#34;#crossbrowsertestingcom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cross browser testing! It was always a pain. Without paying for an expensive service like BrowserStack you are basically screwed. However, good news is coming! As I&amp;rsquo;m a CodePen Pro user I have access to test all of my experiments with &lt;a href=&#34;https://app.crossbrowsertesting.com/&#34;&gt;CrossBrowserTesting.com&lt;/a&gt; totally for free. That&amp;rsquo;s amazing, isn&amp;rsquo;t it? Its helped me a lot to make a comprehensive tests of one of my recent libraries &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;Siema&lt;/a&gt; and it serves me well every single day. It works like a charm, it is quick and gives me an access to hundreds of browsers across many operating systems. Love it!&lt;/p&gt;
&lt;h3 id=&#34;apple-music&#34;&gt;Apple Music &lt;a href=&#34;#apple-music&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On the other side of my room I have around 500 or so vinyl records categorised into a few categories: polish jazz, polish rap, jazz, rap, funk, compilations, singles, 45s. I love music and I love it not only at home, but I love it when I work, when I run or when I cook. It would be difficult to grab a &lt;a href=&#34;https://en.wikipedia.org/wiki/Technics_SL-1200&#34;&gt;Technics SL-1200&lt;/a&gt; for an evening run however. Apple Music is my service of choice. I don&amp;rsquo;t want to go in depth why I chose this one over another one. I tried it, it works great, it doesn&amp;rsquo;t cost fortune and doesn&amp;rsquo;t require additional software apart from the one that already resides on my mac.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Of course that&amp;rsquo;s not everything that I use on a daily basis but I didn&amp;rsquo;t want to write a mile-long article. Let me list few cool ones but not worth to spent a paragraph on them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/d/Womens-Watches/Timex-Unisex-T2N746-Quartz-Analogue-Display-Multicolour/B0078QHI86/ref=sr_1_12?ie=UTF8&amp;amp;qid=1487930930&amp;amp;sr=8-12&amp;amp;keywords=timex+weekender&#34;&gt;Timex Weekender T2N746&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.evanscycles.com/production/bikes/road-bikes/product-image/969-638/subrosa-letum-fixed-2011-single-speed-bike-EV136031-9999-1.jpg&#34;&gt;Subrosa Letum 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Victorinox-Spartan-Swiss-Army-Knife-x/dp/B0001P15CG/ref=sr_1_11?ie=UTF8&amp;amp;qid=1487931219&amp;amp;sr=8-11&amp;amp;keywords=Victorinox+pocket+knife&#34;&gt;Victorinox Spartan Swiss Army Knife&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uk.hermes.com/perfumes/men/terre-d-hermes.html&#34;&gt;Terre d&amp;rsquo;Hermès&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thenorthface.co.uk/shop/en-gb/tnf-gb/women%26-39%3Bs-vault-backpack-CHJ1?variationId=SRS&#34;&gt;North Face Vault Black&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Damn, this has turned out to be much longer than I initially planned. Sorry if you got bored! If you have published an article or video about your setup, please send me a link. I&amp;rsquo;m sure I will revisit this again at some point in the future.&lt;/p&gt;
&lt;p&gt;Until next time, stay safe :-*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2017 January</title>
      <link>https://pawelgrzybek.com/top-picks-2017-january/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2017-january/</guid>
      <description>&lt;h2 id=&#34;typescript-the-missing-introduction&#34;&gt;TypeScript: the missing introduction &lt;a href=&#34;#typescript-the-missing-introduction&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://toddmotto.com/typescript-the-missing-introduction#background&#34;&gt;https://toddmotto.com/typescript-the-missing-introduction#background&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of my colleagues recommended me TypeScript the other day as a thing that I necessarily need to have a look at — future of JS. I was stubborn for quite a while until I came across this great primer to TypeScript by &lt;a href=&#34;https://twitter.com/MrJamesHenry&#34;&gt;James Henry&lt;/a&gt;. It just makes sense! JavaScript is first (and the only one) programming language that I know and I didn&amp;rsquo;t really understand concept of types from other languages. I learned a lot about coercion and explicitly used it in my applications. This article made my life a bit easier and I commit myself to dig deeper into TS.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;colorme&#34;&gt;ColorMe &lt;a href=&#34;#colorme&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colorme.io/&#34;&gt;https://colorme.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/tylergaw&#34;&gt;Tyler Gaw&lt;/a&gt; built a great tool that is insanely helpful to understand CSS color functions! ColorMe allow you to preview code generated by applying new filter to base colors. It is a React app built on top of Create React App. More about building process on &lt;a href=&#34;https://tylergaw.com/articles/introducing-colorme&#34;&gt;Tyler&amp;rsquo;s blog post&lt;/a&gt;. Thanks for creating it mate!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sublime-tutor&#34;&gt;Sublime Tutor &lt;a href=&#34;#sublime-tutor&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sublimetutor.com/&#34;&gt;https://sublimetutor.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New to Sublime Text? This plugin will make you a ST hero in few hours. Such a great idea! Thanks &lt;a href=&#34;https://twitter.com/jaipandya&#34;&gt;Jai Pandya&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;native-ecmascript-modules---the-first-overview&#34;&gt;Native ECMAScript modules - the first overview &lt;a href=&#34;#native-ecmascript-modules---the-first-overview&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.hospodarets.com/native-ecmascript-modules-the-first-overview&#34;&gt;https://blog.hospodarets.com/native-ecmascript-modules-the-first-overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally it is happening — the best part of ECMAScript 2015 specification is just coming to the browsers (beginning of 2017, yeah). Safari 19 Technical Preview and Edge 15 ( with the flags enabled) allow us to use native js modules without using bundlers like Webpack or Browserify. Serg goes in depth about it and shows some working examples. Thanks for this write up!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;webpack-22-the-final-release&#34;&gt;webpack 2.2: The Final Release &lt;a href=&#34;#webpack-22-the-final-release&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/webpack/webpack-2-2-the-final-release-76c3d43bf144#.i46qs4hfj&#34;&gt;https://medium.com/webpack/webpack-2-2-the-final-release-76c3d43bf144#.i46qs4hfj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We were waiting for it ages and its finally here. Final release of second version of the best module bundler in JavaScript community is ready! Check the new version and go through migration guide on new official &lt;a href=&#34;https://webpack.js.org/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;understanding-the-critical-rendering-path&#34;&gt;Understanding the Critical Rendering Path &lt;a href=&#34;#understanding-the-critical-rendering-path&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://bitsofco.de/understanding-the-critical-rendering-path/&#34;&gt;https://bitsofco.de/understanding-the-critical-rendering-path/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Such a helpful article to understand critical rendering mechanism in the browser by &lt;a href=&#34;https://twitter.com/ireaderinokun&#34;&gt;Ire Aderinokun&lt;/a&gt;. Every single step well explained followed by screenshot of &amp;ldquo;Performance&amp;rdquo; tab from Google Chrome Canary which clarify the whole process even more.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;solving-the-web-performance-crisis&#34;&gt;Solving the Web Performance Crisis &lt;a href=&#34;#solving-the-web-performance-crisis&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://channel9.msdn.com/Blogs/msedgedev/nolanlaw-web-perf-crisis&#34;&gt;https://channel9.msdn.com/Blogs/msedgedev/nolanlaw-web-perf-crisis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nolan Lawson about web performance bloat that is a mainly fault of JavaScript. Number of great tricks and trips and tons of great advices related to currently popular workflows / toolchains.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-global-object-in-javascript-a-matter-of-platforms-unreadable-code-and-not-breaking-the-internet&#34;&gt;The global object in Javascript: a matter of platforms, unreadable code and not breaking the internet &lt;a href=&#34;#the-global-object-in-javascript-a-matter-of-platforms-unreadable-code-and-not-breaking-the-internet&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.contentful.com/blog/2017/01/17/the-global-object-in-javascript/&#34;&gt;https://www.contentful.com/blog/2017/01/17/the-global-object-in-javascript/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stefan Judis explains the current (very messy) state of global object in multiple JavaScript environments. Really cool article that points out great tip of using function constructor as a argument inside IIFE (Immediately Invoked Function Expression) to return global object.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;announcing-ionic-200-final&#34;&gt;Announcing Ionic 2.0.0 Final &lt;a href=&#34;#announcing-ionic-200-final&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.ionic.io/announcing-ionic-2-0-0-final/&#34;&gt;http://blog.ionic.io/announcing-ionic-2-0-0-final/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ionic working closely with Angular team just announced a stable version of of of the best mobile frameworks ever made — Ionic 2. It is based on Angular 2, written in ES2015, packed with tons of new components, easier theaming, boosted performance and new shiny docs. Nice!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;implementing-save-for-offline-with-service-workers&#34;&gt;Implementing &amp;ldquo;Save For Offline&amp;rdquo; with Service Workers &lt;a href=&#34;#implementing-save-for-offline-with-service-workers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://una.im/save-offline/&#34;&gt;https://una.im/save-offline/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moving out to New York city and facing poor mobile connection can be a great insightful experience. Thats why Una Kravets implemented recently a &amp;ldquo;Save for Offline&amp;rdquo; feature on her personal website. Really great and well explained tour to basics of Service Worker.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-promise-of-a-burger-party&#34;&gt;The Promise of a Burger Party &lt;a href=&#34;#the-promise-of-a-burger-party&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://kosamari.com/notes/the-promise-of-a-burger-party&#34;&gt;http://kosamari.com/notes/the-promise-of-a-burger-party&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you like burgers but for some reason still don&amp;rsquo;t understand a concept of Promises in JavaScript? Mariko Kosaka published another sketched explanation — Promise is a main subject of this one. Such a great idea, cool illustration and fantastic sense of humor.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;thisjavascript-0128---vue-react-angular-rxjs-polymer--ember&#34;&gt;This.JavaScript 01/28 - Vue, React, Angular, RxJS, Polymer &amp;amp; Ember &lt;a href=&#34;#thisjavascript-0128---vue-react-angular-rxjs-polymer--ember&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/InOWBvseRYU&#34;&gt;https://youtu.be/InOWBvseRYU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What happened with number of best JS frameworks in 2016 and what is a road map for 2017? Answers for those and many more interesting questions you can get on this session with creators of these popular tools. Personally I&amp;rsquo;m hipper excited that the React will return multi-element components from render method.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new in ECMAScript 2017</title>
      <link>https://pawelgrzybek.com/whats-new-in-ecmascript-2017/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/whats-new-in-ecmascript-2017/</guid>
      <description>&lt;p&gt;Two years ago when ECMAScript 2015 (colloquially known as a ES6) was standarised there was a massive update to the language. Announced at the same time was a yearly release plan that aims to deliver a new version of the language annually and ship it with the &lt;a href=&#34;https://github.com/tc39/ecma262/blob/master/README.md&#34;&gt;proposals&lt;/a&gt; that are ready at the time of the TC39 meeting. The list of language improvements is open and you can track it on the &lt;a href=&#34;https://github.com/tc39/proposals&#34;&gt;TC39 Github account&lt;/a&gt;. You can find more info about the process itself &lt;a href=&#34;https://tc39.github.io/process-document/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A year ago I published a &lt;a href=&#34;https://pawelgrzybek.com/whats-new-in-ecmascript-2016-es7/&#34;&gt;summary of new features from the 2016 spec&lt;/a&gt;, and the list below presents the recently agreed proposals that will become part of ECMAScript this year.&lt;/p&gt;
&lt;h2 id=&#34;async-functions&#34;&gt;Async functions &lt;a href=&#34;#async-functions&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Chained callbacks should have been ditched a long time ago. The combination of promises and generators provides a much better opportunity to work with asynchronous code in ECMAScript. &lt;a href=&#34;https://tc39.github.io/ecmascript-asyncawait/&#34;&gt;Async functions&lt;/a&gt; proposed by &lt;a href=&#34;https://twitter.com/bterlson&#34;&gt;Brian Terlson&lt;/a&gt; introduces a syntactic sugar for this powerful combination. &lt;a href=&#34;https://twitter.com/jaffathecake&#34;&gt;Jake Archibald&lt;/a&gt; published a &lt;a href=&#34;https://developers.google.com/web/fundamentals/primers/async-functions&#34;&gt;good introduction&lt;/a&gt; to the subject but if you are looking for a deeper explanation with tons of examples and use cases I highly recommend you have a look at &lt;a href=&#34;https://ponyfoo.com/articles/understanding-javascript-async-await&#34;&gt;&amp;ldquo;Understanding JavaScript’s async await&amp;rdquo;&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/nzgb&#34;&gt;Nicolás Bevacqua&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;async function doSomething(id) {
  try {
    const valueOne = await someAsyncFunction(id);
    const valueTwo = await anotherAsyncFunction(valueOne);
    console.log(`Woho! The output of async call is: ${valueTwo}`);
  }
  catch (err) {
    console.log(&#39;Uuuups!&#39;, err);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;shared-memory-and-atomics&#34;&gt;Shared Memory and Atomics &lt;a href=&#34;#shared-memory-and-atomics&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tc39/ecmascript_sharedmem&#34;&gt;This proposal&lt;/a&gt; by Lars T Hansen adds a form of shared memory to JavaScript. The new &lt;code&gt;SharedArrayBuffer&lt;/code&gt; and  pre-existing &lt;code&gt;TypedArray&lt;/code&gt; and &lt;code&gt;DataView&lt;/code&gt; types can be used to allocate shared memory. The new &lt;code&gt;Atomics&lt;/code&gt; object allows you to carry out some operations using shared memory. Quoting the author of this proposal it should help developers to handle the following use cases&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Support for threaded code in programs written in other languages that are translated to asm.js or plain JS or a combination of the two, notably C and C++ but also other, safe, languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Support for hand-written JS or JS+asm.js that makes use of multiprocessing facilities for select tasks, such as image processing, asset management, or game AI.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tc39/ecmascript_sharedmem/blob/master/TUTORIAL.md&#34;&gt;A brief tutorial&lt;/a&gt; created by Lars T Hansen is a great explainer. &lt;a href=&#34;http://2ality.com/2017/01/shared-array-buffer.html&#34;&gt;This article&lt;/a&gt; by Dr. Axel Rauschmayer is a lengthy article that I highly encourage you to read if you would like to understand the background and dive deeper.&lt;/p&gt;
&lt;h2 id=&#34;objectvalues-and-objectentries&#34;&gt;Object.values and Object.entries &lt;a href=&#34;#objectvalues-and-objectentries&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We don&amp;rsquo;t need lodash or jQuery anymore to return enumerable pairs of entries or values from an object. The popularity of this use case have made &lt;code&gt;values()&lt;/code&gt; and &lt;code&gt;entries()&lt;/code&gt; new methods on the Object prototype in ES2017. Thanks to &lt;a href=&#34;https://twitter.com/ljharb&#34;&gt;Jordan Harband&lt;/a&gt; for &lt;a href=&#34;https://github.com/tc39/proposal-object-values-entries&#34;&gt;this proposal&lt;/a&gt;. Lets have a look at an example&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pawelgrzybek&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Paweł&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pawelgrzybek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Returns
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// [ [ &amp;#39;name&amp;#39;, &amp;#39;Paweł&amp;#39; ], [ &amp;#39;age&amp;#39;, 29 ] ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pawelgrzybek&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Paweł&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pawelgrzybek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Returns
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// [ &amp;#39;Paweł&amp;#39;, 29 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;string-padding&#34;&gt;String padding &lt;a href=&#34;#string-padding&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally! &lt;a href=&#34;https://github.com/tc39/proposal-string-pad-start-end&#34;&gt;Jordan Harband &amp;amp; Rick Waldron&lt;/a&gt; just saved npm before the next catastrophe (read &lt;a href=&#34;http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/&#34;&gt;here&lt;/a&gt; if you don&amp;rsquo;t remember the leftpad crsis). Formatting of script output will become easier with the &lt;code&gt;padStart()&lt;/code&gt; and &lt;code&gt;padEnd()&lt;/code&gt; methods. Examples&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pawelgrzybek&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;        pawelgrzybek&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;pawelgrzybek&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;********pawelgrzybek&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pawelgrzybek&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padEnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;pawelgrzybek        &amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;pawelgrzybek&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padEnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// &amp;#34;pawelgrzybek********&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;objectgetownpropertydescriptors&#34;&gt;Object.getOwnPropertyDescriptors &lt;a href=&#34;#objectgetownpropertydescriptors&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Copying between two objects has never been simple and never more required than now. In the age of functional programming where an object&amp;rsquo;s immutability is crucial, having a native method to help us with that would be perfect. Introduced in ES2015 &lt;code&gt;Object.assign()&lt;/code&gt; seems to be a good candidate to do this, but unfortunately &lt;a href=&#34;http://2ality.com/2016/02/object-getownpropertydescriptors.html&#34;&gt;it has its limitations&lt;/a&gt;. Jordan Harband &amp;amp; Andrea Giammarchi proposed &lt;a href=&#34;https://github.com/tc39/proposal-object-getownpropertydescriptors&#34;&gt;this feature&lt;/a&gt; to solve the issue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Some name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sourceClone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stateClone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// some changes on stateClone
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// some changes on stateClone
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stateClone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;trailing-commas-in-function-parameter-lists&#34;&gt;Trailing commas in function parameter lists &lt;a href=&#34;#trailing-commas-in-function-parameter-lists&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jeff Morrison proposed this &lt;a href=&#34;https://github.com/tc39/proposal-trailing-function-commas&#34;&gt;pretty aesthetic update&lt;/a&gt;. &lt;a href=&#34;https://pawelgrzybek.com/trailing-comma-in-ecmascript2017-function-parameter-list/&#34;&gt;I published a whole article&lt;/a&gt; about it the other day. Essentially you can place a trailing comma after the last function parameter now and your compiler won&amp;rsquo;t complain at you. It will improve the readability of the output in version control systems.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;paramsOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;paramsTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;paramsThree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Look ma! Trailing comma!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is it for this year. Some of these features are already implemented in your browser and the majority of them can be transpiled with a little help from Babel and some appropriate plugins. Personally, I&amp;rsquo;m extremely happy about async functions and this is definitely my favourite feature that will become a part of ECMAScript 2017. What are your thoughts? Is there anything in particular that you would like to see in the language&amp;rsquo;s core next year?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the JavaScript console in Visual Studio Code</title>
      <link>https://pawelgrzybek.com/using-the-javascript-console-in-visual-studio-code/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/using-the-javascript-console-in-visual-studio-code/</guid>
      <description>&lt;p&gt;Some time ago I published an article about the &lt;a href=&#34;https://pawelgrzybek.com/javascript-console-in-sublime-text/&#34;&gt;JavaScript console in Sublime Text&lt;/a&gt;. It&amp;rsquo;s turned out to be one of the most popular articles on this website. As I recently changed my code editor from &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; to &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt; I found a solution to replicate this functionality.&lt;/p&gt;
&lt;p&gt;Similar to &lt;a href=&#34;http://docs.sublimetext.info/en/latest/reference/build_systems.html&#34;&gt;Build Systems&lt;/a&gt; in Sublime Text, Visual Studio Code comes with &lt;a href=&#34;https://code.visualstudio.com/docs/editor/tasks&#34;&gt;Tasks&lt;/a&gt; that allows us to pass a file to an external program without manually switching between the code editor and the Terminal. This is essentially all that we need to do — pass a currently active file to a JavaScript interpreter (&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node&lt;/a&gt; in this case - so make sure it is installed on your computer).&lt;/p&gt;
&lt;h2 id=&#34;create-javascript--node-task-in-vscode&#34;&gt;Create JavaScript / Node task in VSCode &lt;a href=&#34;#create-javascript--node-task-in-vscode&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A VSCode Task is a set of instructions in a JSON file that resides in our projects file. Unfortunately at this moment it isn&amp;rsquo;t possible to create globally available tasks — they need to be added per project. The good news is that the development of VSCode is rapid so we may see global tasks appear very soon as &lt;a href=&#34;https://github.com/Microsoft/vscode/issues/1435&#34;&gt;I&amp;rsquo;m not the only one&lt;/a&gt; who wants this feature. To create a Task hit &lt;code&gt;cmd + shift + p&lt;/code&gt; on Mac, &lt;code&gt;ctrl + shift + p&lt;/code&gt; on Windows / Linux or simply &lt;code&gt;F1&lt;/code&gt; on any platform to show the Command Palette, type &amp;ldquo;Tasks: Configure Task&amp;rdquo; then &amp;ldquo;Create tasks.json file from template&amp;rdquo; and choose &amp;ldquo;Others&amp;rdquo; from the list. Time to configure the task.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Show in console&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;osx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/bin/node ${file}&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/bin/node ${file}&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\\Program Files\\nodejs\\node.exe ${file}&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;isDefault&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OK, so what is going on here? When we run a task called &amp;ldquo;Show in console&amp;rdquo; this will run a shell command that takes our currently opened file as an argument preceded by the path to our node executable. To make things even easier the &lt;code&gt;group.kind&lt;/code&gt; property lets us run this task via &lt;code&gt;shift + cmd + b&lt;/code&gt; keyboard shortcut.&lt;/p&gt;
&lt;p&gt;In most cases the &amp;ldquo;node&amp;rdquo; in &lt;code&gt;command&lt;/code&gt; property does the job instead of passing a full path. I found this method more reliable though. The path can vary depending on operating system, version and installation method. Update &lt;code&gt;command&lt;/code&gt; according to the output of &lt;code&gt;which node&lt;/code&gt;. On Windows the equivalent command is &lt;code&gt;where node&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-01-18-1.jpg&#34;
  alt=&#34;Find path to node executable in Terminal&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;778&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Time for the fun bit! Create an amazing script and enjoy the instant output in your code editor by pressing &lt;code&gt;shift + cmd + b&lt;/code&gt; or by running the &amp;ldquo;Show in console&amp;rdquo; task from the Command Palette. Hopefully this helped you out. Stay curious and build amazing things!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-01-18-2.gif&#34;
  alt=&#34;Find path to node executable in Terminal&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;496&#34;
/&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sync VSCode settings and snippets via dotfiles on Github</title>
      <link>https://pawelgrzybek.com/sync-vscode-settings-and-snippets-via-dotfiles-on-github/</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/sync-vscode-settings-and-snippets-via-dotfiles-on-github/</guid>
      <description>&lt;p&gt;My text editor and the browser are probably the most frequently used applications in my daily work routine. As long as you are logged in to Google Chrome (or any other browser) the synchronization of settings and plugins happens in the background. Unfortunately syncing settings between applications like VSCode is not as straight forward. However, just because it doesn&amp;rsquo;t come baked into the software it doesn&amp;rsquo;t mean it is impossible.&lt;/p&gt;
&lt;p&gt;As a long term Sublime Text user I managed to use Github to sync its settings across multiple machines via &lt;a href=&#34;https://github.com/pawelgrzybek/dotfiles&#34;&gt;.dotfiles&lt;/a&gt;. I used Atom for a little while and I found a way to mimic this mechanism for it as well. &lt;a href=&#34;https://pawelgrzybek.com/sync-atom-between-multiple-devices/&#34;&gt;I published an article&lt;/a&gt; about it the other day. Today it is time to show you how to do it with VSCode. By the way - &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt; is awesome!&lt;/p&gt;
&lt;h2 id=&#34;moving-vscode-settings-to-dotfiles&#34;&gt;Moving VSCode settings to .dotfiles &lt;a href=&#34;#moving-vscode-settings-to-dotfiles&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The folder in which your VSCode settings and snippets reside depends on the operating system. &lt;a href=&#34;https://code.visualstudio.com/Docs/customization/userandworkspace&#34;&gt;User and Workspace Settings&lt;/a&gt; and its locations are described in the official documentation. As a macOS user I will provide some snippets associated with this operating system, but if you are a Windows or Linux user feel free to follow along and replace the paths accordingly. Before pasting anything into your Terminal make sure to shut down VSCode.&lt;/p&gt;
&lt;p&gt;OK, let&amp;rsquo;s move the settings files and the directory containing your snippets to your .dotfiles that is located in the root folder.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv ~/Library/Application\ Support/Code/User/settings.json ~/.dotfiles/VSCode/
mv ~/Library/Application\ Support/Code/User/keybindings.json ~/.dotfiles/VSCode/
mv ~/Library/Application\ Support/Code/User/snippets/ ~/.dotfiles/VSCode/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-symbolic-links-to-vscode-settings-file-directory&#34;&gt;Create symbolic links to VSCode settings file directory &lt;a href=&#34;#create-symbolic-links-to-vscode-settings-file-directory&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All that we need is in the correct location now, time to create symlinks to those files.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ln -s /Users/pawelgrzybek/.dotfiles/VSCode/settings.json /Users/pawelgrzybek/Library/Application\ Support/Code/User/settings.json
ln -s /Users/pawelgrzybek/.dotfiles/VSCode/keybindings.json /Users/pawelgrzybek/Library/Application\ Support/Code/User/keybindings.json
ln -s /Users/pawelgrzybek/.dotfiles/VSCode/snippets/ /Users/pawelgrzybek/Library/Application\ Support/Code/User
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Boom! And it&amp;rsquo;s done! Easy eh? Now you can commit the new &amp;ldquo;Code&amp;rdquo; directory to your .dotfiles repo, create symbolic links across all your machines and enjoy version controlled settings and snippets.&lt;/p&gt;
&lt;p&gt;If you have any idea how to sync the list of plugins installed from VS Code Marketplace please let me know in the comments. Have a great day :*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A look back at 2016</title>
      <link>https://pawelgrzybek.com/a-look-back-at-2016/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/a-look-back-at-2016/</guid>
      <description>&lt;p&gt;I have never used this website to reveal anything about myself as an individual. It&amp;rsquo;s always been a technical blog without delving into personal feelings and photos of my cat (ok maybe &lt;a href=&#34;https://pawelgrzybek.com/image-tag-vs-background-property/&#34;&gt;once&lt;/a&gt;). I&amp;rsquo;m going to keep it this way but the article that you are reading now will be the only exception. The end of a year and beginning of a new one is a fantastic opportunity to summarise my achievements, failures and set up some goals for the upcoming year.&lt;/p&gt;
&lt;p&gt;This year was pretty wild personally. It&amp;rsquo;s been full of tough incidents like my mother&amp;rsquo;s cancer (she is fine now) that taught me a lot and made me look at life from a totally different perspective. Next year is going to be very important for me because from the 20th August 2017 I wont see a &amp;ldquo;2&amp;rdquo; in front of my age anymore. I&amp;rsquo;m going to be 30 this year! Let me present my professional and personal achievements of the past year followed by my 2017 goals.&lt;/p&gt;
&lt;h2 id=&#34;professional&#34;&gt;Professional &lt;a href=&#34;#professional&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Creare is the company where I worked for almost two years. It was an amazing time for me but in the middle of 2016 the management of the company changed and I made the snap decision to leave. It was time to find a better place where I could grow, fueled by my passion for the web. Literally on the same day I left the company, the guys from &lt;a href=&#34;https://www.enginecreative.co.uk/&#34;&gt;Engine Creative&lt;/a&gt; sent me an invitation for a Front-End Dev position. It is a company with an amazing reputation and it is not an easy thing to join a team of the most creative people in middle England. I did it and I&amp;rsquo;m extremely proud to be a part of this great company. I learn a lot, I receive lots of inspiration from my co-workers, huge support from the directors and I feel that I can make an impact (that sounds so hipster). Thanks Engine!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-01-03-1.jpg&#34;
  alt=&#34;Engine Creative Team&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1200&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;A developer&amp;rsquo;s life doesn&amp;rsquo;t stop at 5PM when I leave the office. It&amp;rsquo;s been the best year for my open source contributions ever! I contributed over 800 times into a plethora of open source projects. The most successful of my open source projects is &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;Siema&lt;/a&gt; - a simple carousel plugin written in pure JS with no dependencies. I did it totally for fun, but the community has adopted these few lines of code with great enthusiasm. Many thanks open source people!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-01-03-2.jpg&#34;
  alt=&#34;GitHub contribution graph in 2016&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;342&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;The website that you are looking at has grown insanely. Maybe not massively grown in content but it has gained increasingly high popularity. With around 80 unique daily visitors last year I&amp;rsquo;m now talking about over 3000 unique visitors every single day. This is what I call a personal success! This year I wrote 30 articles and I consider this a huge achievement. Thanks for reading guys, this is the thing that will keep me publishing more and more in 2017.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-01-03-3.jpg&#34;
  alt=&#34;Unique visitor on my website in December 2016&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;555&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;personal&#34;&gt;Personal &lt;a href=&#34;#personal&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This year I realised that I have a problem. I totally lost the balance between the personal and professional parts of my life. Losing this balance cannot be considered a life success but acknowledging it can be a good starting point in doing something about it. More about this in the resolutions section below.&lt;/p&gt;
&lt;p&gt;For the first time in my life I have some savings. I managed to find a reasonable balance between the things that I need and the things that I want — this is definitely helpful when you are facing your 30s.&lt;/p&gt;
&lt;p&gt;This year I took my first decent holiday in years and I understood the importance of time away from my computer. Thanks to my amazing friend Christina who invited me to spend a week with her in a small, beautiful village in Greece. I have to say that when I came back after that holiday my productivity was better than ever before. I&amp;rsquo;m adding a decent holiday to the list of things that I&amp;rsquo;m going to do regularly every year. Thanks again Christina :-*&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-01-03-4.jpg&#34;
  alt=&#34;Beach in Pefkohori with Christina&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1199&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;In 2015 I didn&amp;rsquo;t read a single non-technical book. Unfortunately I still cannot share with you any impressive statistics about the number of non-technical books that I read in 2016 but it is getting better. It is such a great feeling to read something that doesn&amp;rsquo;t require every single cog in your brain to spin. I want to do it more often.&lt;/p&gt;
&lt;h2 id=&#34;in-2017-i-will&#34;&gt;In 2017 I will&amp;hellip; &lt;a href=&#34;#in-2017-i-will&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My main focus in 2017 is around finding a healthy balance between my personal and professional life. I want to enter my 30s in great mental condition and slightly better physical condition.&lt;/p&gt;
&lt;p&gt;Speaking about my professional self, 2017 is a year of new things! In 2017 I will learn a new programming language just for fun. It may be Elm, it may be Swift or my first steps with C - we will see. Another new skill that I&amp;rsquo;m planning to learn is video making. I&amp;rsquo;m not going to dedicate my whole life to it, but I feel the need to do something more in this area. As a huge fan of photography I&amp;rsquo;m planning to invest some money in a new system of Sony cameras and get my hands dirty with video making.&lt;/p&gt;
&lt;p&gt;A few years ago I didn&amp;rsquo;t know English at all, but since I met my other half and moved to the UK five years ago things have changed and my communication skills are getting better. Although it&amp;rsquo;s still not perfect I&amp;rsquo;m ready to accept a big challenge — speak at my first conference ever. I have been invited to one reputable event and have accepted it! Crazy! I have submitted to do a few talks for other European conferences in 2017. Stay tuned and &lt;a href=&#34;https://twitter.com/pawelgrzybek&#34;&gt;follow me on Twitter&lt;/a&gt; to find out more later on this year.&lt;/p&gt;
&lt;p&gt;I have now been together with my girlfriend for five years and for all the better (and despite some of the worst) moments we have decided to go one step further. This is too personal for me to share more details here. But, essentially, I&amp;rsquo;ve grown up :)&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2017-01-03-5.jpg&#34;
  alt=&#34;My girlfriend Olga and myself&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1200&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;I wish you all an amazing 2017 guys. See you right here, same place, same time next year :*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 December</title>
      <link>https://pawelgrzybek.com/top-picks-2016-december/</link>
      <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-december/</guid>
      <description>&lt;h2 id=&#34;control-web-typography-with-css-font-display&#34;&gt;Control web typography with CSS font display &lt;a href=&#34;#control-web-typography-with-css-font-display&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.creativebloq.com/advice/control-web-typography-with-css-font-display&#34;&gt;http://www.creativebloq.com/advice/control-web-typography-with-css-font-display&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great exhalation of font-display property by Umar Hansa. As writing this article browser support isn&amp;rsquo;t amazing but it works great as a progressive enhancement. This is going to part of every font-face declaration it the short future.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lockfiles-should-be-committed-on-all-projects&#34;&gt;Lockfiles should be committed on all projects &lt;a href=&#34;#lockfiles-should-be-committed-on-all-projects&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://yarnpkg.com/blog/2016/11/24/lockfiles-for-all&#34;&gt;https://yarnpkg.com/blog/2016/11/24/lockfiles-for-all&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;James Kyle explains why we should commit yarn.lock files to our repositories. Makes sense. Essential read for all open source contributors.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-web-worldwide&#34;&gt;The Web Worldwide &lt;a href=&#34;#the-web-worldwide&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.webworldwide.io/&#34;&gt;https://www.webworldwide.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/tkadlec&#34;&gt;Tim Kadlec&lt;/a&gt; build another amazing tool that is a great source of knowledge for every web developer / designer. I quickly compared two countries — United Kingdom (where I live) and Poland (my homeland) and the data is shocking! I&amp;rsquo;m going to use it a lot. Thanks Tim for building this!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-grid&#34;&gt;CSS Grid! &lt;a href=&#34;#css-grid&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://meyerweb.com/eric/thoughts/2016/12/05/css-grid/&#34;&gt;http://meyerweb.com/eric/thoughts/2016/12/05/css-grid/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eric Meyer answers popular questions about CSS Gris Module that is coming to our browsers very soon (March 2017). Lots of good insights here. The most controversial question is &amp;ldquo;Are we ready?&amp;rdquo;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rounded corners aren’t universally supported even now, but I bet you’ve used them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gpu-animation-doing-it-right&#34;&gt;GPU Animation: Doing It Right &lt;a href=&#34;#gpu-animation-doing-it-right&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/&#34;&gt;https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The best thing that I have ever read about animations. Sergey Chikuyonok (creator of popular tool Emmet) gives us a list of amazing advices about silky smooth animations in CSS, number of great technical explanations and tons of examples. Must read this month!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;javascript30&#34;&gt;JavaScript30 &lt;a href=&#34;#javascript30&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://javascript30.com/&#34;&gt;https://javascript30.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You read a book about JavaScript, you went through all available courses online, you mastered your console logs in your browser but you still haven&amp;rsquo;t build a proper JavaScript project yet. Wes Bos is coming with a course that is perfect for you. It takes 30 days and each day Wes builds a new js experiment. The best teacher is practice, and this is motto of this course. Highly recommended!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;smashingconf-barcelona-2016---marcin-wichary-on-to-hell-for-type&#34;&gt;SmashingConf Barcelona 2016 - Marcin Wichary on To Hell For Type &lt;a href=&#34;#smashingconf-barcelona-2016---marcin-wichary-on-to-hell-for-type&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/190403389&#34;&gt;https://vimeo.com/190403389&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure you love typography on &lt;a href=&#34;https://medium.com/&#34;&gt;Medium.com&lt;/a&gt;. Marcin Wichary explain why you love it! Essentially it is piece of art and every single edge case is taken into consideration. Great and funny talk!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-not-so-secret-powers-of-the-mobile-browser&#34;&gt;The (Not So) Secret Powers Of The Mobile Browser &lt;a href=&#34;#the-not-so-secret-powers-of-the-mobile-browser&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/12/the-not-so-secret-powers-of-the-mobile-browser/&#34;&gt;https://www.smashingmagazine.com/2016/12/the-not-so-secret-powers-of-the-mobile-browser/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Meet the great power of modern web APIs. Great example with imaginary Zoe written by &lt;a href=&#34;https://twitter.com/WalterStephanie&#34;&gt;Stéphanie Walter&lt;/a&gt;. This article made me want to buy a Pixel by Google. Shame on you Apple!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;front-end-developers-are-information-architects-too&#34;&gt;Front-End Developers Are Information Architects Too &lt;a href=&#34;#front-end-developers-are-information-architects-too&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://24ways.org/2016/front-end-developers-are-information-architects-too/&#34;&gt;https://24ways.org/2016/front-end-developers-are-information-architects-too/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The core of front end development explained in a great write up by Francis Storr. Let&amp;rsquo;s face the reality - nowadays there is more buzz around CSS in JavaScript built with Webpack 2 instead of semantic markup or accessible modal. WRONG! Eye opening article that shows us how we neglected this industry.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;an-overview-of-client-side-storage&#34;&gt;An Overview of Client-Side Storage &lt;a href=&#34;#an-overview-of-client-side-storage&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://bitsofco.de/an-overview-of-client-side-storage/&#34;&gt;https://bitsofco.de/an-overview-of-client-side-storage/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great explanation / comparison of all possible methods of storing a data in the client / browser. A love the examples next to each method.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;front-end-performance-checklist-2017&#34;&gt;Front-End Performance Checklist 2017 &lt;a href=&#34;#front-end-performance-checklist-2017&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/12/front-end-performance-checklist-2017-pdf-pages/&#34;&gt;https://www.smashingmagazine.com/2016/12/front-end-performance-checklist-2017-pdf-pages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comprehensive list of best performance practices created by Vitaly Friedman. New year is a great opportunity to refresh or rebuild your website from scratch, it is worth to have a look here.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlling-the-specificity&#34;&gt;Controlling the Specificity &lt;a href=&#34;#controlling-the-specificity&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://kizu.ru/en/fun/controlling-the-specificity/&#34;&gt;http://kizu.ru/en/fun/controlling-the-specificity/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately specificity is not something that everyone who writes CSS cares about - people should. If you don&amp;rsquo;t even know what specificity is I published a &lt;a href=&#34;https://pawelgrzybek.com/css-specificity-explained/&#34;&gt;great explanation&lt;/a&gt; the other day. Roman Komarov definitely mastered it and took it to the next level by showing us how to control specificity score by using &lt;code&gt;:not()&lt;/code&gt; selector. Great in depth article for all CSS maniacs.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;batch-resizing-images-from-the-command-line-on-a-mac&#34;&gt;Batch resizing images from the command line on a Mac &lt;a href=&#34;#batch-resizing-images-from-the-command-line-on-a-mac&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://jameschambers.co/writing/batch-resize-images-mac-command-line/&#34;&gt;http://jameschambers.co/writing/batch-resize-images-mac-command-line/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You don&amp;rsquo;t have to open image in the Photoshop to resize it. There is a something called &amp;ldquo;scriptable image processing system&amp;rdquo; that is available in your command line under &lt;code&gt;sips&lt;/code&gt; keyword - James Chambers explains really well how to utilize it on daily basis.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-comes-next-is-the-future&#34;&gt;What Comes Next Is the Future &lt;a href=&#34;#what-comes-next-is-the-future&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.futureisnext.com/&#34;&gt;http://www.futureisnext.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What Comes Next Is the Future is a documentary film about the web created by Matt Griffin. About the past, present and the future of the most influential medium ever created by people who build it. Dozens of people who made a huge impact on the web like: Jeffrey Zeldman, Tim Berners-Lee, Ethan Marcotte, Eric Meyer, Alex Russell, Jonathan Snook and many more. Must watch!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-dark-side-of-polyfilling-css&#34;&gt;The Dark Side of Polyfilling CSS &lt;a href=&#34;#the-dark-side-of-polyfilling-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://philipwalton.com/articles/the-dark-side-of-polyfilling-css/&#34;&gt;https://philipwalton.com/articles/the-dark-side-of-polyfilling-css/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Making a JavaScript polyfill is a piece of cake compared to creating one for CSS. Philip Walton explains this nightmare. Thumbs up for project &lt;a href=&#34;https://github.com/w3c/css-houdini-drafts/wiki&#34;&gt;Houdini&lt;/a&gt;. If you prefer to watch than read, &lt;a href=&#34;http://www.thedotpost.com/2016/12/philip-walton-the-dark-side-of-polyfilling-css&#34;&gt;Philip gave a talk&lt;/a&gt; based on this article on dotCS 2016 conference.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I built a thing! Siema!</title>
      <link>https://pawelgrzybek.com/i-built-a-thing-siema/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-built-a-thing-siema/</guid>
      <description>&lt;p&gt;There are two things that you shouldn&amp;rsquo;t do in 2016 — build a carousel plugin or making another grid system. Practically every other website at the moment belongs in one of those two categories. Crazy people!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve already built a &lt;a href=&#34;https://pawelgrzybek.com/do-you-really-need-another-grid-system/&#34;&gt;grid system&lt;/a&gt; and today I would like to present you a new tool that I created. Yes, you guessed it - a carousel plugin! &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;Siema&lt;/a&gt; is a very lightweight (just 1kb gzipped) tool written in pure JavaScript with no dependencies. It is well supported (IE10, Chrome 12, Firefox 16, opera 15, Safari 4, Android 4 and iOS 6) and the documentation is easy to digest for beginners. It is 100% open-source and &lt;a href=&#34;https://github.com/pawelgrzybek/siema&#34;&gt;available on Github&lt;/a&gt;. Use it totally for free on personal or commercial projects. It comes with a few options and an API that exposes a few useful methods. Detailed documentation and an installation video tutorial is available on &lt;a href=&#34;https://pawelgrzybek.github.io/siema/&#34;&gt;Siema&amp;rsquo;s website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-12-08-1.jpg&#34;
  alt=&#34;Siema - Lightweight and simple carousel with no dependencies&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1000&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Bug fixes and feature suggestions are more than welcome. Siema&amp;rsquo;s purpose is to provide a basic carousel tool and allow developers to extend it by using the available methods. It doesn&amp;rsquo;t come with any complex configuration and myriad options — I would like to keep it this way. If you need a more powerful library I recommend the amazing &lt;a href=&#34;http://flickity.metafizzy.co/&#34;&gt;Flickity&lt;/a&gt; by David DeSandro or &lt;a href=&#34;http://idangero.us/swiper/&#34;&gt;Swiper&lt;/a&gt; by iDangero team.&lt;/p&gt;
&lt;p&gt;Siema means &amp;lsquo;hello&amp;rsquo; in Polish. When I play around with some code, I always use random names. That&amp;rsquo;s the whole story behind the name of this one :) Huge thanks to &lt;a href=&#34;http://www.sibenberg.com/&#34;&gt;Jarkko Sibenberg&lt;/a&gt; for the cute logo design!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s the deal with the Pointer Events in JavaScript?</title>
      <link>https://pawelgrzybek.com/whats-the-deal-with-the-pointer-events-in-javascript/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/whats-the-deal-with-the-pointer-events-in-javascript/</guid>
      <description>&lt;p&gt;Have you ever worked on a UI component that depends on events triggered by a pointer device? It can be a mouse, touch pad or more precise tools like the pencil often used with an iPad Pro or other devices like the Samsung Galaxy Note. Touch devices are also reading events triggered by your fingers. But wait a sec — it is 2016 — pressure and tilt-aware devices exist and presumably you&amp;rsquo;ve got one in your pocket.&lt;/p&gt;
&lt;p&gt;Essentially trying to fulfil a rich experience for all those scenarios is a mess. When is a &lt;code&gt;mouseleave&lt;/code&gt; or &lt;code&gt;mouseout&lt;/code&gt; event triggered? Does it bubble up? How can we stop the propagation of an event but keep another one registered? What does &lt;code&gt;touchenter&lt;/code&gt; do? If all those questions don&amp;rsquo;t confuse you enough, have a look at the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events&#34;&gt;events reference&lt;/a&gt; — there&amp;rsquo;s a gazillion of them!&lt;/p&gt;
&lt;p&gt;Time for the good news! The recently updated &lt;a href=&#34;https://developers.google.com/web/updates/2016/11/nic55&#34;&gt;Google Chrome 55&lt;/a&gt; comes with a &lt;a href=&#34;https://w3c.github.io/pointerevents/&#34;&gt;Pointer Events&lt;/a&gt; interface that will help us to unify our way of handling all input events in a hardware-agnostic way. Surprisingly &lt;a href=&#34;https://caniuse.com/#feat=pointer&#34;&gt;this is not&lt;/a&gt; one of those Chrome-only features that we won&amp;rsquo;t be able to use in production for the next decade. It&amp;rsquo;s been implemented in Microsoft Internet Explorer 11 and all Edge versions. Chrome and Opera are just joining the bandwagon. Firefox has partial support and Safari without any known info about the implementation are great candidates to use a &lt;a href=&#34;https://github.com/jquery/PEP&#34;&gt;polyfill&lt;/a&gt; maintained by the jQuery team.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The primary goal is to provide a single set of events and interfaces that allow for easier authoring for cross-device pointer input while still allowing for device-specific handling only when necessary for an augmented experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;kill-three-birds-with-one-stone&#34;&gt;Kill three birds with one stone &lt;a href=&#34;#kill-three-birds-with-one-stone&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yeah three! Mouse, pen and touch. To make migration easier, the spec is designed based on the naming of most generic mouse events. For example &lt;code&gt;mousedown&lt;/code&gt; becomes &lt;code&gt;pointdown&lt;/code&gt;. Just by making this change we are gaining access to information like: pressure level, contact geometry, tilt etc.&lt;/p&gt;
&lt;p&gt;So instead of doing&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;somethingCool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// do some more cool stuff here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;somethingCool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;touchdown&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// do some more cool stuff here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can simply do&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;somethingCool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pointerdown&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// do some more cool stuff here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you would like to keep input-specific event handling by using a single pointer event you can use the &lt;code&gt;pointerType&lt;/code&gt; property. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;somethingCool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pointerdown&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pointerType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mouse&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* mouse detected */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pen&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* pen / stylus detected */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;touch&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* touch detected */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* pointerType unknown or cannot be detected */&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;other-benefits-of-pointer-events&#34;&gt;Other benefits of Pointer Events &lt;a href=&#34;#other-benefits-of-pointer-events&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apart from providing a cleaner and unified API to deal with user inputs, Pointer Events comes with other benefits. The most important one is the performance gain that comes built-in by taking advantage of &lt;a href=&#34;https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md&#34;&gt;passive event listeners&lt;/a&gt;. Removing unnecessary blocked-by-browser events can make a huge impact on scrolling executed on touch devices. Have a look at &lt;a href=&#34;https://youtu.be/65VMej8n23A&#34;&gt;this video&lt;/a&gt; that shows the scrolling experience on CNN website - UX is immensely improved by using it!&lt;/p&gt;
&lt;h2 id=&#34;love-it-use-it&#34;&gt;Love it! Use it! &lt;a href=&#34;#love-it-use-it&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I&amp;rsquo;m not the biggest fan of polyfills I&amp;rsquo;m going to deliberately use it going forward. For the time being, basic feature detection will do&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PointerEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Yaah, the future is now!
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Back to reality
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hopefully you&amp;rsquo;ll like the Pointer Events API as much as I do. Any thoughts? Then the comments section below is all yours! Found this helpful? Share buttons are provided too below. Stay curious until the next time guys!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 November</title>
      <link>https://pawelgrzybek.com/top-picks-2016-november/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-november/</guid>
      <description>&lt;h2 id=&#34;responsive-images-are-here-now-what&#34;&gt;Responsive Images Are Here. Now What? &lt;a href=&#34;#responsive-images-are-here-now-what&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/177732167&#34;&gt;https://vimeo.com/177732167&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jason Grigsby goes through use cases, methods and possible techniques of responsive images. A bit of background, spec design considerations and a bit about the future of working with images in responsive web design. Great talk from An Event Apart Austin.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;getting-started-with-webpack-2&#34;&gt;Getting Started with Webpack 2 &lt;a href=&#34;#getting-started-with-webpack-2&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.madewithenvy.com/getting-started-with-webpack-2-ed2b86c68783&#34;&gt;https://blog.madewithenvy.com/getting-started-with-webpack-2-ed2b86c68783&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Drew Powers wrote a great tutorial about basic usage of upcoming Webpack 2. He does a great job in explaining concept of module bundling with Webpack in general.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;debugging-the-web-chrome-dev-summit-2016&#34;&gt;Debugging The Web (Chrome Dev Summit 2016) &lt;a href=&#34;#debugging-the-web-chrome-dev-summit-2016&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/HF1luRD4Qmk&#34;&gt;https://youtu.be/HF1luRD4Qmk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul Irish presented new bunch of dev tools features on this years Chrome Dev Summit. From improvements to multi line scripts in the console to amazing experience about debugging frontend and backend node applications in the same window. I&amp;rsquo;m pretty excited about intelligent workspaces mapping instead of manually linking assets from the hard drive. Great talk!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;not-an-imposter-fighting-front-end-fatigue&#34;&gt;Not An Imposter: Fighting Front-End Fatigue &lt;a href=&#34;#not-an-imposter-fighting-front-end-fatigue&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/11/not-an-imposter-fighting-front-end-fatigue/&#34;&gt;https://www.smashingmagazine.com/2016/11/not-an-imposter-fighting-front-end-fatigue/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/DaveOrDead&#34;&gt;David Berner&lt;/a&gt; chose a perfect timing to write this article. I feel a bit burned out and I lost a motivation to publish a great new articles every week. It&amp;rsquo;s worth to remember that we are not the only people who struggle with this syndrome. It is absolutely fine to don&amp;rsquo;t know all those amazing things that twitter told us about. Really great article!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;affinity-designer-for-windows-has-launched&#34;&gt;Affinity Designer for Windows has launched! &lt;a href=&#34;#affinity-designer-for-windows-has-launched&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://affinity.serif.com/blog/affinity-designer-for-windows-has-launched/&#34;&gt;https://affinity.serif.com/blog/affinity-designer-for-windows-has-launched/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I ditched Adobe products more than a year ago and &lt;a href=&#34;https://pawelgrzybek.com/i-wont-miss-you-adobe/&#34;&gt;I don&amp;rsquo;t miss it at all&lt;/a&gt;. Affinity Photo is a tool that I replaced Photoshop with. It is not that complex, not that advanced, but interface is extremely similar and it does everything than I need. The only downside of this tool was mac OS compatibility only. Today officially windows users can join the club. Happy days!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;i-totally-forgot-about-print-style-sheets&#34;&gt;I totally forgot about print style sheets &lt;a href=&#34;#i-totally-forgot-about-print-style-sheets&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@matuzo/i-totally-forgot-about-print-style-sheets-f1e6604cfd6&#34;&gt;https://medium.com/@matuzo/i-totally-forgot-about-print-style-sheets-f1e6604cfd6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have you ever heard saying &amp;ldquo;The Cobbler&amp;rsquo;s Children Have No Shoes&amp;rdquo; — this is the reason why I neglected my website so much. I promise to update a design and make it more accessibility friendly very soon. Print styles is another thing that I will do — thanks to this great article by &lt;a href=&#34;https://twitter.com/mmatuzo&#34;&gt;Manuel Matuzovic&lt;/a&gt;. Collection of great tips how to improve printed websites.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;image-effects-with-css&#34;&gt;Image Effects with CSS &lt;a href=&#34;#image-effects-with-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://bennettfeely.com/image-effects/&#34;&gt;http://bennettfeely.com/image-effects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WOW! Such a great resource by &lt;a href=&#34;https://twitter.com/bennettfeely&#34;&gt;Bennett Feely&lt;/a&gt; to embrace CSS blending mode / filters. Thanks for making that Bennett.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-grid-layout-landing-in-google-chrome-canary&#34;&gt;CSS Grid Layout landing in Google Chrome Canary &lt;a href=&#34;#css-grid-layout-landing-in-google-chrome-canary&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chromium.googlesource.com/chromium/src/+/79bd413143afe5ad68104a3c99b9c04f64fc25ac&#34;&gt;https://chromium.googlesource.com/chromium/src/+/79bd413143afe5ad68104a3c99b9c04f64fc25ac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CSS Grid is the future of our applications layout. I published a &lt;a href=&#34;https://pawelgrzybek.com/lets-get-into-the-basics-of-css-grid-layout-model/&#34;&gt;basic introduction&lt;/a&gt; to this subject some time ago. It is enabled by default in new version of Google Chrome Canary. Everything looks like we will get this feature in stable version of the most popular browser with the beginning of a next year. Happy days.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 October</title>
      <link>https://pawelgrzybek.com/top-picks-2016-october/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-october/</guid>
      <description>&lt;h2 id=&#34;vue-20-is-here&#34;&gt;Vue 2.0 is Here! &lt;a href=&#34;#vue-20-is-here&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8&#34;&gt;https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After few months of working, 8 alphas, 8 betas and 8 rcs the new version of one of the most popular frameworks is here. Rewritten rendering layer makes it one of the fastest frameworks out there. JSX support, server side rendering and works across Web, iOS and Android! I had a pleasure to built one project with it already and it was probably the easiest journey &amp;ldquo;from zero to hero&amp;rdquo;. Great documentation full of examples under every section, very active community and amazing CLI makes it really solid framework.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-react-do&#34;&gt;How React Do? &lt;a href=&#34;#how-react-do&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.jfo.click/how-react-do/&#34;&gt;http://blog.jfo.click/how-react-do/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jeff Fowler and his deep dive into very basics of react. Great read for curious React beginners.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;flex-grow-9999-hack&#34;&gt;Flex-grow 9999 Hack &lt;a href=&#34;#flex-grow-9999-hack&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://joren.co/flex-grow-9999-hack/&#34;&gt;http://joren.co/flex-grow-9999-hack/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cleaver flexbox trick. Two elements spread in single line only when there is enough room and nicely fill the view with elements under neath of each other. I ❤︎ flexbox.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;html-kong&#34;&gt;HTML Kong &lt;a href=&#34;#html-kong&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.xn--8ws00zhy3a.com/blog/2016/07/html-kong&#34;&gt;https://www.xn&amp;ndash;8ws00zhy3a.com/blog/2016/07/html-kong&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To make the conclusion of a &lt;a href=&#34;https://www.christianheilmann.com/2016/10/05/can-we-stop-bad-mouthing-css-in-developer-talks-please/&#34;&gt;great article&lt;/a&gt; by Christian Heilmann even stronger, I&amp;rsquo;m coming with another reason to show you the power of pure CSS. Mind blown!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;yarn-a-new-package-manager-for-javascript&#34;&gt;Yarn: A new package manager for JavaScript &lt;a href=&#34;#yarn-a-new-package-manager-for-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.facebook.com/posts/1840075619545360&#34;&gt;https://code.facebook.com/posts/1840075619545360&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript doesn&amp;rsquo;t slow down. Guys from Facebook, Google and Tilde put together a package manager of 2016. The main difference is speed and security. After quick tests it is incredibly fast and works offline out of the box! Looking forward to see the progress of it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lea-verou---css-variables&#34;&gt;Lea Verou - CSS Variables &lt;a href=&#34;#lea-verou---css-variables&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/2an6-WVPuJU&#34;&gt;https://youtu.be/2an6-WVPuJU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CSS Custom Properties (called CSS Variables by many people) are going to change the way how we write our styling. On this talk Lea presents few super cool tricks that lean on CSS Variables. Fantastic talk! If you need a very basic primer, these are two articles that I published the other day: &lt;a href=&#34;https://pawelgrzybek.com/css-custom-properties-explained/&#34;&gt;&amp;ldquo;CSS Custom Properties explained&amp;rdquo;&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://pawelgrzybek.com/css-mixins-with-apply-rule/&#34;&gt;CSS mixins with @apply rule&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-the-web-became-unreadable&#34;&gt;How the Web Became Unreadable &lt;a href=&#34;#how-the-web-became-unreadable&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://backchannel.com/how-the-web-became-unreadable-a781ddc711b6&#34;&gt;https://backchannel.com/how-the-web-became-unreadable-a781ddc711b6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t entirely agree with an author of this article but Kevin Marks makes a really good point here. A quick story about design trends that breaks the most important principle of the web - accessible for everybody. Great read.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Loop through a collection of DOM elements</title>
      <link>https://pawelgrzybek.com/loop-through-a-collection-of-dom-elements/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/loop-through-a-collection-of-dom-elements/</guid>
      <description>&lt;p&gt;It is easy to think of a collection of DOM elements as a regular JavaScript array. This is a gotcha that many beginners fall into (including myself). NodeLists don&amp;rsquo;t share all of the &lt;code&gt;Array&lt;/code&gt;’s prototype methods, but there are a heap of ways to achieve the desired result. Let&amp;rsquo;s go through the list of possible methods and hacks. No frameworks or libraries today - it&amp;rsquo;s pure js day fellaz!&lt;/p&gt;
&lt;h2 id=&#34;nodelistforeach&#34;&gt;NodeList.forEach() &lt;a href=&#34;#nodelistforeach&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Aha! You&amp;rsquo;ll know this method mainly from the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&#34;&gt;Array&amp;rsquo;s prototype&lt;/a&gt; but actually some browsers contain this function in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach&#34;&gt;prototype of NodeList&lt;/a&gt; too. However, because of the lack of sufficient browser support I wouldn&amp;rsquo;t consider it the way to go. This list would have been incomplete without it though.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Chrome - yeep&lt;/li&gt;
&lt;li&gt;Firefox &amp;gt;= 50&lt;/li&gt;
&lt;li&gt;IE - hazard a guess!&lt;/li&gt;
&lt;li&gt;Edge - nope&lt;/li&gt;
&lt;li&gt;Opera - yeep&lt;/li&gt;
&lt;li&gt;Safari (stable version) - nope&lt;/li&gt;
&lt;li&gt;Safari (Technology Preview) - yeep&lt;/li&gt;
&lt;li&gt;Android - nope&lt;/li&gt;
&lt;li&gt;Android (Chrome) - yeep&lt;/li&gt;
&lt;li&gt;Firefox Mobile - yeep&lt;/li&gt;
&lt;li&gt;iOS - nope&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fontFamily&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Comic Sans MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Chrome - &amp;#39;Comic Sans MS&amp;#39; everywhere dudes! Sweet!
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Firefox - TypeError: articles.forEach is not a function
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;arrayprototypeforeach&#34;&gt;Array.prototype.forEach() &lt;a href=&#34;#arrayprototypeforeach&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If &lt;code&gt;forEach()&lt;/code&gt; doesn&amp;rsquo;t exist in &lt;code&gt;NodeList&lt;/code&gt;&#39;s prototype, you can always ask your good friend &lt;code&gt;Array&lt;/code&gt; to lend it to you — your browser definitely has this (if it&amp;rsquo;s not Internet Explorer 8 or below).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fontFamily&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Comic Sans MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// or
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fontFamily&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Comic Sans MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you don&amp;rsquo;t like &lt;code&gt;call()&lt;/code&gt; or &lt;code&gt;apply()&lt;/code&gt; you can convert the DOM elements to an array first and then use &lt;code&gt;forEach()&lt;/code&gt; as you intend to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// or
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[...&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// or
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fontFamily&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Comic Sans MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can even go absolutely crazy and add Array&amp;rsquo;s &lt;code&gt;forEach()&lt;/code&gt; to &lt;code&gt;NodeList.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NodeList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;NodeList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HTMLCollection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;HTMLCollection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fontFamily&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Comic Sans MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All three of the snippets above will work just fine. They do feel a bit hacky though and I&amp;rsquo;m &lt;a href=&#34;https://toddmotto.com/ditch-the-array-foreach-call-nodelist-hack/&#34;&gt;not the only one&lt;/a&gt; who thinks like this. Bear in mind that the spread operator presented above &lt;code&gt;[...]&lt;/code&gt; and &lt;code&gt;Array.from()&lt;/code&gt; are parts of the modern spec. To use them without worry equip yourself with &lt;a href=&#34;https://pawelgrzybek.com/use-modern-javascript-today-with-babel/&#34;&gt;Babel&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;for-loop&#34;&gt;for loop &lt;a href=&#34;#for-loop&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The good ol&amp;rsquo; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for&#34;&gt;&lt;code&gt;for&lt;/code&gt; loop&lt;/a&gt; is a good candidate to do this job. It&amp;rsquo;s a very well supported and reliable method. No hacks, no babels!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fontFamily&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Comic Sans MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;for-of-loop&#34;&gt;for-of loop &lt;a href=&#34;#for-of-loop&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The ECMAScript 2015 spec brought us a new tool to traverse through iterable objects. As we saw in the previous example, &lt;code&gt;NodeList&lt;/code&gt; is definitely an iterable collection so we can easily add a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&#34;&gt;for..of&lt;/a&gt; loop to our collection. &lt;a href=&#34;https://pawelgrzybek.com/use-modern-javascript-today-with-babel/&#34;&gt;Babel&lt;/a&gt; may be helpful in this instance as it is a part of the spec that is a bit more modern than your clients requirements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;articles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fontFamily&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Comic Sans MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions &lt;a href=&#34;#conclusions&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully this list of methods (and hacks) helped you out. Use whatever feels right depending on your use case. My preferable method from the list above is the &lt;code&gt;for...of&lt;/code&gt; loop as almost every single line of my code goes through a compiler that will translate it to a syntax that even old school browsers can handle. If I need to quickly smash an example out I use a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;Let me know your thoughts. What is your preferred method to traverse through DOM elements? If you liked this article the share buttons are right below. Bye :*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 September</title>
      <link>https://pawelgrzybek.com/top-picks-2016-september/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-september/</guid>
      <description>&lt;h2 id=&#34;the-case-for-custom-elements&#34;&gt;The Case for Custom Elements &lt;a href=&#34;#the-case-for-custom-elements&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/dev-channel/the-case-for-custom-elements-part-1-65d807b4b439&#34;&gt;https://medium.com/dev-channel/the-case-for-custom-elements-part-1-65d807b4b439&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Great intro followed by &lt;a href=&#34;https://medium.com/dev-channel/the-case-for-custom-elements-part-2-2efe42ce9133&#34;&gt;another part&lt;/a&gt; about native Custom Elements. Rob Dodson did a great job explaining the concept and practical use case of new API that is coming to out browsers soon.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-inaccessible-web-how-we-got-into-this-mess&#34;&gt;The inaccessible web: how we got into this mess &lt;a href=&#34;#the-inaccessible-web-how-we-got-into-this-mess&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://uxdesign.cc/the-inaccessible-web-how-we-got-into-this-mess-7cd3460b8e32&#34;&gt;https://uxdesign.cc/the-inaccessible-web-how-we-got-into-this-mess-7cd3460b8e32&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A mandatory read for teachers, content writers, designers, developers, digital product managers and also clients. Don&amp;rsquo;t be lazy. Read it and make the web a better place. Thanks for write up &lt;a href=&#34;https://twitter.com/MischaAndrews&#34;&gt;Mischa Andrews&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-there-is-no-css4---explaining-css-levels&#34;&gt;Why there is no CSS4 - explaining CSS Levels &lt;a href=&#34;#why-there-is-no-css4---explaining-css-levels&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rachelandrew.co.uk/archives/2016/09/13/why-there-is-no-css4-explaining-css-levels/&#34;&gt;https://www.rachelandrew.co.uk/archives/2016/09/13/why-there-is-no-css4-explaining-css-levels/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CSS Module levels explained. Thanks Rachel!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;angular-2&#34;&gt;Angular 2 &lt;a href=&#34;#angular-2&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.co.uk/2016/09/angular2-final.html&#34;&gt;http://angularjs.blogspot.co.uk/2016/09/angular2-final.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After 6 years of releasing initial version of Angular, we finally got a second version of one of the most popular JavaScript framework. Improved performance, modularity and support for desktop and mobile devices are main features. Documentations looks amazing compared to previous version!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-whole-new-github-universe-announcing-new-tools-forums-and-features&#34;&gt;A whole new GitHub Universe: announcing new tools, forums, and features &lt;a href=&#34;#a-whole-new-github-universe-announcing-new-tools-forums-and-features&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/blog/2256-a-whole-new-github-universe-announcing-new-tools-forums-and-features&#34;&gt;https://github.com/blog/2256-a-whole-new-github-universe-announcing-new-tools-forums-and-features&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The biggest update to Github platform yet. Projects allows to easily organize issues, pull requests and notes directly from repository. New ways or code reviews finally looks like it should ages ago. New profile view, brand new API to integrate your tool with Github and much more&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;homebrew-100&#34;&gt;Homebrew 1.0.0 &lt;a href=&#34;#homebrew-100&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://brew.sh/2016/09/21/homebrew-1.0.0/&#34;&gt;http://brew.sh/2016/09/21/homebrew-1.0.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, after 7 years of development Homebrew (the missing package manager for mac OS users) hit the stable 1.0.0 version.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-cartoon-guide-to-flux&#34;&gt;A cartoon guide to Flux &lt;a href=&#34;#a-cartoon-guide-to-flux&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207&#34;&gt;https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have you ever wondering what the whole Flux buzz is about, what it does, how does it work? That is probably the easier to digest guide around the web. Thanks &lt;a href=&#34;https://twitter.com/linclark&#34;&gt;Lin Clark&lt;/a&gt; for a great write / draw up. Next one about &lt;a href=&#34;https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6&#34;&gt;Redux&lt;/a&gt; is equally cool!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;loading-polyfills-only-when-needed&#34;&gt;Loading Polyfills Only When Needed &lt;a href=&#34;#loading-polyfills-only-when-needed&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://philipwalton.com/articles/loading-polyfills-only-when-needed/?utm_source=codropscollective&#34;&gt;https://philipwalton.com/articles/loading-polyfills-only-when-needed/?utm_source=codropscollective&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Philip Walton about loading polyfills in the most convenient way for users of the most recent browsers and the most optimal for browsers that partially support required set of features. Great article and great simple to follow solution.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mark-robbins--modern-css-and-interactive-email--css-day-2016&#34;&gt;Mark Robbins | Modern CSS and interactive email | CSS Day 2016 &lt;a href=&#34;#mark-robbins--modern-css-and-interactive-email--css-day-2016&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/181481382&#34;&gt;https://vimeo.com/181481382&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I promise, I will never complain for complexity of some JavaScript applications again. This talk literally blown my mind! Proper interactivity in email clients explained by Mark Robbins. Mind blowing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trailing comma in ECMAScript 2017 function parameter list</title>
      <link>https://pawelgrzybek.com/trailing-comma-in-ecmascript2017-function-parameter-list/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/trailing-comma-in-ecmascript2017-function-parameter-list/</guid>
      <description>&lt;p&gt;Object and array literals allow us to leave a comma dangling off the final item since the third version of ECMAScript (although the implementation in IE8 and below is a clear exception). Other programming languages (Python, D, Hack and probably many more) allow it in functions as well. JavaScript will be joining this list very soon people! &lt;a href=&#34;https://twitter.com/lbljeffmo&#34;&gt;Jeff Morrison&lt;/a&gt; is the author of the &lt;a href=&#34;https://jeffmo.github.io/es-trailing-function-commas/&#34;&gt;Trailing Commas in Function Param Lists&lt;/a&gt; proposal that is going to be merged with the upcoming ECMAScript 2017 spec. If you don&amp;rsquo;t know what the heck I&amp;rsquo;m talking about, have a look at this basic example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Array without trailing comma
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;pawel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Array with trailing comma
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;pawel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Object without trailing comma
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pawel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Object with trailing comma
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pawel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Function declaration without trailing comma
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// blah blah blah
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Function declaration with trailing comma
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// blah blah blah
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Function invocation without trailing comma
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;pawel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Function invocation with trailing comma
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;pawel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This article is not one of those stylistic dilemmas like &amp;ldquo;semicolon or die&amp;rdquo;. In my opinion it is 100% about personal preference. Let&amp;rsquo;s talk a bit about the benefits of the new feature and how to deal with it now.&lt;/p&gt;
&lt;h2 id=&#34;nice-vcs-diff-and-easier-code-manipulations&#34;&gt;Nice VCS diff and easier code manipulations &lt;a href=&#34;#nice-vcs-diff-and-easier-code-manipulations&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The new feature won&amp;rsquo;t supercharge the output of your app whatsoever but can definitely benefit your codebase &lt;a href=&#34;https://medium.com/@nikgraf/why-you-should-enforce-dangling-commas-for-multiline-statements-d034c98e36f8&#34;&gt;manipulation and maintainability&lt;/a&gt;. Here&amp;rsquo;s a few reasons why:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nicer to read diffs&lt;/li&gt;
&lt;li&gt;Easier code rearranging&lt;/li&gt;
&lt;li&gt;You can programmatically generate code without extra logic for the last item&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-09-28-1.jpg&#34;
  alt=&#34;Nicer diff of objet with trailing comma in iTerm&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;1134&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-09-28-2.jpg&#34;
  alt=&#34;Nicer diff of objet with trailing comma in Tower 2&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;610&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;babel-to-use-eslint-to-check&#34;&gt;Babel to use, ESLint to check &lt;a href=&#34;#babel-to-use-eslint-to-check&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Babel is like a time capsule that allows us to use the syntax of the future today. &lt;a href=&#34;https://babeljs.io/docs/plugins/preset-es2017/&#34;&gt;Babel-preset-es2017&lt;/a&gt; is something worth including in your &lt;code&gt;.babelrc&lt;/code&gt; file. As an another confirmed feature that is coming with ES2017 — async functions support comes with this preset as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# install the cli and this preset&lt;/span&gt;
npm install --save-dev babel-cli babel-preset-es2017

&lt;span class=&#34;c1&#34;&gt;# make a .babelrc (config file) with the preset&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ &amp;#34;presets&amp;#34;: [&amp;#34;es2017&amp;#34;] }&amp;#39;&lt;/span&gt; &amp;gt; .babelrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ESLint is my gramma checker of choice. The &lt;a href=&#34;http://eslint.org/docs/rules/comma-dangle&#34;&gt;&lt;code&gt;comma-dangle&lt;/code&gt;&lt;/a&gt; allows you to enforce a dangling comma in object and array literals. It doesn&amp;rsquo;t work with function declarations and invocations yet, but with the recently added &lt;a href=&#34;http://eslint.org/blog/2016/09/eslint-v3.6.0-released&#34;&gt;support for ES2017&lt;/a&gt; it is just a matter of time. Have a look at the example of this &lt;code&gt;.eslint.js&lt;/code&gt; config file that enables this rule.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;env&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;browser&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;extends&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eslint:recommended&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;parserOptions&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ecmaVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2017&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;sourceType&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;rules&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;comma-dangle&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;s1&#34;&gt;&amp;#39;always-multiline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;dangle-conclusion&#34;&gt;Dangle conclusion &lt;a href=&#34;#dangle-conclusion&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A trailing comma is one of those things that definitely won&amp;rsquo;t make you a better JavaScript developer. However, it is cool to see the progress of a language after the adoption of a yearly release plan. The spec for 2017 is still shaping up and you can follow the stage of all proposals on the &lt;a href=&#34;https://github.com/tc39/proposals&#34;&gt;TC39 repository&lt;/a&gt;. Personally I&amp;rsquo;m still digesting the 2015 update. Stay tuned and wait for more articles about upcoming front-end goodies. Until next time pals :*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sync Atom between multiple devices</title>
      <link>https://pawelgrzybek.com/sync-atom-between-multiple-devices/</link>
      <pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/sync-atom-between-multiple-devices/</guid>
      <description>&lt;p&gt;Keeping the preferences and installed extensions for my text editor in sync across all of my devices is an important part of my productive workflow. I can&amp;rsquo;t think of a more annoying situation than being disturbed because of a missing snippet or plugin. I&amp;rsquo;m not sure why the creators of these tools don&amp;rsquo;t explicitly provide a solution to import / export things in an easier way. &lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm&lt;/a&gt; and &lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; are a great example of how to do it right — simply pick a location where your settings should be exported to and keep this file in sync with other devices (Dropbox, iCloud, git, whatever).&lt;/p&gt;
&lt;p&gt;Text editors allow us to do the same but a small bit of hacking is required. As a long term &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; user I found keeping &lt;a href=&#34;https://dotfiles.github.io/&#34;&gt;dotfiles on Github&lt;/a&gt; the best solution. Very recently I jumped over to &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; and I had to keep it in sync between few computers at home and at work. Let me share with you a few possible options.&lt;/p&gt;
&lt;h2 id=&#34;sync-settings-plugin-for-atom&#34;&gt;Sync Settings Plugin for Atom &lt;a href=&#34;#sync-settings-plugin-for-atom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/sync-settings&#34;&gt;Sync Settings for Atom&lt;/a&gt; is a great plugin by &lt;a href=&#34;https://github.com/groupsky&#34;&gt;Geno Roupsky&lt;/a&gt;. It stores all the settings, keymaps, styles, init scripts, snippets and a list of the installed packages in a single &lt;a href=&#34;https://gist.github.com/&#34;&gt;gist&lt;/a&gt;. It requires you to create a new personal &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;access token&lt;/a&gt; on Github and put it into the plugin settings next to the gistID. This step is required to enable the Gist (which can be public or private) to communicate with all Atom instances. The final step is to trigger a &amp;ldquo;backup&amp;rdquo; on the main computer from the Command Palette — &lt;code&gt;cmd-shift-p&lt;/code&gt; (macOS) or &lt;code&gt;ctrl-shift-p&lt;/code&gt; (Linux/Windows). To inject the same config on another device use the &amp;ldquo;restore&amp;rdquo; command. To steal a config from your colleague use the &amp;ldquo;fork&amp;rdquo; option. It&amp;rsquo;s easy and works like a charm!&lt;/p&gt;
&lt;h2 id=&#34;sync-atom-with-dotfiles-on-github&#34;&gt;Sync Atom with dotfiles on Github &lt;a href=&#34;#sync-atom-with-dotfiles-on-github&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This option is a bit more manual but gives you full control and the ability to go back in time (thanks to git). Atom stores all settings files inside the &lt;code&gt;~/.atom/&lt;/code&gt; directory. The trick is to move this folder to your &lt;code&gt;.dotfiles&lt;/code&gt; directory and create a symlink from this directory to the original location. If you are not familiar with the concept of using &lt;code&gt;.dotfiles&lt;/code&gt;, have a look at the &lt;a href=&#34;https://dotfiles.github.io/&#34;&gt;unofficial guide&lt;/a&gt; which is full of great examples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# move .atom to .dotfiles&lt;/span&gt;
mv ~/.atom/ ~/.dotfiles/

&lt;span class=&#34;c1&#34;&gt;# create a symlink to the directory inside dotfiles&lt;/span&gt;
ln -s ~/.dotfiles/.atom/ ~/.atom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Time to add the new &lt;code&gt;.atom&lt;/code&gt; folder to the &lt;code&gt;.dotfiles&lt;/code&gt; repository. Before doing this we need to add a few folders to our &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Atom sync&lt;/span&gt;
/.atom/blob-store/
/.atom/compile-cache/
/.atom/packages/
/.atom/storage/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These device-specific folders don&amp;rsquo;t store your settings. You may be wondering why did I add a &lt;code&gt;packages&lt;/code&gt; folder for my &lt;code&gt;.gitignore&lt;/code&gt;. The answer is easy - it stores the source files to all of your extensions and they may be heavy as hell! Does this mean that we need to manually manage the extensions? Nope :-) &lt;a href=&#34;https://atom.io/packages/package-sync&#34;&gt;Package Sync for Atom&lt;/a&gt; by &lt;a href=&#34;https://github.com/lee-dohm&#34;&gt;Lee Dohm&lt;/a&gt; stores a reference to all installed plugins in a &lt;code&gt;packages.cson&lt;/code&gt; file. Simply install it and enable the &amp;ldquo;Create on change&amp;rdquo; and &amp;ldquo;Overwrite packages.cson&amp;rdquo; options inside the plugin settings. I&amp;rsquo;m surprised that Atom comes with a fantastic package manager, but doesn&amp;rsquo;t come with this functionality by default. The only option that would be amazing to have in this plugin would be &amp;ldquo;Sync on start&amp;rdquo; but that&amp;rsquo;s probably only me being fussy!&lt;/p&gt;
&lt;p&gt;The thing that you may be concerned about is your &lt;code&gt;userId&lt;/code&gt; being inside your &lt;code&gt;config.cson&lt;/code&gt; file. You don&amp;rsquo;t need to worry about it too much. &lt;a href=&#34;https://github.com/atom/metrics/issues/18#issuecomment-36484448&#34;&gt;Apparently&lt;/a&gt; it won&amp;rsquo;t reveal anything sensitive. If it is still going to give you sleepless nights, you can simply disable the &lt;a href=&#34;https://atom.io/packages/exception-reporting&#34;&gt;Exception Reporting&lt;/a&gt; and &lt;a href=&#34;https://atom.io/packages/metrics&#34;&gt;Metrics&lt;/a&gt; plugins and then remove the &lt;code&gt;userId&lt;/code&gt; line.&lt;/p&gt;
&lt;p&gt;Now your &lt;code&gt;.dotfiles&lt;/code&gt; are fully prepared to sync your Atom settings between all of your devices. It looks a bit more complicated than the previous method but it is definitely more powerful and reliable in my experience. When you jump on a new machine just pull the &lt;code&gt;.dotfiles&lt;/code&gt; repo and run the &amp;ldquo;Package sync: Sync&amp;rdquo; command from the Atom Command Palette — &lt;code&gt;cmd-shift-p&lt;/code&gt; (macOS) or &lt;code&gt;ctrl-shift-p&lt;/code&gt; (Linux/Windows) — job done.&lt;/p&gt;
&lt;h2 id=&#34;sync-atom-via-dropbox-or-any-other-cloud-service&#34;&gt;Sync Atom via Dropbox (or any other cloud service) &lt;a href=&#34;#sync-atom-via-dropbox-or-any-other-cloud-service&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last option is to use a cloud service like Dropbox. I include this method here only because it is possible in theory but in practice it is nowhere near as reliable as the two options mentioned above. Dropbox is not a speed demon. The recent &lt;a href=&#34;https://www.troyhunt.com/the-dropbox-hack-is-real/&#34;&gt;data leak&lt;/a&gt; and &lt;a href=&#34;http://applehelpwriter.com/2016/08/29/discovering-how-dropbox-hacks-your-mac/&#34;&gt;what it does with our operating systems&lt;/a&gt; actually drove me to &lt;a href=&#34;http://www.drop-dropbox.com/&#34;&gt;drop Dropbox&lt;/a&gt;. The decision is yours.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# move atom to dropbox&lt;/span&gt;
mv ~/.atom ~/Dropbox/Apps/Atom

&lt;span class=&#34;c1&#34;&gt;# create a symlink to the dropbox directory&lt;/span&gt;
ln -s ~/Dropbox/Apps/Atom ~/.atom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;this-is-how-i-do-it&#34;&gt;This is how I do it &lt;a href=&#34;#this-is-how-i-do-it&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Sync Settings Plugin for Atom is fantastic but it doesn&amp;rsquo;t give me an option to roll my settings back in time when I mess something up. This requirement is covered by git so that&amp;rsquo;s why I sync it with my &lt;a href=&#34;https://github.com/pawelgrzybek/dotfiles&#34;&gt;dotfiles&lt;/a&gt;. And the Dropbox method? Not for me.&lt;/p&gt;
&lt;p&gt;So let me know, what do you think? Share with me your method. Do you have any suggestions? Feel free to use the comments section below. Have a great day :*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 August</title>
      <link>https://pawelgrzybek.com/top-picks-2016-august/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-august/</guid>
      <description>&lt;h2 id=&#34;david-wells---css-in-react&#34;&gt;David Wells - CSS in React &lt;a href=&#34;#david-wells---css-in-react&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A great talk by &lt;a href=&#34;https://twitter.com/DavidWells&#34;&gt;David Wells&lt;/a&gt; on ReactJS San Francisco Bay Area meet-up. All that you need to know about styling React components. Pros and cons of each popular method with strong recommendation of &lt;a href=&#34;https://github.com/css-modules/css-modules&#34;&gt;CSS modules&lt;/a&gt; powered by &lt;a href=&#34;http://postcss.org/&#34;&gt;PostCSS&lt;/a&gt;. I don&amp;rsquo;t entirely agree with some parts of David&amp;rsquo;s approach but it is really interesting overview of available strategies.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-function-syntaxes-color-and-otherwise&#34;&gt;CSS Function Syntaxes (color and otherwise) &lt;a href=&#34;#css-function-syntaxes-color-and-otherwise&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.xanthir.com/b4iW0&#34;&gt;http://www.xanthir.com/b4iW0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tab Atkins explains the reason behind new syntax for CSS rgb color notation. If it&amp;rsquo;s too long too read the only thing you need to remember is &lt;code&gt;rgba(0, 255, 0, 50%)&lt;/code&gt; notation will be replaced with &lt;code&gt;rgb(0 255 0 / 50%)&lt;/code&gt;. The reason behind makes super sense.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;staggering-animations&#34;&gt;Staggering Animations &lt;a href=&#34;#staggering-animations&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/staggering-animations/&#34;&gt;https://css-tricks.com/staggering-animations/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David DeSandro — author of Masonry, Isotope, Flickity, Packery and many more very good plugins drives us through considerations of implementing new type of animation in third version of Isotope. I love this kind of posts that apart from final result author reveals a development process in details.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;force-selection-of-text-block&#34;&gt;Force Selection of Text Block &lt;a href=&#34;#force-selection-of-text-block&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/force-selection-text-block/&#34;&gt;https://css-tricks.com/force-selection-text-block/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next one from CSS Tricks this month. Chris Coyier presents a neat trick to select a whole block on click without heavy JavaScript of Flash based add-ons. Very handy trick especially when we need to make sure that whole bit of code is copied (like a code snippet or telephone number).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;yes-you-should-learn-vanilla-javascript-before-fancy-js-frameworks&#34;&gt;Yes, You Should Learn Vanilla JavaScript Before Fancy JS Frameworks &lt;a href=&#34;#yes-you-should-learn-vanilla-javascript-before-fancy-js-frameworks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://snipcart.com/blog/learn-vanilla-javascript-before-using-js-frameworks&#34;&gt;https://snipcart.com/blog/learn-vanilla-javascript-before-using-js-frameworks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t agree enough with this article. I&amp;rsquo;m sick of people who call themselves &amp;ldquo;Angular Developer&amp;rdquo; or &amp;ldquo;React Developer&amp;rdquo;. I can&amp;rsquo;t imagine how can you be a good framework developer without knowing core principles of language. I follow teaching style promoted by great Kyle Simpson who is a strong believer in deep understanding before moving forward. Francois-Xavier P. Darveau shares the same school. Great read!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;front-end-center&#34;&gt;Front End Center &lt;a href=&#34;#front-end-center&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://frontend.center/&#34;&gt;https://frontend.center/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/glenmaddern&#34;&gt;Glen Maddern&lt;/a&gt; just started a new project called Front End Center. He released just one video so far but this single tutorial was totally enough to convince me to follow and share it. The best explanation of Webpack that you can find. I&amp;rsquo;m looking forward to following screen casts by Glen.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-to-use-webpagetest-and-its-api&#34;&gt;How To Use WebPageTest and its API &lt;a href=&#34;#how-to-use-webpagetest-and-its-api&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/use-webpagetest-api/&#34;&gt;https://css-tricks.com/use-webpagetest-api/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eduardo Bouças published very helpful article on CSS-Tricks. All that you need to know to master WebPageTest and it&amp;rsquo;s API. Even if you are not interested in using very advanced features that API comes with, first few chapters are amazing introduction to grasp a concept of this fantastic tool.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;using-webp-images&#34;&gt;Using WebP Images &lt;a href=&#34;#using-webp-images&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/using-webp-images/&#34;&gt;https://css-tricks.com/using-webp-images/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Great primer for using WebP on your projects. All about file saving, conversion, placing WebP graphics in HTML markup and CSS. With support around 70% it is a perfect timing to let it boost the performance of our projects. Thanks Jeremy for write up.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-to-design-words&#34;&gt;How to design words &lt;a href=&#34;#how-to-design-words&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@jsaito/how-to-design-words-63d6965051e9#.y3zxn18hu&#34;&gt;https://medium.com/@jsaito/how-to-design-words-63d6965051e9#.y3zxn18hu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;John Saito from Dropbox explains in few simple steps how to write better messages. Can&amp;rsquo;t agree enough with all of them. Read it, print in and pin above your desk and read it after writing a sentence of body copy for your brand new project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Div — a simple Alfred window manager</title>
      <link>https://pawelgrzybek.com/div-simple-alfred-windows-manager/</link>
      <pubDate>Sun, 28 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/div-simple-alfred-windows-manager/</guid>
      <description>&lt;p&gt;There are tons of window managers for Mac OS X around. Chris Coyier published a &lt;a href=&#34;https://css-tricks.com/os-x-window-manager-apps/&#34;&gt;nice comparison&lt;/a&gt; of the most popular ones some time ago. These apps are great utilities that can boost your productivity by eliminating the time that you normally spend adjusting the window positions on your screen. I was using &lt;a href=&#34;http://mizage.com/divvy/&#34;&gt;Divvy by Mizage&lt;/a&gt; for a long time and it worked like a charm for me. Another app that I use non-stop is &lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt;. It looks like the default Spotlight search feature but it is much more powerful than that. It allows you to create advanced search functionality, custom hotkeys, explore files, control apps, store snippets, use clipboard history and so on. The app in itself is a subject that deserves a separate article (expect one soon).&lt;/p&gt;
&lt;p&gt;Being uber minimalistic in terms of my workflow I decided to create a windows manager for Alfred. Say hello to &lt;a href=&#34;http://www.packal.org/workflow/div&#34;&gt;Div&lt;/a&gt;! It is a simple &lt;a href=&#34;https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html&#34;&gt;Applescript&lt;/a&gt; (which incidentally was great fun to learn) with many triggers attached to it. I even created a logo for it :)&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-08-28-1.jpg&#34;
  alt=&#34;Div — simple Alfred windows manager logo&#34;
  loading=&#34;lazy&#34;
  width=&#34;1600&#34;
  height=&#34;600&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-div&#34;&gt;How to use Div &lt;a href=&#34;#how-to-use-div&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned previously — &lt;a href=&#34;http://www.packal.org/workflow/div&#34;&gt;Div&lt;/a&gt; is a simple script with many options to control it. You can &lt;a href=&#34;http://www.packal.org/workflow/div&#34;&gt;download it from Packal&lt;/a&gt; — a community driven repository of the best Alfred workflows. It comes with some predefined layout settings, but it&amp;rsquo;s dead easy to add custom ones. It is written in AppleScript — a very basic scripting language to do practical but also cool stuff on Apple computers.&lt;/p&gt;
&lt;h3 id=&#34;enable-access-for-assistive-devices-required&#34;&gt;Enable access for assistive devices (required) &lt;a href=&#34;#enable-access-for-assistive-devices-required&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AppleScript works nicely with the majority of Mac OS X applications. Unfortunately some of them are non-scriptable. The solution is not to control app&amp;rsquo;s position but the window around it. We need to give Alfred access for assistive devices first. Just follow these easy steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open System Preferences&lt;/li&gt;
&lt;li&gt;Go to Security &amp;amp; Privacy&lt;/li&gt;
&lt;li&gt;Go to Privacy tab&lt;/li&gt;
&lt;li&gt;Go to the Accessibility on the left panel&lt;/li&gt;
&lt;li&gt;Click the lock and type your password&lt;/li&gt;
&lt;li&gt;Click small + icon and add Alfred from the list&lt;/li&gt;
&lt;li&gt;Done :)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-08-28-2.gif&#34;
  alt=&#34;Enable access for assistive devices on El Capitan&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;600&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;predefined-list-of-layouts&#34;&gt;Predefined list of layouts &lt;a href=&#34;#predefined-list-of-layouts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.packal.org/workflow/div&#34;&gt;Div&lt;/a&gt; comes with a predefined list of layouts. To use one simply type &lt;code&gt;div&lt;/code&gt; and choose an option from the list.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-08-28-3.gif&#34;
  alt=&#34;Predefined list of layouts in Div Alfred workflow&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;500&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;using-hotkeys&#34;&gt;Using hotkeys &lt;a href=&#34;#using-hotkeys&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are a few predefined settings. It is probably the quickest and most efficient way to manage your layouts. That&amp;rsquo;s how I use it mainly. Bind your favorite hotkeys to these settings or even add your own ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⌃ ⌥ 1&lt;/code&gt; Full&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃ ⌥ 2&lt;/code&gt; Medium&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃ ⌥ 3&lt;/code&gt; Small&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃ ⌥ ←&lt;/code&gt; Left&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃ ⌥ →&lt;/code&gt; Right&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃ ⌥ ↑&lt;/code&gt; Top&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃ ⌥ ↓&lt;/code&gt; Bottom&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-08-28-4.gif&#34;
  alt=&#34;Using hotkeys in Div Alfred workflow&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;500&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;custom-arguments&#34;&gt;Custom arguments &lt;a href=&#34;#custom-arguments&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes predefined settings are not enough. &lt;a href=&#34;http://www.packal.org/workflow/div&#34;&gt;Div&lt;/a&gt; knows how to deal with these situations. It allows you to pass custom arguments to create a custom position. It accepts two or four arguments.&lt;/p&gt;
&lt;h4 id=&#34;custom-boundaries&#34;&gt;Custom boundaries &lt;a href=&#34;#custom-boundaries&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Choose custom boundaries by passing 4 space-separated values. For example &lt;code&gt;div 20 20 80 80&lt;/code&gt; will place the top left corner of an app 20% from the top and 20% from the left edge of the screen, and the bottom right corner 80% from the top and 80% from the left edge of the screen.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-08-28-5.gif&#34;
  alt=&#34;Custom boundaries in Div Alfred workflow&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;500&#34;
/&gt;
&lt;/p&gt;
&lt;h4 id=&#34;custom-size&#34;&gt;Custom size &lt;a href=&#34;#custom-size&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Choose a custom size by passing 2 (space separated) values. For example &lt;code&gt;div 800 600&lt;/code&gt; will resize your window to 800px wide and 600px high and place the window in the middle of the screen.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-08-28-6.gif&#34;
  alt=&#34;Custom size in Div Alfred workflow&#34;
  loading=&#34;lazy&#34;
  width=&#34;800&#34;
  height=&#34;500&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-using-div&#34;&gt;Thanks for using Div &lt;a href=&#34;#thanks-for-using-div&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully you will find &lt;a href=&#34;http://www.packal.org/workflow/div&#34;&gt;it&lt;/a&gt; useful. If you need something more advanced have a look at the amazing &lt;a href=&#34;http://www.packal.org/workflow/alfred2-layout&#34;&gt;Alfred 2 layout&lt;/a&gt; workflow by Bodo Junglas. As always, user feedback is welcome. Use the comments section below to share your love, opinions or report any bugs. If you would like to help me in the future development of &lt;a href=&#34;http://www.packal.org/workflow/div&#34;&gt;Div&lt;/a&gt; feel free to fork it on &lt;a href=&#34;https://github.com/pawelgrzybek/div&#34;&gt;Github&lt;/a&gt; and send a pull request. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 July</title>
      <link>https://pawelgrzybek.com/top-picks-2016-july/</link>
      <pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-july/</guid>
      <description>&lt;h2 id=&#34;the-target-trick&#34;&gt;The :target Trick &lt;a href=&#34;#the-target-trick&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://bitsofco.de/the-target-trick/&#34;&gt;https://bitsofco.de/the-target-trick/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A really clever trick with CSS &lt;code&gt;:target&lt;/code&gt; pseudo_element by &lt;a href=&#34;https://twitter.com/ireaderinokun&#34;&gt;Ire Aderinokun&lt;/a&gt;. You may not need JavaScript if you know CSS well. Probably it is not very accessibility friendly and not the best supported solution ever, but it is still very cool! I encourage you to follow Ire&amp;rsquo;s great &lt;a href=&#34;https://bitsofco.de&#34;&gt;blog&lt;/a&gt;. Loots of cool stuff like this one to come!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;es6-for-humans&#34;&gt;ES6 for Humans &lt;a href=&#34;#es6-for-humans&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/metagrover/ES6-for-humans&#34;&gt;https://github.com/metagrover/ES6-for-humans&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ECMAScript2015 (or ES6) gave a JavaScript second life. If you still live in a world of a old version and want to grasp a fresh skills related with recent upgrade — this link is for you. Fantastic collection of main features from the new spec with short description. It includes just an essence of everything that you need to know to get started with modern JavaScript. &lt;a href=&#34;https://twitter.com/metagrover&#34;&gt;Deepak Grover&lt;/a&gt; did an amazing job. If you fancy to read more in depth about new add-ons I encourage you to check &lt;a href=&#34;https://ponyfoo.com/articles/es6&#34;&gt;ES6 Overview in 350 Bullet Points&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/nzgb&#34;&gt;Nicolás Bevacqua&lt;/a&gt; or read en epic book by Kyle Simpson &lt;a href=&#34;http://shop.oreilly.com/product/0636920033769.do&#34;&gt;&amp;ldquo;You Don&amp;rsquo;t Know JS: ES6 &amp;amp; Beyond&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;you-dont-need-javascript&#34;&gt;You Don’t Need Javascript &lt;a href=&#34;#you-dont-need-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/NamPNQ/You-Dont-Need-Javascript&#34;&gt;https://github.com/NamPNQ/You-Dont-Need-Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is very impressive what people do just with CSS. Previous example by Ire is one of them, but this collection is fool of similar tricky snippets. A great repo worth to follow. Game examples are mind blowing!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-easy-performance-wins-for-designers&#34;&gt;3 Easy Performance Wins for Designers &lt;a href=&#34;#3-easy-performance-wins-for-designers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://una.im/perf-design-wins/#%F0%9F%92%81&#34;&gt;https://una.im/perf-design-wins/#💁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy Una comes with three solid advices for digital designers. Must read, Yes, you — read it and stop sending me PSDs with 11 font faces please. Bye the way, I love Una&amp;rsquo;s emojis in post URLs.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;temporal-dead-zone-tdz-demystified&#34;&gt;Temporal dead zone (TDZ) demystified &lt;a href=&#34;#temporal-dead-zone-tdz-demystified&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified/&#34;&gt;http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This term is floating around on twitter for some time. Initially I knew that it must be something related with new behavior of let and const hoisting. Kind of right, but there is so many details that all js divs needs to be aware of. &lt;a href=&#34;https://twitter.com/Ult_Combo&#34;&gt;UltCombo&lt;/a&gt; explains it really well!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-search-for-the-holy-grail-how-i-ended-up-with-element-queries-and-how-you-can-use-them-today&#34;&gt;The Search For The Holy Grail: How I Ended Up With Element Queries, And How You Can Use Them Today &lt;a href=&#34;#the-search-for-the-holy-grail-how-i-ended-up-with-element-queries-and-how-you-can-use-them-today&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/07/how-i-ended-up-with-element-queries-and-how-you-can-use-them-today/&#34;&gt;https://www.smashingmagazine.com/2016/07/how-i-ended-up-with-element-queries-and-how-you-can-use-them-today/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The founder of CSS Element Queries Tommy Hodgins introduces a concept of his project. It is a thing that developers has been waiting for since media-queries got a first adoption few years ago. Let me quote an author what kind of a problem EQCSS solves.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But when designing plugins and interfaces with element queries, we can easily write responsive styles that cover all of the situations we anticipate, making them truly bulletproof, no matter what content the user puts inside or where the plugin shows up. Suppose we could style a widget with layouts ranging from 150 to 2000 pixels wide. Then, no matter where that widget is displayed on a website, it would always look great.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;es6-for-everyone-by-wes-bos&#34;&gt;ES6 for everyone by Wes Bos &lt;a href=&#34;#es6-for-everyone-by-wes-bos&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://es6.io/&#34;&gt;https://es6.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Great Wes Bos is coming with new amazing series. This one is really outstanding. 66 videos about all new funky ES6 buzzwords that you constantly see on twitter but don&amp;rsquo;t understand yet. The whole series is full of practical examples and of course Wes&amp;rsquo; funny sense of humor. Best spent few pounds this month!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;crate-react-app&#34;&gt;Crate-react-app &lt;a href=&#34;#crate-react-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&#34;&gt;https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Extremal talented young fella recently hired by Facebook — &lt;a href=&#34;https://github.com/gaearon&#34;&gt;Dan Abramov&lt;/a&gt; — few days ago revealed a project that he was working of for last several weeks. &lt;a href=&#34;https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&#34;&gt;Create-react-app&lt;/a&gt; is highly inspired by &lt;a href=&#34;https://ember-cli.com/&#34;&gt;Ember CLI&lt;/a&gt; tool that allows you to get your react app running in few seconds. If you have ever tried to configure &lt;a href=&#34;https://webpack.github.io/&#34;&gt;webpack&lt;/a&gt; to speak nicely with your app, you know exactly how time consuming task it is. This one allows you to jump on productive part of building your project in blink of an eye.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-video-policies-for-ios&#34;&gt;New video Policies for iOS &lt;a href=&#34;#new-video-policies-for-ios&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://webkit.org/blog/6784/new-video-policies-for-ios/&#34;&gt;https://webkit.org/blog/6784/new-video-policies-for-ios/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Woho! Finally apple chilling out with very strict politics about HTML5 video tag on iOS. No more image fullbacks — thanks Apple. We ate still waiting for Service Workers on Safari thought :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Page scrolling in vanilla JavaScript</title>
      <link>https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/</link>
      <pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/</guid>
      <description>&lt;p class=&#34;update&#34;&gt;I published this article years ago. At the time of writing, this solution was working very well for me. Today I would be using &lt;code&gt;window.scroll&lt;/code&gt; and this lightweight &lt;a href=&#34;https://github.com/iamdustan/smoothscroll&#34;&gt;smooth scroll behavior polyfill&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;How many times have you seen the effect of a page scrolling down after clicking a button? Probably thousands! It&amp;rsquo;s always been extremely easy to do with the popular &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-btn&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;html, body&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;scrollTop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-section&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;top&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It is a decent solution, works great and it&amp;rsquo;s really well supported across the browsers. But there is a recent trend of abandoning jQuery because pure vanilla JavaScript DOM manipulation is the new hipster skill (I&amp;rsquo;m one of those hipsters by the way). With the ease of modern APIs and the amount of features that the JavaScript landscape has to offer nowadays it is not that difficult to leave chunky libraries behind.&lt;/p&gt;
&lt;p&gt;On one recent project my client asked me to implement this kind of scrolling on his SPA (single page app). Aha! A &amp;ldquo;challenge&amp;rdquo; I said! Today I think &amp;ldquo;DOM-nightmare-inconsistency-mission&amp;rdquo; is a better term to describe this scenario. If you are one of those hipsters let me save you a couple of hours and share this tiny snippet with you.&lt;/p&gt;
&lt;h2 id=&#34;page-scrolling-without-jquery&#34;&gt;Page scrolling without jQuery &lt;a href=&#34;#page-scrolling-without-jquery&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Plan! To start a script it&amp;rsquo;s always a good idea to have a plan in place. Basically it goes like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Determine where to scroll, the duration, the easing function and an optional callback.&lt;/li&gt;
&lt;li&gt;On click — grab a timestamp and the current document position.&lt;/li&gt;
&lt;li&gt;Scroll to the element as long as you don&amp;rsquo;t reach the destination.&lt;/li&gt;
&lt;li&gt;If the element has finished scrolling trigger an optional callback function.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;determine-where-to-scroll-the-duration-the-easing-function-and-an-optional-callback&#34;&gt;Determine where to scroll, the duration, the easing function and an optional callback &lt;a href=&#34;#determine-where-to-scroll-the-duration-the-easing-function-and-an-optional-callback&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All the other steps are always going to be exactly the same. This one may vary depending on the destination, the scrolling duration, the timing function and any callback that is invoked when the scrolling reaches it&amp;rsquo;s destination. It makes sense to pass all these things as function arguments, right? The destination is the only required argument (ideally it should be a number or DOM element, and function should determine how to deal with it). The duration and easing function possess some sensible default values (thanks to ES2015 default arguments) and the callback function should be optional. Have a look at the wrapper of our function declaration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scrollIt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;duration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;easing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// object with some some timing functions
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// function body here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;on-click--grab-a-timestamp-and-the-current-document-position&#34;&gt;On click — grab a timestamp and the current document position &lt;a href=&#34;#on-click--grab-a-timestamp-and-the-current-document-position&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To calculate values for function that is responsible for scrolling window position up and down, we need to have a reference to initial window value and timestamp.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pageYOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;startTime&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;performance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;performance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;scroll-to-the-element-as-long-as-you-dont-reach-the-destination&#34;&gt;Scroll to the element as long as you don&amp;rsquo;t reach the destination &lt;a href=&#34;#scroll-to-the-element-as-long-as-you-dont-reach-the-destination&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The most popular JavaScript animation solutions are mainly based on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout&#34;&gt;setTimeout&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval&#34;&gt;setInterval&lt;/a&gt;, the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API&#34;&gt;WEB Animation API&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestAnimationFrame&#34;&gt;requestAnimationFrame&lt;/a&gt;. The first two are pretty old school. The Web Animation API isn&amp;rsquo;t made to deal with these kind of situations — read more about it in one of my previous &lt;a href=&#34;https://pawelgrzybek.com/intro-to-the-web-animations-api/&#34;&gt;articles&lt;/a&gt;. So &lt;code&gt;requestAnimationFrame&lt;/code&gt; looks like a perfect candidate for this scenario. We have to be careful tho — it is easy to generate infinite loop if we request a frame loop without providing condition to terminate it. One of those situation can be scrolling below available scrollable window space. Luckily it is not difficult to prevent it. In case that &lt;code&gt;requestAnimationFrame&lt;/code&gt; is not available we can just skip animation and move window to the destination. Have a look…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;documentHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scrollHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offsetHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scrollHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offsetHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;windowHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offsetTop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffsetToScroll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;windowHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;documentHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;windowHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;requestAnimationFrame&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffsetToScroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;performance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;performance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;startTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;easings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;easing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;destinationOffsetToScroll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;if-the-element-has-finished-scrolling-trigger-an-optional-callback-function&#34;&gt;If the element has finished scrolling trigger an optional callback function &lt;a href=&#34;#if-the-element-has-finished-scrolling-trigger-an-optional-callback-function&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The last step is to trigger a callback function whenever the document reaches its destination. This requires adding one more line to the condition that checks the current position and destination inside the &lt;code&gt;scroll&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Stop requesting animation when window reached its destination
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// And run a callback function
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pageYOffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffsetToScroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;puting-it-all-together&#34;&gt;Puting it all together &lt;a href=&#34;#puting-it-all-together&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The whole function looks like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scrollIt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;duration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;easing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;easings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeInQuad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeOutQuad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeInOutQuad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeInCubic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeOutCubic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeInOutCubic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeInQuart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeOutQuart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeInOutQuart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeInQuint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeOutQuint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easeInOutQuint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pageYOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;startTime&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;performance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;performance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;documentHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scrollHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offsetHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scrollHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offsetHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;windowHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offsetTop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffsetToScroll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;windowHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;documentHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;windowHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;requestAnimationFrame&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffsetToScroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;performance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;performance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;startTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;easings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;easing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;destinationOffsetToScroll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pageYOffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destinationOffsetToScroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;scroll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;and to invoke it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-btn1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;scrollIt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-section1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;easeOutQuad&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Just finished scrolling to &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pageYOffset&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;px`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or simply&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-btn50000&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scrollIt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;a-future-solution-using-scroll-behavior-smooth&#34;&gt;A future solution using scroll-behavior: smooth &lt;a href=&#34;#a-future-solution-using-scroll-behavior-smooth&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;UPDATE!&lt;/strong&gt; As correctly pointed out by &lt;a href=&#34;https://twitter.com/simevidas&#34;&gt;Šime Vidas&lt;/a&gt; there is another solution. There is a property of the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSSOM_View&#34;&gt;CSSOM View module&lt;/a&gt; called &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior&#34;&gt;&lt;code&gt;scroll-behavior&lt;/code&gt;&lt;/a&gt;. This is a native solution for the problem that I&amp;rsquo;m trying to solve by my script. The implementation is extremely easy, but unfortunately this method &lt;a href=&#34;https://caniuse.com/#feat=css-scroll-behavior&#34;&gt;isn&amp;rsquo;t supported well enough&lt;/a&gt; to be used reliably (yet). It doesn&amp;rsquo;t allow us to control timing functions or the duration either. It takes the user-agent values as its defaults. If you want to test examples below, use Firefox or Google Chrome with &lt;a href=&#34;chrome://flags/#enable-experimental-web-platform-features&#34;&gt;Experimental Web Platform features&lt;/a&gt; flag enabled.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scrollIt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scrollTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;behavior&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;smooth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offsetTop&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.js-section&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;scrollIt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And one more example using just a CSS (Firefox only)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scroll-behavior&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;smooth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#one&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;btn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Section 1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;section&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Section 1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;wrap-it-up&#34;&gt;Wrap it up &lt;a href=&#34;#wrap-it-up&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please let me know what you think about my solution. I know that the &lt;a href=&#34;https://caniuse.com/#feat=requestanimationframe&#34;&gt;browser support&lt;/a&gt; isn&amp;rsquo;t that amazing compared to the usual jQuery solution. The compromise between browser support, bloating code and performance is a question that you need to answer yourself depending on your project. I had good fun building this script but it&amp;rsquo;s even more enjoyable for me to share it with you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 June</title>
      <link>https://pawelgrzybek.com/top-picks-2016-june/</link>
      <pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-june/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;css-will-change-module-level-1&#34;&gt;CSS Will Change Module Level 1 &lt;a href=&#34;#css-will-change-module-level-1&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://drafts.csswg.org/css-will-change/#using&#34;&gt;https://drafts.csswg.org/css-will-change/#using&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I took me a while to understand &lt;code&gt;will-change&lt;/code&gt; property. It clicked when I asked Paul Lewis from Google when I bumped into him at some London conference. Finally there is a piece of spec dedicated to this tricky one-liner. If you are into crazy CSS transitions and animations and you have never heard of this property, give it a quick glance to boost performance of your effects.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;linear-algebra-for-game-developers&#34;&gt;Linear algebra for game developers &lt;a href=&#34;#linear-algebra-for-game-developers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/&#34;&gt;http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you remember a very basic linear algebra from school times? If yes, you may consider to jump to game development my friend. It is extremely interesting read about usage of linear equations in world of game makers.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;api-patterns-for-your-open-source-javascript-plugin&#34;&gt;API Patterns for Your Open Source JavaScript Plugin &lt;a href=&#34;#api-patterns-for-your-open-source-javascript-plugin&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://seesparkbox.com/foundry/api_patterns_for_your_open_source_javascript_plugin&#34;&gt;https://seesparkbox.com/foundry/api_patterns_for_your_open_source_javascript_plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/bryanebraun&#34;&gt;Bryan Braun&lt;/a&gt; created a great list of commonly used patterns to design simple Javascript plugin API. Lots of code examples and references to popular plugins or libraries that follow particular pattern.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-modules-demos&#34;&gt;CSS Modules Demos &lt;a href=&#34;#css-modules-demos&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ruanyf/css-modules-demos&#34;&gt;https://github.com/ruanyf/css-modules-demos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are totally new to CSS Modules, &lt;a href=&#34;https://twitter.com/ruanyf&#34;&gt;ruanyf&lt;/a&gt; made this very helpful tutorial series available to clone and playground with it. Every single example is well described and explained. So helpful my friend — thanks a lot!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;resn&#34;&gt;Resn &lt;a href=&#34;#resn&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://resn.co.nz/&#34;&gt;http://resn.co.nz/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is not the best place to look for some creative inspiration but today I need to make an exception. This website blown my mind by the wicked ideas that I experienced with every single click. Just check it!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;contempt-culture&#34;&gt;Contempt Culture &lt;a href=&#34;#contempt-culture&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.aurynn.com/86/contempt-culture&#34;&gt;http://blog.aurynn.com/86/contempt-culture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I feel guilty of being hater of one of these X language, X operating system, X method of doing things choices. This article gave me a great point of view and I commit myself to stop this bullshit. You do it too please. Really inspiring article by &lt;a href=&#34;https://twitter.com/aurynn&#34;&gt;@aurynn&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;form-validation-ux-in-html-and-css&#34;&gt;Form Validation UX in HTML and CSS &lt;a href=&#34;#form-validation-ux-in-html-and-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/form-validation-ux-html-css/&#34;&gt;https://css-tricks.com/form-validation-ux-html-css/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chris Coyier is coming with really great article full of tips and tricks about pure CSS forms validation. Its doesn’t suggest that this is the only way and you should avoid Javascript or server-side validation, but presents a number of really useful and lesser known techniques that you may use in your day-to-day projects. Give it a read!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;practical-javascript-early-access&#34;&gt;Practical JavaScript (early access) &lt;a href=&#34;#practical-javascript-early-access&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://watchandcode.com/courses/practical-javascript&#34;&gt;http://watchandcode.com/courses/practical-javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gordon Zhu, previously worked at Google and now works on his own and in my opinion really successful teaching platform — &lt;a href=&#34;watchandcode.com&#34;&gt;http://watchandcode.com&lt;/a&gt;. The most recent course that he made is one of the best primers to JavaScript that I have ever seen. It definitely deserves to be added to list of &lt;a href=&#34;https://pawelgrzybek.com/my-favourite-resources-to-learn-javascript/&#34;&gt;my favourite resources to learn JavaScript&lt;/a&gt;. I encourage everyone who is aiming to start career as a JavaScript programmer to have a look at this series of free videos. Well done Gordon!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-essential-meta-tags-for-social-media&#34;&gt;The Essential Meta Tags for Social Media &lt;a href=&#34;#the-essential-meta-tags-for-social-media&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/essential-meta-tags-social-media/&#34;&gt;https://css-tricks.com/essential-meta-tags-social-media/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Implementation of meta tags required to correctly present your content in social media has always been tricky. Open graph and Twitter cards meta tags look almost as messy as the code required to correctly implement a favicon that works great on all devices. This blog post sums things up really well and as final result we ended up with just five lines of code. Great quick read for all social media users.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Intersection Observer API explained</title>
      <link>https://pawelgrzybek.com/the-intersection-observer-api-explained/</link>
      <pubDate>Mon, 13 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/the-intersection-observer-api-explained/</guid>
      <description>&lt;p&gt;Detecting which elements are visible within the current viewport&amp;rsquo;s boundaries has always been a tricky and expensive task in terms of performance. Lazy loaded images on Medium.com, infinite scrolling pictures of vegan food on Pinterest or animated images on every f*****g Tumblr theme are just a few examples where this functionality can be found in abundance. &lt;a href=&#34;https://www.iab.com/viewability-has-arrived-what-you-need-to-know-to-see-through-this-sea-change/&#34;&gt;The reporting of ad &amp;ldquo;visibility&amp;rdquo;&lt;/a&gt; for monetizing purpose is another important use case. There&amp;rsquo;s good news on the horizon though! The web platform doesn&amp;rsquo;t have to struggle to do all these things manually anymore — &lt;a href=&#34;https://www.w3.org/TR/intersection-observer/&#34;&gt;&lt;code&gt;The Intersection Observer API&lt;/code&gt;&lt;/a&gt; just landed in &lt;a href=&#34;https://blog.chromium.org/2016/05/new-apis-to-help-developers-improve.html&#34;&gt;Chromium 51&lt;/a&gt;. It allows us to do these things with ease, reduce CPU usage, increase battery life and eliminate rendering junk.&lt;/p&gt;
&lt;p&gt;Bare in mind that we are talking about a really new API. At the moment of writing this article the &lt;a href=&#34;https://www.chromestatus.com/feature/5695342691483648&#34;&gt;browser support&lt;/a&gt; is restricted to Google Chrome 51 and Opera 38. If you want to play around with it in older browsers give some thanks to &lt;a href=&#34;https://twitter.com/dassurma&#34;&gt;Surma&lt;/a&gt; for this great &lt;a href=&#34;https://github.com/surma-dump/IntersectionObserver/blob/polyfill/polyfill/intersectionobserver-polyfill.js&#34;&gt;polyfill&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-06-13-1.jpg&#34;
  alt=&#34;IntersectionObserver in Google Chrome Canary&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;954&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-intersection-observer-api&#34;&gt;How to use Intersection Observer API &lt;a href=&#34;#how-to-use-intersection-observer-api&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You don&amp;rsquo;t have to declare a listener that on every single scroll event triggers some crazy &lt;code&gt;getBoundingClientRect()&lt;/code&gt; calculations anymore. The new API is much nicer to use and read. Simply create a new instance of &lt;code&gt;IntersectionObserver&lt;/code&gt; that takes two arguments — a callback function and an optional &lt;code&gt;options&lt;/code&gt; object. Trigger the &lt;code&gt;observe&lt;/code&gt; method and pass in the element that should be watched. When the element enters or exits the viewport, the callback function will be fired.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;watchMe&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;watchMe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, the callback function will be fired whenever an element appears and leaves the viewport. The function returns an array of &lt;a href=&#34;https://www.w3.org/TR/intersection-observer/#intersection-observer-entry&#34;&gt;&lt;code&gt;IntersectionObserverEntry&lt;/code&gt;&lt;/a&gt; objects and each of them contains properties about each element that has been shown on the viewport (&lt;code&gt;boundingClientRect&lt;/code&gt;, &lt;code&gt;intersectionRatio&lt;/code&gt;, &lt;code&gt;intersectionRect&lt;/code&gt;, &lt;code&gt;rootBounds&lt;/code&gt;, &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;time&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The second parameter (&lt;code&gt;options&lt;/code&gt;) allows you to specify some settings by passing the &lt;a href=&#34;https://www.w3.org/TR/intersection-observer/#intersection-observer-init&#34;&gt;&lt;code&gt;IntersectionObserverInit&lt;/code&gt;&lt;/a&gt; object. You can change the context (&lt;code&gt;root&lt;/code&gt;) that defaults to &lt;code&gt;null&lt;/code&gt; which is document’s viewport, the amount of margin from the context&amp;rsquo;s boundaries (&lt;code&gt;rootMargin&lt;/code&gt;) with a default value &lt;code&gt;0px&lt;/code&gt;, and finally an array of &lt;code&gt;threshold&lt;/code&gt; which is a list of thresholds at which to trigger the callback.&lt;/p&gt;
&lt;p&gt;If you need to observe more than one element, simply call the &lt;code&gt;observe&lt;/code&gt; method multiple times.&lt;/p&gt;
&lt;h2 id=&#34;demo-time&#34;&gt;Demo time &lt;a href=&#34;#demo-time&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Have you ever heard this quote by Stephen R. Covey from &amp;ldquo;The 7 Habits of Highly Effective People&amp;rdquo;?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To learn and not to do is really not to learn. To know and not to do is really not to know.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Demo time! I have created a list of paragraphs. Initially all of them are scaled down and see through. When a paragraph passes the viewport&amp;rsquo;s edge by half of it&amp;rsquo;s height (&lt;code&gt;threshold: [0.5]&lt;/code&gt;) then it animates to its regular size and full opacity. Maybe it&amp;rsquo;s not especially creative, but it does the job and allows you to copy/paste my code or extend it to make some super funky stuff :-)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// the callback function that will be fired
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// when the element apears in the viewport
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;onEntry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// list of options
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// instantiate a new Intersection Observer
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;observer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onEntry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// list of paragraphs
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// loop through all elements
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// pass each element to observe method
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ES2015 for-of loop can traverse through DOM Elements
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elm&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;observer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Hopefully this has helped you out. Don&amp;rsquo;t be shy and please share your experiments with using the Intersection Observer API. Any question? Please use the comments section below. If you liked this article please don&amp;rsquo;t hesitate to use the share button. Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 May</title>
      <link>https://pawelgrzybek.com/top-picks-2016-may/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-may/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;implement-dom-methods-prepend-append-after-before-and-replacewith&#34;&gt;Implement DOM methods: prepend, append, after, before and replaceWith &lt;a href=&#34;#implement-dom-methods-prepend-append-after-before-and-replacewith&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chromium.googlesource.com/chromium/src/+/c5fb1b6a7e7fc6eccd8355211c43cb6396f86d9a&#34;&gt;https://chromium.googlesource.com/chromium/src/+/c5fb1b6a7e7fc6eccd8355211c43cb6396f86d9a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looks like a jQuery highly influenced a spec creators to implement easier to memorize methods in Document Object Model. I like it so much! Available in Chromium soon.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;an-ultimate-guide-to-css-pseudo-classes-and-pseudo-elements&#34;&gt;An Ultimate Guide To CSS Pseudo-Classes And Pseudo-Elements &lt;a href=&#34;#an-ultimate-guide-to-css-pseudo-classes-and-pseudo-elements&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/05/an-ultimate-guide-to-css-pseudo-classes-and-pseudo-elements/&#34;&gt;https://www.smashingmagazine.com/2016/05/an-ultimate-guide-to-css-pseudo-classes-and-pseudo-elements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everything that you need to know about pseudo-classes and pseudo-elements in CSS. &lt;a href=&#34;https://twitter.com/ricardozea&#34;&gt;Ricardo Zea&lt;/a&gt; did a good work on Smashing Magazine. I didn’t know about few of them. Hopefully you will learn something that you didn’t know about.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-editor-do-you-use---funfunfunction-31&#34;&gt;What editor do you use? - FunFunFunction #31 &lt;a href=&#34;#what-editor-do-you-use---funfunfunction-31&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/dIjKJjzRX_E&#34;&gt;https://youtu.be/dIjKJjzRX_E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another episode of FunFunFunction comes with golden advice for myself. I feel guilty of being a tools addict. I like the concept and explanation of work vs. meta work. Worth to watch if you sometimes feel that you spend too much time on tooling instead of product that your client is paying for.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;side-navigation-bar-live-code-session---supercharged&#34;&gt;Side Navigation Bar: Live Code Session - Supercharged &lt;a href=&#34;#side-navigation-bar-live-code-session---supercharged&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/e5CXg1sjTqQ&#34;&gt;https://youtu.be/e5CXg1sjTqQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another fantastic live coding session with Paul Levis &amp;amp; Surma. This time theoretically simple side navigation effect until it doesn’t require swipe event to hide it. I really like the approach taken by Googlers to do it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;blisk&#34;&gt;Blisk &lt;a href=&#34;#blisk&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blisk.io/&#34;&gt;https://blisk.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We had 3 browsers for last decade and nothing really changed apart from usage percentage. 2016 brought a revolution and since begging of a year we got a number of new products on the market. Blisk is another one. This one is a browser focused to make developers life easier by implementing a set of tools unavailable in other products. It&amp;rsquo;s ready to download for Windows computers, Mac and Linux owners need to wait a bit more.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;learn-redux&#34;&gt;Learn Redux &lt;a href=&#34;#learn-redux&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://learnredux.com/&#34;&gt;https://learnredux.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn Redux is a new course by Wes Box. Top free resource for all React dudes!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;google-io-2016&#34;&gt;Google I/O 2016 &lt;a href=&#34;#google-io-2016&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNYkxOF6rcIDz1TzmmMRBC-kd8zPRTQIP&#34;&gt;https://www.youtube.com/playlist?list=PLNYkxOF6rcIDz1TzmmMRBC-kd8zPRTQIP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I watched them all pretty much. Google is definitely one of the most influential company in the web. You shouldn’t miss any of these brilliant talks from Google I/O 2016. My main outcome — embrace the platform, learn it and know the web standards.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nodecasts&#34;&gt;Nodecasts &lt;a href=&#34;#nodecasts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nodecasts.io/&#34;&gt;https://nodecasts.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/jkup&#34;&gt;Jon Kuperman&lt;/a&gt; inspired by great Laracast created a similar collection of resources about JavaScript. I can’t believe that this amazing set of videos is available for free for everybody to watch. Top free resource!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prototypal-inheritance-in-javascript&#34;&gt;Prototypal Inheritance in JavaScript &lt;a href=&#34;#prototypal-inheritance-in-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@kevincennis/prototypal-inheritance-781bccc97edb&#34;&gt;https://medium.com/@kevincennis/prototypal-inheritance-781bccc97edb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really great primer to prototype inheritance in JavaScript by Kevin Ennis. God stuff, and dude worth to follow!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to the Web Animations API</title>
      <link>https://pawelgrzybek.com/intro-to-the-web-animations-api/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/intro-to-the-web-animations-api/</guid>
      <description>&lt;p&gt;We have plenty of ways to animate things on the web. The answer of which one to use isn’t always easy. Each method comes with pros and cons. Should we use CSS, &lt;code&gt;canvas&lt;/code&gt;, Web GL, JavaScript &lt;code&gt;requestAnimationFrame&lt;/code&gt; or &lt;code&gt;setInterval&lt;/code&gt;? Maybe SMIL? Oh no — this one is dead now. Maybe some external libraries like jQuery, GreenSock or VelocityJS? These are just a few possible ways to go. If you are keen to know a little bit more about these methods, I encourage you to read a fantastic article &lt;a href=&#34;https://css-tricks.com/comparison-animation-technologies/&#34;&gt;“A Comparison of Animation Technologies”&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/sarah_edo&#34;&gt;Sarah Drasner&lt;/a&gt; on CSS-Tricks.&lt;/p&gt;
&lt;p&gt;“Lord of the twins” is the unusual description that &lt;a href=&#34;https://twitter.com/davatron5000&#34;&gt;Dave Rupert&lt;/a&gt; named the &lt;a href=&#34;https://w3c.github.io/web-animations/&#34;&gt;Web Animations API&lt;/a&gt; in ShopTalk Show &lt;a href=&#34;http://shoptalkshow.com/episodes/203-with-rachel-nabors-and-dan-wilson/&#34;&gt;episode&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/rachelnabors&#34;&gt;Rachel Nabors&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/dancwilson&#34;&gt;Dan Wilson&lt;/a&gt; exclusively dedicated to this piece of the W3C spec. It is a combination of hardware accelerated CSS animations and the power of JavaScript. This high-performance API exposes powerful methods that allow us to control the animation of HTML and SVG elements.&lt;/p&gt;
&lt;h2 id=&#34;are-we-ready-to-use-waapi&#34;&gt;Are we ready to use WAAPI? &lt;a href=&#34;#are-we-ready-to-use-waapi&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Web Animations API is relatively new — the initial version of the spec was published in June 2012. At the moment of writing this article the &lt;a href=&#34;https://caniuse.com/#feat=web-animation&#34;&gt;browser support&lt;/a&gt; isn’t great. Even the browsers that support it offer a very inconsistent level of implementation. If you would like to play around with the bleeding edge parts of this spec then &lt;a href=&#34;https://nightly.mozilla.org/&#34;&gt;Firefox Nightly build&lt;/a&gt; is the best playground. Chrome and Opera are fine. &lt;a href=&#34;https://groups.google.com/d/msg/mozilla.dev.platform/2INRr96R3IU/do-AigNwAwAJ&#34;&gt;Firefox 48 is coming&lt;/a&gt; with WAAPI implementation on board. The status of &lt;a href=&#34;https://webkit.org/status/#specification-web-animations&#34;&gt;Safari&lt;/a&gt; is under consideration and the road map priority for the &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/platform/status/webanimationsjavascriptapi&#34;&gt;IE platform&lt;/a&gt; is medium. The first mobile implementation very recently reached Android devices. Safari for iOS — no pressure — but we all are waiting for you.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://caniuse.com/#feat=web-animation&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-05-18-1.jpg&#34;
  alt=&#34;Browser support for Web Animations API&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;890&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The good news is that there is a reliable &lt;a href=&#34;https://github.com/web-animations/web-animations-js&#34;&gt;polyfill&lt;/a&gt; that provides support for Chrome, Firefox 27+, IE10+ (including Edge), Safari (iOS) 7.1+ and Safari (Mac) 9+. Actually it exists in three versions — &lt;a href=&#34;https://github.com/web-animations/web-animations-js/blob/master/web-animations.min.js&#34;&gt;web-animations&lt;/a&gt; that covers support of basic stable features, &lt;a href=&#34;https://github.com/web-animations/web-animations-js/blob/master/web-animations-next.min.js&#34;&gt;web-animations-next&lt;/a&gt; that allows us to use newly proposed features and &lt;a href=&#34;https://github.com/web-animations/web-animations-js/blob/master/web-animations-next-lite.min.js&#34;&gt;web-animations-next-lite&lt;/a&gt; that is a stripped down version of &amp;ldquo;next&amp;rdquo; without some of the lesser-used properties.&lt;/p&gt;
&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic syntax &lt;a href=&#34;#basic-syntax&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The heading above is the most misleading part of this article because when it comes to the Web Animations API “basic syntax” doesn’t exist. The spec is a behemoth and there are so many constructors associated with the WAAPI (with more coming soon). Let’s just cover the bare minimum that allows us to create something simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please don&amp;rsquo;t confuse this native &lt;a href=&#34;https://w3c.github.io/web-animations/#dom-animatable-animate&#34;&gt;&lt;code&gt;animate()&lt;/code&gt;&lt;/a&gt; function with the jQuery &lt;a href=&#34;http://api.jquery.com/animate/&#34;&gt;&lt;code&gt;animate()&lt;/code&gt;&lt;/a&gt; function - they are not related whatsoever. The first parameter &lt;code&gt;effect&lt;/code&gt; describes the movement of an animation. At the moment the only natively implemented option that can be used is an array full of keyframes. In the future browsers will allow us to use an object with an array of values (the length of array represents the number of keyframes). You can think about this parameter as an equivalent to &lt;code&gt;@keyframes&lt;/code&gt; in CSS.&lt;/p&gt;
&lt;p&gt;The absolute minimum that needs to be passed in the &lt;code&gt;options&lt;/code&gt; parameter is the duration in milliseconds. Luckily we can pass many more parameters to the &lt;a href=&#34;https://w3c.github.io/web-animations/#animationeffecttiming&#34;&gt;&lt;code&gt;AnimationEffectTiming&lt;/code&gt;&lt;/a&gt; object. Essentially think of this parameter as your CSS animation properties (animation-duration, animation-timing-function, animation-delay etc.).&lt;/p&gt;
&lt;h2 id=&#34;dont-believe-it-until-you-see-it&#34;&gt;Don&amp;rsquo;t believe it until you see it? &lt;a href=&#34;#dont-believe-it-until-you-see-it&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Enough of the theoretical gibberish — time for a practical example. If you have some previous experience with CSS animations, the piece of code below should look very familiar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.box&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(200px, 0)&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(200px, 200px)&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(0, 200px)&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;delay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;endDelay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;both&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;iterationStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;iterations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;direction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;easing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cubic-bezier(.6, 0, 1, .6)&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As mentioned before, think about the first parameter as the CSS &lt;code&gt;@keyframes&lt;/code&gt; and the second one as CSS &lt;code&gt;animation-*&lt;/code&gt; properties inside of a declaration block. On every single keyframe I passed &lt;code&gt;offset&lt;/code&gt; although it &lt;a href=&#34;http://w3c.github.io/web-animations/#spacing-keyframes&#34;&gt;could be skipped&lt;/a&gt; in this case. I did this intentionally to show you how to control the offset of an animation — it does the same job as a percentage value in front of every CSS keyframe. It can be represented as a fraction (ie. &lt;code&gt;1/4&lt;/code&gt;) or a decimal number (ie. &lt;code&gt;.25&lt;/code&gt;). I used &lt;code&gt;endDelay&lt;/code&gt; and &lt;code&gt;iterationStart&lt;/code&gt; with a value of &lt;code&gt;0&lt;/code&gt; (this is the default value when the property is not explicitly defined) to give you an overview of &lt;a href=&#34;https://w3c.github.io/web-animations/#dom-animationeffecttimingreadonly-delay&#34;&gt;all the possible options&lt;/a&gt;. To make a clear comparison, have a look at the CSS animation with the properties mirrored.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;keyframes&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;move&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nt&#34;&gt;75&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nt&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation-duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation-timing-function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cubic-bezier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation-delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation-iteration-count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation-direction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation-fill-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;both&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation-play-state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;running&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;/* or as a shorthand */&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;animation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;move&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ms&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;linear&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ms&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;normal&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;both&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;running&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hopefully this comparison to CSS helps make the syntax clearer. Remember — you are dealing with JS so use camel-case values from the &lt;code&gt;style&lt;/code&gt; object, not the property names from CSS. For instance — &lt;code&gt;margin-bottom&lt;/code&gt; is &lt;code&gt;marginBottom&lt;/code&gt;. It&amp;rsquo;s just an example, but the animation of &lt;code&gt;margin&lt;/code&gt; probably isn&amp;rsquo;t the best idea from a performance perspective. &lt;a href=&#34;https://twitter.com/aerotwist&#34;&gt;Paul Lewis&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/DasSurma&#34;&gt;Surma&lt;/a&gt; created  &lt;a href=&#34;https://csstriggers.com/&#34;&gt;CSS Triggers&lt;/a&gt; - a handy reference of triggered events associated with the animation of particular CSS properties. There is no restriction - whatever you can animate with CSS you can animate via WAAPI (including fancy &lt;a href=&#34;https://www.w3.org/TR/motion-1/&#34;&gt;motion-path&lt;/a&gt; animations).&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-05-18-3.jpg&#34;
  alt=&#34;DOM style object&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1254&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Cool, but does it really generate the same effect? Not really — the behavior of JavaScript&amp;rsquo;s &lt;code&gt;easing&lt;/code&gt; and CSS&amp;rsquo; &lt;code&gt;animation-timing-function&lt;/code&gt; is different. The WAAPI &lt;a href=&#34;https://w3c.github.io/web-animations/#time-transformations&#34;&gt;timing function&lt;/a&gt; is applied to the whole iteration of an animation — as expected. As per &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function&#34;&gt;MDN&lt;/a&gt;, the CSS &lt;code&gt;animation-timing-function&lt;/code&gt; is applied on each step between keyframes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For keyframed animations, the timing function applies between keyframes rather than over the entire animation. In other words, the timing function is applied at the start of the keyframe and at the end of the keyframe.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Have a look&amp;hellip;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;animation-methods-and-properties&#34;&gt;Animation methods and properties &lt;a href=&#34;#animation-methods-and-properties&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So far we haven&amp;rsquo;t seen any clear advantage of using WAAPI over CSS animations. Let&amp;rsquo;s reveal the difference between reactive JavaScript over declarative CSS. When the &lt;code&gt;animate()&lt;/code&gt; function is invoked a new instance of the &lt;a href=&#34;https://w3c.github.io/web-animations/#the-animation-interface&#34;&gt;&lt;code&gt;Animation&lt;/code&gt;&lt;/a&gt; interface is returned — formerly known as &lt;code&gt;AnimationPlayer&lt;/code&gt;. Assigning the animation to a variable allows us to use returned properties, methods and promises. Let&amp;rsquo;s do it and print to the console these brand new toys.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;move&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.box&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([...],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{...});&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-05-18-2.jpg&#34;
  alt=&#34;Web Animations API Animation object returned&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1228&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Having access to all this goodness allows us to create more complex effects. If you haven&amp;rsquo;t dived into the world of ES2015 Promises yet, it&amp;rsquo;s worth taking a look at &lt;a href=&#34;http://exploringjs.com/es6/ch_async.html&#34;&gt;&amp;ldquo;Asynchronous programming (background)&amp;quot;&lt;/a&gt; by Dr. Axel Rauschmayer or &lt;a href=&#34;https://ponyfoo.com/articles/es6-promises-in-depth&#34;&gt;&amp;ldquo;ES6 Promises in Depth&amp;rdquo;&lt;/a&gt; by Nicolás Bevacqua. &lt;a href=&#34;https://twitter.com/dancwilson&#34;&gt;Dan Wilson&lt;/a&gt; wrote a helpful article about working with &lt;a href=&#34;http://danielcwilson.com/blog/2016/03/animations-and-promises/&#34;&gt;Promises in Web Animations&lt;/a&gt;. Time for a simple example&amp;hellip;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;lets-talk-about-some-constructors&#34;&gt;Let&amp;rsquo;s talk about some constructors &lt;a href=&#34;#lets-talk-about-some-constructors&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s dive deeper. In the previous example we assigned the result of the &lt;code&gt;animate()&lt;/code&gt; function to a variable. When &lt;code&gt;animate()&lt;/code&gt; is invoked &lt;a href=&#34;https://w3c.github.io/web-animations/#dom-animatable-animate&#34;&gt;a few things happen&lt;/a&gt; — a new &lt;code&gt;KeyframeEffect&lt;/code&gt; and &lt;code&gt;Animation&lt;/code&gt; object is constructed, the animation starts playing and then is returned. &lt;a href=&#34;https://w3c.github.io/web-animations/#dom-animatable-animate&#34;&gt;Following the documentation&lt;/a&gt; we can manually use the &lt;code&gt;KeyframeEffect&lt;/code&gt; and &lt;code&gt;Animation&lt;/code&gt; global objects to instantiate a new animation. The only browser that gives us an access to both of them is Firefox Nightly. Thanks again to all amazing &lt;a href=&#34;https://github.com/web-animations/web-animations-js&#34;&gt;polyfill&lt;/a&gt; creators! Have a quick look at the syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the current implementation the only valid value passed as the &lt;code&gt;effect&lt;/code&gt; parameter is an instance of the &lt;code&gt;KeyframeEffect&lt;/code&gt; object. I will show you some more fancy things that we can pass here in a moment.&lt;/p&gt;
&lt;p&gt;Another parameter &lt;code&gt;timeline&lt;/code&gt;, connects the newly created animation with a source of time for synchronization purposes. As far as I know the only valid value here is the default document timeline accessed by &lt;code&gt;document.timeline&lt;/code&gt;. &lt;a href=&#34;https://twitter.com/rachelnabors&#34;&gt;Rachel Nabors&lt;/a&gt; (a main contributor to the Web Animations API &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API&#34;&gt;documentation on MDN&lt;/a&gt;) suggests that in the future we may get other new cool options to use.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;in the future there may be timelines associated with gestures or scrolling for example.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s quickly remind ourselves how we did it previously and recreate the same animation in a manually constructed object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// via function
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.anime-js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;effect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[...];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{...};&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;move&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// via constructors
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.anime-js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;effect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[...];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{...};&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;move&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ownerDocument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;At this point you are probably thinking &amp;ldquo;Yeah, cool, but why should I bother about constructors if I can use the &lt;code&gt;animate()&lt;/code&gt; function&amp;rdquo;. Wait for it!&lt;/p&gt;
&lt;h2 id=&#34;groupeffects-and-sequenceeffects&#34;&gt;GroupEffects and SequenceEffects &lt;a href=&#34;#groupeffects-and-sequenceeffects&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned before, for the time being the only natively implemented property that can be used to determine the effect of an animation is &lt;code&gt;KeyframeEffect&lt;/code&gt;. In the future level 2 spec &lt;a href=&#34;https://twitter.com/rachelnabors/status/631545063965720576&#34;&gt;we will&lt;/a&gt; have the opportunity to use more sophisticated constructors like &lt;code&gt;GroupEffect&lt;/code&gt; and &lt;code&gt;SequenceEffect&lt;/code&gt;. It&amp;rsquo;s possible to apply a group of animations via CSS but chaining animations together has always been a pain in the arse. More good news — a polyfill allows us to do this today. Examples!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elem1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.box1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elem2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.box2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(200px, 0)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(200px, 200px)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(0, 200px)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;easing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cubic-bezier(.6, 0, 1, .6)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;iterations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;direction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;delay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;both&amp;#39;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GroupEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;move&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And one more for &lt;code&gt;SequenceEffects&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elem1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.box1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elem2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.box2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elem3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.box3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(100px, 0)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(100px, 200px)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate(0, 200px)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SequenceEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;KeyframeEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;move&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The only thing that confuses me with these two examples is that the animation is playing without invoking a &lt;code&gt;play()&lt;/code&gt; method. If anyone can help me to understand this, I owe you a coffee / beer. I promise!&lt;/p&gt;
&lt;h2 id=&#34;people-worth-following-and-useful-resources&#34;&gt;People worth following and useful resources &lt;a href=&#34;#people-worth-following-and-useful-resources&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/brianskold&#34;&gt;Brian Birtles&lt;/a&gt; - a main contributor to the &lt;a href=&#34;https://w3c.github.io/web-animations/&#34;&gt;Web Animations API&lt;/a&gt; spec. Works for Mozilla in Japan.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/rachelnabors&#34;&gt;Rachel Nabors&lt;/a&gt; - a main contributor to the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API&#34;&gt;documentation on MDN&lt;/a&gt;. Part-time &lt;a href=&#34;https://twitter.com/rachelnabors/status/731922035190824960&#34;&gt;unicorn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/dancwilson&#34;&gt;Dan Wilson&lt;/a&gt; - author of a great &lt;a href=&#34;http://danielcwilson.com/blog/2015/07/animations-intro/&#34;&gt;series about WAAPI&lt;/a&gt; that ranks higher on Google than the MDN and W3C spec. I learned a lot from his blog!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/vlh&#34;&gt;Val Head&lt;/a&gt; - Val has dedicated her life to animations. Author of a cool newsletter &lt;a href=&#34;http://uianimationnewsletter.com&#34;&gt;&amp;ldquo;The UI Animation Newsletter&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/sarah_edo&#34;&gt;Sarah Drasner&lt;/a&gt; - she is amazing in general! React, SVG, CSS and of course animations. Author of the fantastic course — &lt;a href=&#34;https://frontendmasters.com/courses/svg-animation/&#34;&gt;&amp;ldquo;Advanced SVG Animation&amp;rdquo;&lt;/a&gt; available for all &lt;a href=&#34;https://frontendmasters.com&#34;&gt;Frontend Masters&lt;/a&gt; users.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/ep0_0W0qWsc&#34;&gt;&amp;ldquo;Silky smooth Web Animations&amp;rdquo;&lt;/a&gt; - some time ago when the Chrome browser reached version 36, Google published this great explanation of the Web Animations API on their YouTube channel.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://platform-status.mozilla.org/#web-animations&#34;&gt;Web Animations API on Platform status&lt;/a&gt; - track the progress of the implementation yourself.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://birtles.github.io/areweanimatedyet/&#34;&gt;“Are we animated yet?”&lt;/a&gt; - a dedicated website that shows the implementation progress of all the future parts of the spec in Firefox Nightly.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codepen.io/danwilson/pen/XmWraY&#34;&gt;WAAPI Browser Support Test&lt;/a&gt; - check your browser compatibility on Codepen. Created by Dan Wilson mentioned above.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/GxOq1bnlZXk&#34;&gt;State of the Animation with Rachel Nabors&lt;/a&gt; - a great talk by Rachel from the San Francisco HTML5 Developer Group meetup.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions &lt;a href=&#34;#conclusions&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To begin with I appreciate that I haven&amp;rsquo;t demonstrated any particularly crazy or creative examples. The main purpose of this article was to introduce the concept, not to spend time on crafting beautiful demos. Hopefully this overview has helped you out and I&amp;rsquo;m sure that I&amp;rsquo;m going to write more about this subject. If you have any questions don&amp;rsquo;t be afraid to use the comments section below. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pinterest style layout with Bricky</title>
      <link>https://pawelgrzybek.com/pinterest-style-layout-with-bricky/</link>
      <pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/pinterest-style-layout-with-bricky/</guid>
      <description>&lt;p&gt;One of my recent clients wanted to use this trendy kind of layout well known by Tumblr or Pinterest users. I did a quick search but I haven’t found any plugin that fits my needs (something that was responsive, lightweight and free of dependencies). All the resources that I found were huge, required a jQuery dependency or provide tons of options that I don&amp;rsquo;t need. Instead of going deeper with my research I decided to code it by myself. &lt;a href=&#34;https://github.com/pawelgrzybek/bricky&#34;&gt;Bricky&lt;/a&gt; (thanks to my good friend Kim for this name) is a very lightweight (≈ 1.5KB minified) and dependency-free script with a minimal number of options. It is open-source and you can download it from &lt;a href=&#34;https://github.com/pawelgrzybek/bricky&#34;&gt;Github&lt;/a&gt; or from &lt;a href=&#34;https://www.npmjs.com/package/bricky&#34;&gt;npm&lt;/a&gt;. It did the job on my project so maybe you will find it useful as well. Have a look at the &lt;a href=&#34;https://codepen.io/pawelgrzybek/pen/vGbzpW&#34;&gt;CodePen demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-05-10-1.jpg&#34;
  alt=&#34;Bricky - Masonry style layout without jQuery&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;968&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work &lt;a href=&#34;#how-does-it-work&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Whenever I create a project like this, I start with a blank JavaScript file that is full of commented out instructions needed to accomplish the task. My initial plan to create this plugin looked similar to the list below and it’s pretty much all of what this script is doing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Store all the articles in an array and remove them from the DOM.&lt;/li&gt;
&lt;li&gt;Create a flex wrapper inside of the element defined in settings.&lt;/li&gt;
&lt;li&gt;Dependent on the screen resolution, create columns inside the previously created wrapper (breakpoints and columns are configurable).&lt;/li&gt;
&lt;li&gt;Loop through the articles inside the array and append them one by one to the column with the least space taken.&lt;/li&gt;
&lt;li&gt;When the screen is resized, clear the container and repeat the process again. Debouncing the browser-intensive &lt;code&gt;resize&lt;/code&gt; event improved the script&amp;rsquo;s performance dramatically.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;how-to-use-it&#34;&gt;How to use it &lt;a href=&#34;#how-to-use-it&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can inject the script into your document markup manually or use a module bundler all the cool kids are using like &lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt; or &lt;a href=&#34;https://webpack.github.io/&#34;&gt;Webpack&lt;/a&gt; to use the node-style &lt;code&gt;required(&#39;bricky&#39;)&lt;/code&gt; way. Configuration is dead simple - only two settings are required (&lt;code&gt;parent&lt;/code&gt; &amp;amp; &lt;code&gt;elements&lt;/code&gt;) and two are optionally configurable (&lt;code&gt;gutter&lt;/code&gt; &amp;amp; &lt;code&gt;breakpoints&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;options&#34;&gt;Options &lt;a href=&#34;#options&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All that I needed and nothing else&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.bricky&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;gutter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;12px&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;breakpoints&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;900&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parent&lt;/code&gt; - (required) string with the selector where bricky should be placed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elements&lt;/code&gt; - (required) string with the &amp;ldquo;bricks&amp;rdquo; selector&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gutter&lt;/code&gt; - gutter width in relative or absolute units&lt;/li&gt;
&lt;li&gt;&lt;code&gt;breakpoints&lt;/code&gt; - this array is a collection of nested arrays. Each of them is constructed as &lt;code&gt;[pxValueOfbreakpoint, howManycolumns]&lt;/code&gt;. You can pass as many breakpoints as you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;node-style&#34;&gt;Node style &lt;a href=&#34;#node-style&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the command line&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i -S bricky
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the script file&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Assign the &amp;#39;bricky&amp;#39; module to Bricky variable
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Bricky&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bricky&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// store the object with settings in the variable &amp;#39;pref&amp;#39;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.bricky&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;gutter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;12px&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;breakpoints&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;900&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Instantiate new Bricky &amp;amp; invoke it
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mySuperLayout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Bricky&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;mySuperLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;browser-oldschool-style&#34;&gt;Browser oldschool style &lt;a href=&#34;#browser-oldschool-style&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the document markup&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;../js/bricky.min.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// store object with setting in perf variable
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.bricky&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;gutter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;12px&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;breakpoints&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;900&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Instantiate new Bricky &amp;amp; invoke it
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mySuperLayout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Bricky&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;mySuperLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;feedback&#34;&gt;Feedback &lt;a href=&#34;#feedback&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully you&amp;rsquo;ll find Bricky useful. If you decide to use it on your project, please send me a link - I&amp;rsquo;ll be ultra proud and happy. Please report bugs and share your suggestions. Bye :*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 April</title>
      <link>https://pawelgrzybek.com/top-picks-2016-april/</link>
      <pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-april/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;building-the-ui-for-the-new-the-times-website&#34;&gt;Building the UI for the new The Times website &lt;a href=&#34;#building-the-ui-for-the-new-the-times-website&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@peduarte/building-the-ui-for-the-new-the-times-website-26dc4e6569e&#34;&gt;https://medium.com/@peduarte/building-the-ui-for-the-new-the-times-website-26dc4e6569e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great write up by &lt;a href=&#34;https://twitter.com/peduarte&#34;&gt;Pedro Duarte&lt;/a&gt; about the procedure of implementing new design for The Times and The Sunday Times. It is really interesting recap.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pure-css-games-with-counter-increment&#34;&gt;Pure CSS Games with Counter-Increment &lt;a href=&#34;#pure-css-games-with-counter-increment&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://una.im/css-games/#=%81&#34;&gt;http://una.im/css-games/#=%81&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/una&#34;&gt;Una Kravets&lt;/a&gt; wrote down great article that in simple words explains everything that you need to know about CSS counters. I saw number of &lt;a href=&#34;https://codepen.io/jakealbaugh/full/zrVdME/&#34;&gt;impressive examples&lt;/a&gt; achieved by this feature but never really understood it. Una explained it pretty well and I will take the challenge to create something crazy and completely useless via CSS counters at some point. Thanks Una!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;still-think-you-dont-need-https&#34;&gt;Still think you don&amp;rsquo;t need HTTPS? &lt;a href=&#34;#still-think-you-dont-need-https&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://scotthelme.co.uk/still-think-you-dont-need-https/&#34;&gt;https://scotthelme.co.uk/still-think-you-dont-need-https/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;List of reasons why you should go with https for your website even when you don’t deal with sensitive data. Nice article by &lt;a href=&#34;https://twitter.com/Scott_Helme&#34;&gt;Scott Helme&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;supercharged-live-code-session-swipeable-cards&#34;&gt;Supercharged Live Code Session: Swipeable Cards &lt;a href=&#34;#supercharged-live-code-session-swipeable-cards&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/rBSY7BOYRo4&#34;&gt;https://youtu.be/rBSY7BOYRo4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another live coding session with &lt;a href=&#34;https://twitter.com/aerotwist&#34;&gt;Paul Lewis&lt;/a&gt; and another one hour video full of practical ticks and tips for all web standards maniacs.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;web-font-loading-patterns&#34;&gt;Web Font Loading Patterns &lt;a href=&#34;#web-font-loading-patterns&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bramstein.com/writing/web-font-loading-patterns.html&#34;&gt;https://www.bramstein.com/writing/web-font-loading-patterns.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/bram_stein&#34;&gt;Bram Stein&lt;/a&gt; from Typekit put together a great article about working with web fonts implemented by @font-face rule in 2016. Really great read and tons of good tips in this quick article.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wordpress-45-coleman&#34;&gt;WordPress 4.5 “Coleman” &lt;a href=&#34;#wordpress-45-coleman&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://wordpress.org/news/2016/04/coleman/&#34;&gt;https://wordpress.org/news/2016/04/coleman/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New version of Wordpress just came out, and as always brought tons on new cool features. I’m the most excited about support for Markdown in visual editor and increased images compression. Be careful that your plugins are compatible with new version of WP before update (I broke one WooCommerce website by updating before compatibility check).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;interview-with-håkon-wium-lie&#34;&gt;Interview with Håkon Wium Lie &lt;a href=&#34;#interview-with-h%c3%a5kon-wium-lie&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/net-magazine/interview-with-h%C3%A5kon-wium-lie-f3328aeca8ed#.7cdounkgd&#34;&gt;https://medium.com/net-magazine/interview-with-h%C3%A5kon-wium-lie-f3328aeca8ed#.7cdounkgd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting point of view about future of CSS straight from the creator of this language - &lt;a href=&#34;https://twitter.com/wiumlie&#34;&gt;Håkon Wium Lie&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-art-of-being-wrong-by-dave-rupert&#34;&gt;&amp;ldquo;The Art of Being Wrong&amp;rdquo; by Dave Rupert &lt;a href=&#34;#the-art-of-being-wrong-by-dave-rupert&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/oyxS0GLM_FI&#34;&gt;https://youtu.be/oyxS0GLM_FI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I can’t agree more with every single &lt;a href=&#34;https://twitter.com/davatron5000&#34;&gt;Dave’s&lt;/a&gt; word. Great talk dedicated to all super opinionated dudes not only from web community. Industry doesn’t matter, approach and acceptance of someones else opinions matters. Watch it!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-future-is-next&#34;&gt;The future is next &lt;a href=&#34;#the-future-is-next&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.futureisnext.com/&#34;&gt;http://www.futureisnext.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great documentary about our amazing industry is coming. Please visit the website and look wait for future announcements. Personally I can’t wait to watch it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;poll-results-front-end-and-front-end&#34;&gt;Poll Results: “front-end” and “front end” &lt;a href=&#34;#poll-results-front-end-and-front-end&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/poll-results-front-end-front-end/&#34;&gt;https://css-tricks.com/poll-results-front-end-front-end/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“Frontend” or “Front end”. Maybe “Front-end”? Hmm?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-to-blog-about-code-and-give-zero-fucks&#34;&gt;How to blog about code and give zero fucks &lt;a href=&#34;#how-to-blog-about-code-and-give-zero-fucks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://garann.com/dev/2013/how-to-blog-about-code-and-give-zero-fucks/&#34;&gt;http://garann.com/dev/2013/how-to-blog-about-code-and-give-zero-fucks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article is not any new one, but content is still valid and will be valid for many, many years. Probably one of the most inspiring blog posts that I have ever read. Give zero fucks and write about code please!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mathias-bynens--front-end-performance-the-dark-side&#34;&gt;Mathias Bynens — Front-End Performance: The Dark Side &lt;a href=&#34;#mathias-bynens--front-end-performance-the-dark-side&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/163113209&#34;&gt;https://vimeo.com/163113209&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/mathias&#34;&gt;Mathias&lt;/a&gt; shows the insecure side of front-end performance. Mind blowed again! This guy is awesome!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;updating-our-prefixing-policy&#34;&gt;Updating Our Prefixing Policy &lt;a href=&#34;#updating-our-prefixing-policy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://webkit.org/blog/6131/updating-our-prefixing-policy/&#34;&gt;https://webkit.org/blog/6131/updating-our-prefixing-policy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We had flags in Chrome for a while and they are coming to Safari. It’s really good because vendor prefixes are the biggest mistake ever introduced to web development.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;devtools-an-animated-journey&#34;&gt;DevTools: An animated journey &lt;a href=&#34;#devtools-an-animated-journey&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/160593679&#34;&gt;https://vimeo.com/160593679&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Umar Hansa on Smashing Conf 2016 in Oxford presented a number of new upcoming features of Google DevTools. It’s getting more and more powerful. It’s one of the reasons why I use Google Chrome Canary for debugging. Slides from presentation are available &lt;a href=&#34;http://umaar.github.io/devtools-animated-2016/#/&#34;&gt;here&lt;/a&gt;. Thanks Umar!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prototypal-object-oriented-programming-using-javascript&#34;&gt;Prototypal Object-Oriented Programming using JavaScript &lt;a href=&#34;#prototypal-object-oriented-programming-using-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://alistapart.com/article/prototypal-object-oriented-programming-using-javascript&#34;&gt;http://alistapart.com/article/prototypal-object-oriented-programming-using-javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great article on A list apart about the most confusing concept of OOP in JavaScript. Inheritance and delegation are to different things and this article explains that pretty well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS mixins with @apply rule</title>
      <link>https://pawelgrzybek.com/css-mixins-with-apply-rule/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/css-mixins-with-apply-rule/</guid>
      <description>&lt;p&gt;I am very excited about recent evolution of CSS. Flexbox was a buzzword some time ago, today it is a part of a spec that is well supported and widely adopted. Few months back I published an &lt;a href=&#34;https://pawelgrzybek.com/lets-get-into-the-basics-of-css-grid-layout-model/&#34;&gt;intro to CSS grid layout module&lt;/a&gt; that is another approaching feature that will dramatically change the way we build our projects. The enormous popularity of preprocessors like Sass or LESS undoubtedly influenced spec authors to bring variables to the language as a CSS Custom Properties. I recently published a &lt;a href=&#34;https://pawelgrzybek.com/css-custom-properties-explained/&#34;&gt;post&lt;/a&gt; that explains everything that you need to know about this powerful feature. Another aspect of preprocessors that developers and designers love are mixins. Well the good news keeps coming my friend - &lt;a href=&#34;https://tabatkins.github.io/specs/css-apply-rule/&#34;&gt;CSS @apply Rule&lt;/a&gt; is just around the corner. Let&amp;rsquo;s embrace a native CSS mixins together.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This specification defines the @apply rule, which allows an author to store a set of properties in a named variable, then reference them in other style rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we begin with some code snippets and examples I need to inform you that at the time of writing this article &lt;a href=&#34;https://www.chromestatus.com/feature/5753701012602880&#34;&gt;the only implementation&lt;/a&gt; is in Google Chrome Canary with &amp;ldquo;Experimental Web Platform features&amp;rdquo; flag enabled.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-04-18-1.jpg&#34;
  alt=&#34;Enable Experimental Web Platform Featured Flag in Google Chrome&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;848&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;syntax&#34;&gt;Syntax &lt;a href=&#34;#syntax&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are familiar with the syntax of CSS Custom Properties you won&amp;rsquo;t struggle to memorize this one. Just wrap a set of properties with curly braces like that&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;nd&#34;&gt;:root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;--heading-style&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;cursive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the mixin via new &lt;code&gt;@apply&lt;/code&gt; at-rule.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;@apply&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;--heading-style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;local-variables-in-css-mixins&#34;&gt;Local variables in CSS mixins &lt;a href=&#34;#local-variables-in-css-mixins&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sass allows us to pass a list of locally defined variables to a mixin. Unfortunately this isn&amp;rsquo;t possible with the &lt;code&gt;@apply&lt;/code&gt; rule.&lt;/p&gt;
&lt;p&gt;If you have some object oriented JavaScript experience, the first thing that you will try as a way around this is doing something like&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;nd&#34;&gt;:root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;--brand-color&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;--heading-style&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;--brand-color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;cursive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;--brand-color&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;@apply&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;--heading-style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;brand-color value pulled from the root, not the local block
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;value is red, not green
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;it is CSS, not JavScript
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;but this is not JavaScript my friend. It takes the value of the variable from the place where the mixin is defined, not from the block that is &amp;ldquo;invoked&amp;rdquo; in. Hopefully we will get ability to pass a parameters to a mixin at some point in the future - fingers crossed.&lt;/p&gt;
&lt;h2 id=&#34;use-native-css-mixins-today&#34;&gt;Use native CSS mixins today &lt;a href=&#34;#use-native-css-mixins-today&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned before, the browser support for this feature is practically zero right now. &lt;a href=&#34;https://www.chromestatus.com/feature/5753701012602880&#34;&gt;Chrome Platform Status&lt;/a&gt; informs us that the first implementation is planned for Google Chrome 51 (behind the flag) and Opera 38. Any details about other browsers haven&amp;rsquo;t been revealed at the time of writing this article.&lt;/p&gt;
&lt;p&gt;As a web developers we want to use the benefits of future improvements right now! That&amp;rsquo;s what we do with Babel and ECMAScript 2015. This is the reason why I like &lt;a href=&#34;http://postcss.org/&#34;&gt;PostCSS&lt;/a&gt; so much! If you have never used it yet, I highly encourage you to check my &lt;a href=&#34;https://pawelgrzybek.com/from-sass-to-postcss/&#34;&gt;introduction&lt;/a&gt; to PostCSS for Sass users. &lt;a href=&#34;https://twitter.com/pascalduez&#34;&gt;Pascal Duez&lt;/a&gt; created a &lt;a href=&#34;https://github.com/pascalduez/postcss-apply&#34;&gt;postcss-apply&lt;/a&gt; that transpiles &lt;code&gt;@apply&lt;/code&gt; rule to syntax understandable by current browsers.&lt;/p&gt;
&lt;p&gt;The feature detection for &lt;code&gt;@apply&lt;/code&gt; isn&amp;rsquo;t &lt;a href=&#34;https://pawelgrzybek.com/css-custom-properties-explained/#detect-the-browser-support-for-css-custom-properties&#34;&gt;that straight forward&lt;/a&gt; as with CSS Custom Properties. I&amp;rsquo;m sure this is just a matter of time to standardize the way to use it with &lt;code&gt;@support&lt;/code&gt; rule. If you really need to detect a support for &lt;code&gt;@apply&lt;/code&gt; rule, look at the &lt;a href=&#34;https://gist.github.com/malyw/477cd45bd0ed501a1c3ce0870ae16dd1&#34;&gt;script&lt;/a&gt; created by &lt;a href=&#34;https://twitter.com/malyw&#34;&gt;Serg Gospodarets&lt;/a&gt;. Serg also published &lt;a href=&#34;https://blog.gospodarets.com/css_apply_rule&#34;&gt;list of great use cases&lt;/a&gt; for CSS Mixins on his blog.&lt;/p&gt;
&lt;p&gt;I hope you found this overview useful. See you next time :-*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tabatkins&#34;&gt;Tab Atkins Jr&lt;/a&gt; officially anounced that the proposal for &lt;code&gt;@apply&lt;/code&gt; has been abandoned from various reasons. Learn more details behind this decision &lt;a href=&#34;http://www.xanthir.com/b4o00&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s plenty more space to experiment here, and while it does suck to lose a tool that you might have gotten excited about, &lt;code&gt;@apply&lt;/code&gt; really is just quite a bad idea technically. Let&amp;rsquo;s solve these problems correctly.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Liquid video</title>
      <link>https://pawelgrzybek.com/liquid-video/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/liquid-video/</guid>
      <description>&lt;p&gt;I would like to share with you an easy script that I published the other day. &lt;a href=&#34;https://github.com/pawelgrzybek/liquid-video&#34;&gt;Liquid video&lt;/a&gt; does exactly what the name suggests. It converts fixed sized iframe videos (from YouTube, Vimeo and other services like that) to responsive ones that adapt to the width of the parent container. It does exactly the same job as popular &lt;a href=&#34;http://fitvidsjs.com/&#34;&gt;FitVids&lt;/a&gt; but doesn&amp;rsquo;t rely on additional jQuery dependency. It is extremely lightweight - only 417 Bytes minified and 998 Bytes unminified.&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-liquid-video&#34;&gt;How to use Liquid video &lt;a href=&#34;#how-to-use-liquid-video&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You have two options to use &lt;a href=&#34;https://github.com/pawelgrzybek/liquid-video&#34;&gt;Liquid video&lt;/a&gt;. You can manually inject script to source code of your project (sounds a bit old school) or via npm (preferred way).&lt;/p&gt;
&lt;h3 id=&#34;manual-method&#34;&gt;Manual method &lt;a href=&#34;#manual-method&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Simply inject a minified script in source code of your website and instantiate a new &lt;code&gt;LiqudVideo&lt;/code&gt; with custom element query as an only argument. Use it just before closing of &lt;code&gt;body&lt;/code&gt; tag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;js/liquid-video.min.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LiquidVideo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.post iframe&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;use-with-npm&#34;&gt;Use with npm &lt;a href=&#34;#use-with-npm&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In age of module bundlers like &lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt; or &lt;a href=&#34;https://webpack.github.io/&#34;&gt;Webpack&lt;/a&gt; using external scripts with npm makes life much easier. Just type in your command line&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save liquid-video
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Personally I prefer to use shortcuts&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i -S liquid-video
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And this one goes to your JavaScript file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LiquidVideo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;liquid-video&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LiquidVideo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.post iframe&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 March</title>
      <link>https://pawelgrzybek.com/top-picks-2016-march/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-march/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;css-snap-size&#34;&gt;CSS Snap Size &lt;a href=&#34;#css-snap-size&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://drafts.csswg.org/css-snap-size/&#34;&gt;https://drafts.csswg.org/css-snap-size/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vertical rhythm like a breeze without complex math - yes please! CSS Snap Size looks very promising and helpful for pixel perfectionists.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mastering-markdown&#34;&gt;Mastering Markdown &lt;a href=&#34;#mastering-markdown&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://masteringmarkdown.com/&#34;&gt;http://masteringmarkdown.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wes Bos with next amazing mini series, this time about Markdown. Like a bread and butter for every Github users, essential skill of every web developer nowadays. Highly recommended, as always high quality content straight from Wes!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;an-introduction-to-browser-rendering&#34;&gt;An Introduction to Browser Rendering &lt;a href=&#34;#an-introduction-to-browser-rendering&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/n1cKlKM3jYI&#34;&gt;https://youtu.be/n1cKlKM3jYI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great introduction about DOM, CSSOM, Layout and Paint - all that you need to understand to know what happens with a web page   from the browsers perspective. Great one Umar!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;add-reactions-to-pull-requests-issues-and-comments&#34;&gt;Add Reactions to Pull Requests, Issues, and Comments &lt;a href=&#34;#add-reactions-to-pull-requests-issues-and-comments&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/blog/2119-pull-request-and-issue-reactions&#34;&gt;https://github.com/blog/2119-pull-request-and-issue-reactions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another requested feature is landing on Github. Now we can vote pull requests, issues and comments with Facebook&amp;rsquo;s style emoji things. I have to say that old fashion &amp;ldquo;+&amp;rdquo; and &amp;ldquo;-&amp;rdquo; would do the better job, but this one is cool as well :)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;coding-an-image-zoomer-element&#34;&gt;Coding an Image Zoomer Element &lt;a href=&#34;#coding-an-image-zoomer-element&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/e8IwM3iqnL0&#34;&gt;https://youtu.be/e8IwM3iqnL0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul Lewis from Google recorded fantastic one hour screencast. He goes through process of building small zoomer box that hovers over the picture. I learned so many amazing things by this video. Thanks a lot Paul!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;js-bits&#34;&gt;JS Bits &lt;a href=&#34;#js-bits&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vasanthk/js-bits&#34;&gt;https://github.com/vasanthk/js-bits&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great explanation of many JavaScript concepts with additional examples as a Github repo. Great collection!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;enduring-css&#34;&gt;Enduring CSS &lt;a href=&#34;#enduring-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://ecss.io/&#34;&gt;http://ecss.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ben Frain just published his book “Enduring CSS”. It is available &lt;a href=&#34;https://leanpub.com/enduringcss&#34;&gt;Leanpub&lt;/a&gt;, &lt;a href=&#34;https://itunes.apple.com/gb/book/enduring-css/id1054834560?mt=11&#34;&gt;iBookstore&lt;/a&gt; and to read &lt;a href=&#34;http://ecss.io/preface.html&#34;&gt;online for free&lt;/a&gt;. If you are working on large scale projects, this is must read.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;which-way-is-up&#34;&gt;Which Way Is Up? &lt;a href=&#34;#which-way-is-up&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/6WO6ch_tViU&#34;&gt;https://youtu.be/6WO6ch_tViU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Such an inspiring talk by Todd Motto from NG-NL 2016. Full of great advices for every JavaScript developer like you and me.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;starting-a-react-powered-comment-form&#34;&gt;Starting a React-Powered Comment Form &lt;a href=&#34;#starting-a-react-powered-comment-form&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/LR_Fb2LbnhY&#34;&gt;https://youtu.be/LR_Fb2LbnhY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great live coding session with Sarah Drasner and Chris Coyier from CSS Tricks. For every React beginner like me!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;on-not-and-specificity&#34;&gt;On :not and Specificity &lt;a href=&#34;#on-not-and-specificity&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://bitsofco.de/on-not-and-specificity/&#34;&gt;http://bitsofco.de/on-not-and-specificity/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Specificity of very &lt;code&gt;:not&lt;/code&gt; explained by Ire Aderinokun. Great snappy article that covers everything that you need to know about CSS3 pseudo-class &lt;code&gt;:not&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reactjs-fundamentals&#34;&gt;React.js Fundamentals &lt;a href=&#34;#reactjs-fundamentals&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://courses.reactjsprogram.com/courses/reactjsfundamentals&#34;&gt;http://courses.reactjsprogram.com/courses/reactjsfundamentals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tyler McGinnis created amazing course for all React beginners absolutely for free! I highly encourage you to check it out. It is definitely one of the best resources ever to get going with React.js.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;safari-technology-preview&#34;&gt;Safari Technology Preview &lt;a href=&#34;#safari-technology-preview&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/safari/technology-preview/&#34;&gt;https://developer.apple.com/safari/technology-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Safari lunches new version of their browser, full of cutting edges technology. It is equivalent of Google Chrome Canary or Firefox Nightly.  Another app to keep in dock for all web devs.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;microsoft-is-bringing-the-bash-shell-to-windows-10&#34;&gt;Microsoft is bringing the Bash shell to Windows 10 &lt;a href=&#34;#microsoft-is-bringing-the-bash-shell-to-windows-10&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://techcrunch.com/2016/03/30/be-very-afraid-hell-has-frozen-over-bash-is-coming-to-windows-10/&#34;&gt;http://techcrunch.com/2016/03/30/be-very-afraid-hell-has-frozen-over-bash-is-coming-to-windows-10/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a news that should make every Windows user very happy. We will finally forget about frustration of jumping from one platform to another. Great step Microsoft. Immediately it makes Windows environment much more attractive for all developers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manipulate JavaScript Arrays like a boss</title>
      <link>https://pawelgrzybek.com/manipulate-javascript-arrays-like-a-boss/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/manipulate-javascript-arrays-like-a-boss/</guid>
      <description>&lt;p&gt;One of the most amazing things in programming is the fact that one task can be achieved via a number of different methods. My recent journey through the world of &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React.js&lt;/a&gt; became extremely fascinating and not just because of the amazingness of this library. Spending so much time in the JavaScript environment taught me a lot of the language&amp;rsquo;s core features. I would like to spend a few minutes showing you three easy methods that will make you a hero using arrays and give you a great start with functional programming. I will try to keep all of the examples in this article really simple, just to make the concepts discussed crystal clear.&lt;/p&gt;
&lt;h2 id=&#34;stop-looping-start-mapping&#34;&gt;Stop looping, start mapping &lt;a href=&#34;#stop-looping-start-mapping&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;&lt;code&gt;Array.map()&lt;/code&gt;&lt;/a&gt; is a method that behaves like a loop. It creates a new array and returns values transformed by the applied callback function. It doesn&amp;rsquo;t do anything more than the standard &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;forEach&lt;/code&gt; can do, it just provides a much nicer notation. It always returns an array with the same length and every element corresponds to the same position in the source array. Let&amp;rsquo;s have a look at these examples where we&amp;rsquo;re increasing each number in a collection by one. The first one with a &lt;code&gt;for&lt;/code&gt; loop and the next one using &lt;code&gt;.map()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 3, 6, 9 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 3, 6, 9 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And ES2015 version&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 3, 6, 9 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;filter-values-in-an-array&#34;&gt;Filter values in an array &lt;a href=&#34;#filter-values-in-an-array&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What if we would like to create a new array based on an already existing one, but simultaneously remove all the elements that are smaller than 5? Easy, right? Write a quick loop, an if statement, and push the result to a new collection. Yes, you are right, it does the job, but let me introduce you to the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&#34;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt; method. It works in a very similar way to &lt;code&gt;map()&lt;/code&gt;, but the callback function, instead of returning a modified element, returns a boolean value that dictates if the element should be added to the new array (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;). Compared to map, &lt;code&gt;filter&lt;/code&gt; doesn&amp;rsquo;t guarantee that the length of the new array is the same as the source array. Time for some examples. Again, the first one using a &lt;code&gt;for&lt;/code&gt; loop and the second one using the &lt;code&gt;filter()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 5, 8 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 5, 8 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And ES2015 version&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 5, 8 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reducing-an-arrays-values-to-a-single-value&#34;&gt;Reducing an array&amp;rsquo;s values to a single value &lt;a href=&#34;#reducing-an-arrays-values-to-a-single-value&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lets say we would like to sum all of the values in an array. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&#34;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt; comes in handy. This method is a bit more complicated, but at the same time much more powerful. Compared to &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt; can take one more argument - the initial value - not only the callback function. The second argument is optional. Let&amp;rsquo;s go back to our example and try to sum up all the values inside an array. Similarly to the previous examples, I will first show you a possible solution using a &lt;code&gt;for&lt;/code&gt; loop, and then via the &lt;code&gt;reduce()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And ES2015 version&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wow, wow, wow! What just happened here? Easy, it is not as difficult or as magical as it looks at first glance. The names of the arguments that I used inside the callback function should give you a big hint. Let&amp;rsquo;s go through every iteration step by step. Initially when the method &lt;code&gt;reduce()&lt;/code&gt; traverses through a &lt;code&gt;number&lt;/code&gt; array it will take the first value (2) of the array as the &lt;code&gt;total&lt;/code&gt; argument and the second value (5) as &lt;code&gt;num&lt;/code&gt;. The sum of the arguments (2 + 5) is returned (7) and is passed to the &lt;code&gt;total&lt;/code&gt; argument to use in the next iteration. The array&amp;rsquo;s third value (8) is assigned to the &lt;code&gt;num&lt;/code&gt; argument. Again, the sum of these two values is returned (7 + 8). Because we don&amp;rsquo;t have any more values in the &lt;code&gt;numbers&lt;/code&gt; array, we receive 15 as the result of the &lt;code&gt;reduce()&lt;/code&gt; method. Hopefully you understand the pattern.&lt;/p&gt;
&lt;p&gt;I mentioned earlier that the &lt;code&gt;reduce()&lt;/code&gt; method optionally accepts a second argument as the initial value. Let&amp;rsquo;s repeat our example but with an initial value of 1000.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 1015
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And ES2015 version&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersSum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 1015
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Passing the optional initial value as a second argument slightly changes the previously described behavior. The difference is minor though. Initially it assigns 1000 to the &lt;code&gt;total&lt;/code&gt; argument and the first value in the array (2) as the &lt;code&gt;num&lt;/code&gt; argument. The pattern then continues identically.&lt;/p&gt;
&lt;h2 id=&#34;chain-it-together&#34;&gt;Chain it together &lt;a href=&#34;#chain-it-together&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The beautiful thing about &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; is the fact that an array goes in and an array comes out as a result of the method. This behavior means we can chain these methods together with ease.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 6, 9 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And ES2015 version&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbersNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 6, 9 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;i-hope-this-helped-you-out&#34;&gt;I hope this helped you out &lt;a href=&#34;#i-hope-this-helped-you-out&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I learned these three methods I had one of those &amp;ldquo;WOW&amp;rdquo; moments and I wanted to use them everywhere. However you should be aware about the lack of support for these features in Internet Explorer 8 and older. I hope you don&amp;rsquo;t need to support these browsers anymore, but if you have to &lt;a href=&#34;https://github.com/kriskowal/es5-shim/&#34;&gt;es5-shim&lt;/a&gt; covers you.&lt;/p&gt;
&lt;p&gt;Mattias Petter Johansson and his &lt;a href=&#34;https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q/feed&#34;&gt;Fun Fun Function&lt;/a&gt; YouTube channel is a good place to visit if you would like a deeper explanation of &lt;a href=&#34;https://youtu.be/BMUiFMZr7vk&#34;&gt;filter()&lt;/a&gt; and &lt;a href=&#34;https://youtu.be/bCqtb-Z5YGQ&#34;&gt;map()&lt;/a&gt;. Subscribe to it and wait for new episodes every Monday morning!&lt;/p&gt;
&lt;p&gt;Bye :-*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git tip - How to stage a hunk of code via the command line</title>
      <link>https://pawelgrzybek.com/git-tip-staging-hunk-of-code-via-command-line/</link>
      <pubDate>Fri, 18 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/git-tip-staging-hunk-of-code-via-command-line/</guid>
      <description>&lt;p&gt;The command line is my preferred way of using git. My code editor (Sublime Text) and command line app (iTerm 2) is everything that I need. Although I have some minor experience with GUI tools, I just don&amp;rsquo;t need them. A third opened app next to the two previously mentioned isn&amp;rsquo;t needed. The only feature that I missed from tools like Tower 2 or SourceTree was the ability to stage small hunks of code from the same file independently and create separate commits from them. Happy days! &lt;a href=&#34;https://twitter.com/wesbos&#34;&gt;Wes Bos&lt;/a&gt; published a fantastic &lt;a href=&#34;http://wesbos.com/git-hot-tips/&#34;&gt;collection of git tips and tricks&lt;/a&gt; a few days ago, and one of them is the feature that I was always missing. Less talking, more coding!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we have a file &lt;code&gt;helpers.js&lt;/code&gt; full of helper functions (for brevity we&amp;rsquo;ll keep this example simple). This file is already committed, and we spot some obvious flaws in our functions. Try to figure it out by yourself :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timesTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timesFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timesTen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s fix it&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timesTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timesFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timesTen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s better! Now, we would like to store these changes as two separate commits (one per function). This is how to do it in SourceTree.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-03-18-1.jpg&#34;
  alt=&#34;Staging a hunk of code in SourceTree&#34;
  loading=&#34;lazy&#34;
  width=&#34;848&#34;
  height=&#34;594&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Time for the command line. The well known command &lt;code&gt;git add&lt;/code&gt; with less well known flag &lt;code&gt;-p&lt;/code&gt; (patch) comes in handy now. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add -p helpers.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-03-18-2.jpg&#34;
  alt=&#34;Staging a hunk of code in Command line&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;900&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Wow, git what do you want from me now?! Let me help you!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; - stage this hunk&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; - do not stage this hunk&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; - quit; do not stage this hunk nor any of the remaining ones&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; - stage this hunk and all later hunks in the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; - do not stage this hunk nor any of the later hunks in the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - search for a hunk matching the given regex&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; - split the current hunk into smaller hunks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; - manually edit the current hunk&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; - print help&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our case, git made the suggestion for us to keep the two functions as one piece of code ready to stage. This isn&amp;rsquo;t what we want to do. We need to split the current hunk into smaller hunks by typing &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-03-18-3.jpg&#34;
  alt=&#34;Split current hunk into smaller hunks in Git&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;452&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Much better. Accept by pressing &lt;code&gt;y&lt;/code&gt; followed by &lt;code&gt;n&lt;/code&gt; to skip the next hunk and commit the change on the first function.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-03-18-4.jpg&#34;
  alt=&#34;Commit separate independent hunks of code in Git&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;898&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Now you are ready to follow the process yourself with the remaining functions. Hopefully this has helped you out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first year of blogging</title>
      <link>https://pawelgrzybek.com/my-first-year-of-blogging/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/my-first-year-of-blogging/</guid>
      <description>&lt;p&gt;A web developer&amp;rsquo;s learning curve is endless and the main source of information are blogs created by other developers. The vast majority of good developers highlight the benefits of written content whenever they share some thoughts about their career path. I never understood this before I tried doing it myself. Exactly one year ago I published &lt;a href=&#34;https://pawelgrzybek.com/hello-there/&#34;&gt;my first article&lt;/a&gt; and I couldn&amp;rsquo;t be happier that I started. I won&amp;rsquo;t be stopping here that&amp;rsquo;s for sure! Let me share with you a few thoughts about my first year of blogging.&lt;/p&gt;
&lt;h2 id=&#34;no-boring-stats&#34;&gt;No boring stats &lt;a href=&#34;#no-boring-stats&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no place here for any boring stats, simply because I have no access to the numbers. During the early days I had a Google Analytics tracking script installed, but pretty soon after it was installed I got rid of it. I decided I would rather dedicate my time to writing content instead of investigating the numbers of visitors or bounce rates (I still barely know what that is). Even now I have no clue how many people read my articles.&lt;/p&gt;
&lt;p&gt;My domain costs me £6 annually and this is the only cost that I spent on the website. As a hosting I use GitHub Pages - it is totally for free. I earned on my website £0. I have never thought about it as a source of income and I&amp;rsquo;m going to be stick by this.&lt;/p&gt;
&lt;p&gt;I managed to publish 37 articles in total which averages at a serving of fresh content every 10 days. Compared to some other popular bloggers this score isn&amp;rsquo;t impressive at all. Regardless, I&amp;rsquo;m really proud of the work that I have done taking into consideration the fact that I have a full time job (which is not related with my personal projects), run a small online business with my good friend who lives 2000km away, care about my lovely cat and recently split with my girlfriend after a 4 year relationship. Although I&amp;rsquo;d wish to write more, I can&amp;rsquo;t keep that promise right now.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-03-11-1.jpg&#34;
  alt=&#34;Picture of my lovely cat Biała&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1050&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;jekyll-github-pages-and-cloudflare-turned-out-to-be-a-fantastic-setup&#34;&gt;Jekyll, GitHub Pages and Cloudflare turned out to be a fantastic setup &lt;a href=&#34;#jekyll-github-pages-and-cloudflare-turned-out-to-be-a-fantastic-setup&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My research about the technology that I wanted to use wasn&amp;rsquo;t intense. I decided to use the same tools that the majority of the community recommends in the age of static website generators. A &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; website hosted on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; supercharged by &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt; turned out to be a great setup. If you want to find out more about my setup, &lt;a href=&#34;https://pawelgrzybek.com/jekyll-blog-on-github-pages-supercharged-by-cloudflare/&#34;&gt;one of my first articles&lt;/a&gt; goes in depth about the subject. If you are planning to start your own website my advice is to not care about the platform too much. Stick to the toolkit that you are familiar with instead of spending time picking and choosing your setup - use this time to write content instead!&lt;/p&gt;
&lt;h2 id=&#34;what-went-well&#34;&gt;What went well &lt;a href=&#34;#what-went-well&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main benefit of blogging is definitely increasing your knowledge through writing about topics of interest. Every article requires solid preparation and research. Taking care about the quality of the content makes sense because the payback (although not monetary) will soon follow. After just a few posts I noticed that people were sharing my articles with other web developers. The satisfaction of seeing your article exchanged by the community is priceless. Some of my web gurus that I follow recommended my posts on social media channels. Some of them even follow me back on Twitter! Wawawiwa! People like &lt;a href=&#34;https://twitter.com/chriscoyier&#34;&gt;Chris Coyier&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/wesbos&#34;&gt;Wes Bos&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/una&#34;&gt;Una Kravets&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/rachelandrew&#34;&gt;Rachel Andrew&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mpjme&#34;&gt;Mattias P Johansson&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/helloanselm&#34;&gt;Anselm Hannemann&lt;/a&gt; appreciated my efforts and shared articles on social media channels and periodic newsletters. Priceless! Thank you for your support guys!&lt;/p&gt;
&lt;p&gt;Jobs! For the past year I have received tons of job offers from around the world. Some of them are completely unrelated with my skills, these are normally roles proposed by LinkedIn recruiters. Amongst this crap there are some really tempting roles from agencies who are referring to my personal website as a starting point.&lt;/p&gt;
&lt;h2 id=&#34;what-are-my-future-plans&#34;&gt;What are my future plans &lt;a href=&#34;#what-are-my-future-plans&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m planning to write more and share even more valuable stuff. I would like to be involved more in the progress of our community. But most importantly - I want to keep it fun! Now, let me sing with &lt;a href=&#34;https://youtu.be/b6hE5OmpKyc&#34;&gt;James Brown and Afrika Bambaataa&lt;/a&gt;. Bye bye :*&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Peace, Unity, Love and having Fun&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2016 February</title>
      <link>https://pawelgrzybek.com/top-picks-2016-february/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-february/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;responsive-image-breakpoints-generator-a-new-open-source-tool&#34;&gt;Responsive Image Breakpoints Generator, A New Open Source Tool &lt;a href=&#34;#responsive-image-breakpoints-generator-a-new-open-source-tool&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/01/responsive-image-breakpoints-generation/&#34;&gt;https://www.smashingmagazine.com/2016/01/responsive-image-breakpoints-generation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nadav Soferman on Smashing Magazine presented a game changer in world of responsive images. Article is worth to read and tool work to use. Try it yourself!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;everything-you-wanted-to-know-about-javascript-scope&#34;&gt;Everything you wanted to know about JavaScript scope &lt;a href=&#34;#everything-you-wanted-to-know-about-javascript-scope&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope&#34;&gt;https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Todd Motto explains the JavaScript scope in one article. I thought it needs a book, but this lad did it in few paragraphs. Amazing article for all JavaScript’ers!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-best-practices&#34;&gt;CSS Best Practices &lt;a href=&#34;#css-best-practices&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://fantasai.inkedblade.net/style/talks/best-practices/#title&#34;&gt;http://fantasai.inkedblade.net/style/talks/best-practices/#title&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Who can give you better CSS advices than one of the spec creators? It’s collection of very practical advices server by &lt;a href=&#34;https://twitter.com/fantasai&#34;&gt;@fantasai&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;craft&#34;&gt;Craft &lt;a href=&#34;#craft&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://labs.invisionapp.com/craft&#34;&gt;http://labs.invisionapp.com/craft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next generation of plugins is coming. This is a micro plugin with giga potential. I’m going to use it and compare it with on of my favourite &lt;a href=&#34;https://github.com/timuric/Content-generator-sketch-plugin&#34;&gt;Content Generator&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;javascript-modules-a-beginners-guide&#34;&gt;JavaScript Modules: A Beginner’s Guide &lt;a href=&#34;#javascript-modules-a-beginners-guide&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&#34;&gt;https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the best explanation of Javascript bundling that I read so far. Preethi Kasireddy did amazing job writhing down this two parts series (&lt;a href=&#34;https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://medium.freecodecamp.com/javascript-modules-part-2-module-bundling-5020383cf306&#34;&gt;2&lt;/a&gt;). If you are new in JavaScript ecosystem, I encourage you to do a homework and give it a read.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;case-study-our-svg-icon-process&#34;&gt;Case Study: Our SVG Icon Process &lt;a href=&#34;#case-study-our-svg-icon-process&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.cloudfour.com/our-svg-icon-process/&#34;&gt;http://blog.cloudfour.com/our-svg-icon-process/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very detailed SVG icons sprites workflow. It includes well described build process and takes accessibility into consideration. The best SVG icons system that I came across so far.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-variables-why-should-you-care&#34;&gt;CSS Variables: Why Should You Care? &lt;a href=&#34;#css-variables-why-should-you-care&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care&#34;&gt;https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CSS Variables (officially called custom properties) becoming a reality. They work in Firefox for some time and they are coming in next stable release of Google Chrome. Why should you care?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;javascript-fatigue-fatigue&#34;&gt;JavaScript fatigue fatigue &lt;a href=&#34;#javascript-fatigue-fatigue&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.2ality.com/2016/02/js-fatigue-fatigue.html&#34;&gt;http://www.2ality.com/2016/02/js-fatigue-fatigue.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m guilty of being a constant “life improvement machine”. This article is array of golden advices from Dr. Axel Rauschmayer.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;issue-and-pull-request-templates&#34;&gt;Issue and Pull Request templates &lt;a href=&#34;#issue-and-pull-request-templates&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/blog/2111-issue-and-pull-request-templates&#34;&gt;https://github.com/blog/2111-issue-and-pull-request-templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github creators started to listen a community and we got a new feature - Issue and Pull Request templates. It is super helpful for bigger projects when people don’t follow the convention created by maintainers. We can see the quick adoption of these feature by many big projects.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;unpacking-webpack&#34;&gt;Unpacking Webpack &lt;a href=&#34;#unpacking-webpack&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.tighten.co/unpacking-webpack&#34;&gt;http://blog.tighten.co/unpacking-webpack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a huge fan of &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt; I noticed a huge potential in &lt;a href=&#34;https://webpack.github.io/&#34;&gt;Webpack&lt;/a&gt; when I work with JavaScript a lot more than before. Configuration may be difficult tho. This is best tutorial that I saw to walk you through the Webpack set up.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;neil-gaiman-2012-commencement-speech-make-good-art&#34;&gt;Neil Gaiman 2012 Commencement Speech &amp;ldquo;Make Good Art&amp;rdquo; &lt;a href=&#34;#neil-gaiman-2012-commencement-speech-make-good-art&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/plWexCID-kA&#34;&gt;https://youtu.be/plWexCID-kA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you need a portion of inspiration in your life, you won’t regret this 20 minutes speech.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Custom Properties explained</title>
      <link>https://pawelgrzybek.com/css-custom-properties-explained/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/css-custom-properties-explained/</guid>
      <description>&lt;p&gt;In programming languages the term &amp;ldquo;variable&amp;rdquo; describes a storage location normally associated with an identifier that contains some value. Despite fact that CSS is a markup language, spec creators were very generous recently and gave us a tiny, but very powerful piece of real programming capability. Excitement about native &lt;a href=&#34;https://www.w3.org/TR/css-variables/&#34;&gt;CSS Custom Properties&lt;/a&gt; is generally tempered by the incorrect comparison to variables used in preprocessors like &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; or &lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt;. Don&amp;rsquo;t be fooled by this misconception! Bare with me for the rest of this article and let&amp;rsquo;s embrace the power of this new native feature together.&lt;/p&gt;
&lt;h2 id=&#34;syntax&#34;&gt;Syntax &lt;a href=&#34;#syntax&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I saw the syntax for a first time I wasn&amp;rsquo;t a big fan of it. To be honest, not much has changed since. One of the spec creators gave us a &lt;a href=&#34;http://www.xanthir.com/blog/b4KT0&#34;&gt;fair explanation&lt;/a&gt; behind the naming decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we use $foo for variables, we&amp;rsquo;ll be unable to use it for future &amp;ldquo;variable-like&amp;rdquo; things.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A declaration can be made on any selector and it requires a valid identifier that starts with two dashes. Unlike other CSS properties, variable names are case-sensitive. They follow inheritance and specificity rules like all other ordinary properties. If you need a reminder on how specificity in CSS works, I encourage you to read &lt;a href=&#34;https://pawelgrzybek.com/css-specificity-explained/&#34;&gt;&amp;ldquo;CSS Specificity explained&amp;rdquo;&lt;/a&gt; first. The common practice is to declare it on the &lt;code&gt;:root&lt;/code&gt; element to keep it accessible in all child selectors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--brand-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#06c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To reference a variable value use the &lt;code&gt;var()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Custom properties can share values between each other.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--brand-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#06c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--logo-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The new var function allows a fallback value in case the property wasn&amp;rsquo;t declared beforehand.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Roboto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Helvetica&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;Yes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;quotation&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;marks&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;needed&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;More&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;about&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;that&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;here&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mathiasbynens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;be&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;notes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;unquoted-font-family&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Variables cannot be a property name or part of a value. The following examples are not valid.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--side&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;var(--side):&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;20px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;margin-top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;Use&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;instead&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;margin-top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-difference-between-native-css-custom-properties-and-sass-variables&#34;&gt;The difference between native CSS Custom Properties and Sass variables &lt;a href=&#34;#the-difference-between-native-css-custom-properties-and-sass-variables&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Preprocessors like &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; or &lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt; are fantastic! The variables available in these tools are not exactly the same as CSS Custom Properties though. Further, the variables that are available in the popular &lt;a href=&#34;http://postcss.org/&#34;&gt;PostCSS&lt;/a&gt; plugin called &lt;a href=&#34;http://cssnext.io/&#34;&gt;cssnext&lt;/a&gt; use the same syntax as native CSS Custom Properties but still behave exactly the same as those from Sass or LESS. They apply a static value to the declaration during the compilation process. The new native CSS feature applies a value to a DOM element on runtime meaning that the browser allows us to reassign it. The dynamic nature of this feature allows us to take advantage of other language facilities like media queries or cascading. Let&amp;rsquo;s have a look at the classic example that is impossible with preprocessors, but works fine with native CSS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$fz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.5&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example applies a static &lt;code&gt;font-size: 1rem&lt;/code&gt; to the &lt;code&gt;body&lt;/code&gt; tag. The media query is completely ignored because a media query is not something that works in the C or Ruby compiler, it is something that works only in the browser. To make it work in Sass we have to create two separate variables and assign them depending of the breakpoint. CSS Custom Properties don&amp;rsquo;t require the additional compilation process so the browser applies the value at runtime. When we change the width of the viewport, the value of the property is reassigned as expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--fz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;media&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;60rem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;--fz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my opinion it is freaking awesome and it opens an array of new options that weren&amp;rsquo;t possible before. I have many more examples in my head, but hopefully this one clearly illustrates the subject.&lt;/p&gt;
&lt;h2 id=&#34;working-with-css-custom-properties-and-javascript&#34;&gt;Working with CSS Custom Properties and JavaScript &lt;a href=&#34;#working-with-css-custom-properties-and-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The true power of CSS Custom Properties comes when we combine it together with JavaScript. It takes very few lines of code to allow us to get and change the value of CSS custom property. Let&amp;rsquo;s go through a few simple examples.&lt;/p&gt;
&lt;h3 id=&#34;get-the-value-of-css-custom-properties&#34;&gt;Get the value of CSS Custom Properties &lt;a href=&#34;#get-the-value-of-css-custom-properties&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To get a value of a property we have to use &lt;code&gt;getPropertyValue()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--brand-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;salmon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;styles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;customProp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;styles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getPropertyValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;--brand-color&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;customProp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// salmon
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reassign-the-value-of-css-custom-properties&#34;&gt;Reassign the value of CSS Custom Properties &lt;a href=&#34;#reassign-the-value-of-css-custom-properties&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To reassign the value &lt;code&gt;setProperty()&lt;/code&gt; comes handy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--brand-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;salmon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;--brand-color&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;purple&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;I’m a purple paragraph!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;detect-the-browser-support-for-css-custom-properties&#34;&gt;Detect the browser support for CSS Custom Properties &lt;a href=&#34;#detect-the-browser-support-for-css-custom-properties&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Browser support for &lt;a href=&#34;https://caniuse.com/#search=css%20var&#34;&gt;CSS Variables&lt;/a&gt; isn&amp;rsquo;t great at the time of writing this article. Google Chrome 49+, Firefox 31+, Safari 9.1+ and iOS 9.3+ doesn&amp;rsquo;t make it reliable enough to use it in production. Luckily we have a few methods to detect the hero of today&amp;rsquo;s article. &lt;a href=&#34;https://pawelgrzybek.com/native-feature-detection-with-csssupports-api/&#34;&gt;Native feature detection with CSS.supports() API&lt;/a&gt; helps us with that. Lets have a look at how to use it in CSS and JavaScript.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--bg-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#e46764&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;pink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;supports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;--bg-color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;CSS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;supports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;--bg-color&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;#e46764&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// returns a boolean value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method isn&amp;rsquo;t bulletproof because support for &lt;code&gt;@support&lt;/code&gt; isn&amp;rsquo;t amazing at all. &lt;a href=&#34;https://twitter.com/wesbos&#34;&gt;Wes Bos&lt;/a&gt; posted a much more &lt;a href=&#34;https://gist.github.com/wesbos/8b9a22adc1f60336a699&#34;&gt;reliable method&lt;/a&gt; the other day. Thanks man!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;testCSSVariables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// create a new element
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// add a new custom property and apply it as a background
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;--color&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rgb(255, 198, 0)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;background&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;var(--color)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// print new element to the DOM
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// assign computed styles of element
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;styles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// return true if background color is assigned correctlly, false otherwise
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doesSupport&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;styles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rgb(255, 198, 0)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// remove element from the DOM
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// return boolean value
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doesSupport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;testCSSVariables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// returns a boolean value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;day--night-mode-switch&#34;&gt;Day / night mode switch &lt;a href=&#34;#day--night-mode-switch&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Codepen is already full of beautiful projects that use CSS Custom Properties. Mine is nothing near this level of creativity but I had good fun doing it. Before checking example below, please make sure your browser &lt;a href=&#34;https://caniuse.com/#feat=css-variables&#34;&gt;supports CSS Custom Properties&lt;/a&gt; first. I&amp;rsquo;m super curious about how you use CSS Custom Properties. Don&amp;rsquo;t be shy and post a link in the comments section :)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new in ECMAScript 2016 (ES7)</title>
      <link>https://pawelgrzybek.com/whats-new-in-ecmascript-2016-es7/</link>
      <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/whats-new-in-ecmascript-2016-es7/</guid>
      <description>&lt;p&gt;In June 2015 the TC39 (Technical Committee 39) officially released a &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/&#34;&gt;spec of ECMAScript 2015&lt;/a&gt; (colloquially known as a ES6). In parallel to the new spec, a new naming system within the language was introduced which is related with the new yearly release process. The plan is to release a new version of the language every year, and ship it with &lt;a href=&#34;https://github.com/tc39/ecma262/blob/master/README.md&#34;&gt;features&lt;/a&gt; that are ready at the time. ES2015 added a lot of amazing features. If you are not familiar with these fresh add-ons yet, check &lt;a href=&#34;https://ponyfoo.com/articles/es6&#34;&gt;&amp;ldquo;ES6 Overview in 350 Bullet Points&amp;rdquo;&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/nzgb?lang=en&#34;&gt;Nicolás Bevacqua&lt;/a&gt;. It&amp;rsquo;s the best summary that I have seen so far. Luckily we shouldn&amp;rsquo;t expect updates as huge every year which give us a chance to follow the spec.&lt;/p&gt;
&lt;p&gt;The final list of features that we&amp;rsquo;re going to see in ECMAScript 2016 is ready and as expected, it is just a small update. Let&amp;rsquo;s have a look!&lt;/p&gt;
&lt;h2 id=&#34;arrayprototypeincludes&#34;&gt;Array.prototype.includes &lt;a href=&#34;#arrayprototypeincludes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&#34;https://github.com/tc39/Array.prototype.includes/&#34;&gt;feature&lt;/a&gt; proposed by Domenic Denicola and Rick Waldron  checks if the array includes an element and returns a boolean value. The syntax is super simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Previously we did it like this which is not as self explanatory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This new feature also solves the problem of checking for &lt;code&gt;NaN&lt;/code&gt; in an array. Compare these two examples and results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;exponentiation-operator&#34;&gt;Exponentiation Operator &lt;a href=&#34;#exponentiation-operator&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Proposed by Rick Waldron, Claude Pache and Brendan Eich, this &lt;a href=&#34;https://github.com/rwaldron/exponentiation-operator&#34;&gt;feature&lt;/a&gt; brings a much nicer notation to exponentiation. It uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Infix_notation&#34;&gt;infix notation&lt;/a&gt; which is much cleaner than function notation (&lt;code&gt;Math.pow()&lt;/code&gt;). We can find the same notation in other programming languages like: Python, Ruby or Pearl. Have look at the examples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Previously&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Top picks — 2016 January</title>
      <link>https://pawelgrzybek.com/top-picks-2016-january/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2016-january/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-es6&#34;&gt;Setting up ES6 &lt;a href=&#34;#setting-up-es6&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leanpub.com/setting-up-es6/read&#34;&gt;https://leanpub.com/setting-up-es6/read&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Axel Rauschmayer as a strong contributor to ES2015 (or more popular as a ES6) just released a book called “Setting up ES6”. It covers all that you need to know to get you running in world of modern js applications. Content is ready to read for free online, but you can spend six bucks for tablet or kindle version. You better give it a read because ES2016 is coming.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;youll-be-surprised-how-much-you-will-do-in-a-day-if-you-sit-and-do-it&#34;&gt;“You’ll be surprised how much you will do in a day if you sit and do it.” &lt;a href=&#34;#youll-be-surprised-how-much-you-will-do-in-a-day-if-you-sit-and-do-it&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/sit-and-do-it/&#34;&gt;https://css-tricks.com/sit-and-do-it/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best piece of advice ever. This article is very Coyier’s style. Love it!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;angular-2-versus-react-there-will-be-blood&#34;&gt;Angular 2 versus React: There Will Be Blood &lt;a href=&#34;#angular-2-versus-react-there-will-be-blood&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@housecor/angular-2-versus-react-there-will-be-blood-66595faafd51&#34;&gt;https://medium.com/@housecor/angular-2-versus-react-there-will-be-blood-66595faafd51&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very good overview of two most popular MVC tools of 2015. If you don’t know neither, thats the good place to start to read about pros and cons of each. I’m big fan of React and this is one of my main focuses of 2016.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-bemit-naming-convention&#34;&gt;The BEMIT naming convention &lt;a href=&#34;#the-bemit-naming-convention&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jamesturneronline.net/beautifulweb/bemit-naming-convention.html&#34;&gt;http://www.jamesturneronline.net/beautifulweb/bemit-naming-convention.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very well written recap and reminder how to structure big and modular projects from CSS perspective. I’m a big fan of BEM and this article goes in depth how to utilise full potential of this naming convention with support of ITCSS created by &lt;a href=&#34;https://twitter.com/csswizardry&#34;&gt;Harry Robets&lt;/a&gt;.  Super article &lt;a href=&#34;https://twitter.com/james_c_turner&#34;&gt;James&lt;/a&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;optimising-svgs-for-web-use&#34;&gt;Optimising SVGs for Web Use &lt;a href=&#34;#optimising-svgs-for-web-use&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@larsenwork/optimising-svgs-for-web-use-part-1-67e8f2d4035#.o3b8hni18&#34;&gt;https://medium.com/@larsenwork/optimising-svgs-for-web-use-part-1-67e8f2d4035#.o3b8hni18&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andreas Larsen wrote a superb series of articles about SVG for web. This three parts series (&lt;a href=&#34;https://medium.com/@larsenwork/optimising-svgs-for-web-use-part-1-67e8f2d4035#.o3b8hni18&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://medium.com/@larsenwork/optimising-svgs-for-web-use-part-2-6711cc15df46#.m2nzb5hjb&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://medium.com/@larsenwork/optimising-svgs-for-web-use-part-2-1-598815d74f9c#.rdpaz58wu&#34;&gt;2½&lt;/a&gt;) covers all main concepts that you have to bare in mind when you prepare SVG on your website.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2015-in-review&#34;&gt;~2015 in review &lt;a href=&#34;#2015-in-review&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@sebmck/2015-in-review-51ac7035e272#.99m09n309&#34;&gt;https://medium.com/@sebmck/2015-in-review-51ac7035e272#.99m09n309&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Super inspiring review of 2015 by Sebastian McKenzie — creator of Babel. This young and super talented dude had a really wild year but he ended up in a happy place. Really amazing read. Thanks Sebastian.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;javascript-modules-es6-import-and-export&#34;&gt;JavaScript Modules: ES6 Import and Export &lt;a href=&#34;#javascript-modules-es6-import-and-export&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/_3oSWwapPKQ&#34;&gt;https://youtu.be/_3oSWwapPKQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well explained ES6 modules by Kyle Robinson Young. Nice 10 min video that shows all available options or taking advantage of brand new ES6 feature that will replace all module bundlers at some point.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;if-you-wish-to-learn-es62015-from-scratch-you-must-first-invent-the-universe&#34;&gt;If you wish to learn ES6/2015 from scratch, you must first invent the universe &lt;a href=&#34;#if-you-wish-to-learn-es62015-from-scratch-you-must-first-invent-the-universe&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/DN4yLZB1vUQ&#34;&gt;https://youtu.be/DN4yLZB1vUQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ashley Williams seriously about ES6 (Yeah, Ashley is talking about ES6, not ES2015). Not very recent talk, but really worth to watch.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;javascript-air-episode-005-firefox-devtools-react-and-redux&#34;&gt;JavaScript Air Episode 005: Firefox DevTools, React, and Redux &lt;a href=&#34;#javascript-air-episode-005-firefox-devtools-react-and-redux&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/wseL3Vl-Hh4&#34;&gt;https://youtu.be/wseL3Vl-Hh4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another epic episode of JavaScriptAir. All about Firefox DevTools built entirely in React. If you are new to React.js you will find bunch of amazing helpful advices here.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;react-howto&#34;&gt;react-howto &lt;a href=&#34;#react-howto&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/petehunt/react-howto&#34;&gt;https://github.com/petehunt/react-howto&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pete Hunt, one of the creators or React, introduces the React ecosystem step by step. This is a must-read for every developer who is trying to play with React. I haven’t found anything better than this one yet. Quick read but full of value.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;webpack-howto&#34;&gt;webpack-howto &lt;a href=&#34;#webpack-howto&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/petehunt/webpack-howto&#34;&gt;https://github.com/petehunt/webpack-howto&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And one more from Pete Hunt. Very helpful guild to start your journey with webpack.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;console&#34;&gt;Console &lt;a href=&#34;#console&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://console.spec.whatwg.org/&#34;&gt;https://console.spec.whatwg.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have a standards for console as well. Yup Yup!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;improved-caching-for-kits-opt-for-longer-cache-timeout&#34;&gt;Improved caching for kits: Opt for longer cache timeout &lt;a href=&#34;#improved-caching-for-kits-opt-for-longer-cache-timeout&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.typekit.com/2016/01/21/improved-caching-for-kits-opt-for-longer-cache-timeout/&#34;&gt;http://blog.typekit.com/2016/01/21/improved-caching-for-kits-opt-for-longer-cache-timeout/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Typekit added a new feature and all performance focused people are going to be really happy with new settings available under “Kit settings” tab.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;offline-web-applications&#34;&gt;Offline Web Applications &lt;a href=&#34;#offline-web-applications&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.udacity.com/course/viewer#!/c-ud899&#34;&gt;https://www.udacity.com/course/viewer#!/c-ud899&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All that you need to know about creating amazing offline user experience of your apps / websites. Well explained by Jake Archibald from Google. This course it totally for free.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Image tag vs background property</title>
      <link>https://pawelgrzybek.com/image-tag-vs-background-property/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/image-tag-vs-background-property/</guid>
      <description>&lt;p&gt;As &lt;a href=&#34;https://wdrl.info/archive/121&#34;&gt;Anselm Hannemann&lt;/a&gt; recently mentioned: front end developers have a problem with HTML and CSS. I avoided diving into the world of JavaScript for years and looking through prism of time I can see many benefits of focusing on HTML and CSS for so long. I learned it thoroughly and I know the power and restrictions that these languages come with. The HTML5 spec was finalized, and published some time ago but many people still don&amp;rsquo;t know how to correctly use the &lt;code&gt;img&lt;/code&gt; tag or &lt;code&gt;background-size&lt;/code&gt; property. Today I focus exclusively on this subject and a bit about the CSS &lt;code&gt;cover&lt;/code&gt; value.&lt;/p&gt;
&lt;h2 id=&#34;image-or-background&#34;&gt;Image or background? &lt;a href=&#34;#image-or-background&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no official guide, and it&amp;rsquo;s easy to understand why. Let me quote myself here (because quotes always look good in blog posts).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is it part of the content, or part of the design?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Images bring semantic value to a website, and adding the &lt;code&gt;alt&lt;/code&gt; tag makes it super accessible and interpreted by all user agents and screen readers. By default your browser interprets it as a printable element unless you specifically say so (massive respect if you have print.css on your website).&lt;/p&gt;
&lt;p&gt;A background image plays a decorative role in your website, it doesn&amp;rsquo;t come with any semantic meaning or add any complementary value to the subject. &lt;a href=&#34;http://www.oxforddictionaries.com/definition/english/background&#34;&gt;Definition&lt;/a&gt; taken straight from the Oxford Dictionary doesn&amp;rsquo;t sound web-related, but offers with same meaning.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The part of a design that forms a setting for the main figures or objects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;yeah-but-background-size-cover&#34;&gt;Yeah, but background-size: cover &lt;a href=&#34;#yeah-but-background-size-cover&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the age of responsive web design we tend to create boxes that are always nicely filled with pictures of cats or whatever. To create it we make use of &lt;code&gt;background-size: cover&lt;/code&gt; definition. I described what it does on &lt;a href=&#34;https://pawelgrzybek.com/background-video-made-easy/&#34;&gt;one of my previous articles&lt;/a&gt; about background videos. It just works fine with adaptive and fluid layouts. Maybe this is the seventh image in your &lt;a href=&#34;http://shouldiuseacarousel.com/&#34;&gt;completely useless carousel&lt;/a&gt; or a featured image above an article on your Wordpress blog. It depends on the circumstances described above, but probably in many situations you ignored the rules described here! I&amp;rsquo;m guilty of doing the same thing.&lt;/p&gt;
&lt;h2 id=&#34;object-fit-for-the-rescue&#34;&gt;Object-fit for the rescue &lt;a href=&#34;#object-fit-for-the-rescue&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit&#34;&gt;The &lt;code&gt;object-fit&lt;/code&gt; CSS property&lt;/a&gt; defines how the content fits to the box. It takes few values: &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;contain&lt;/code&gt;, &lt;code&gt;cover&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;scale-down&lt;/code&gt;. Chris Coyier already published this snappy &lt;a href=&#34;https://css-tricks.com/almanac/properties/o/object-fit/&#34;&gt;article&lt;/a&gt; about all these options with an example on Codepen. Essentially, &lt;code&gt;fill&lt;/code&gt; stretches object to the applied dimensions. It is probably not the most helpful value to use with RWD. &lt;code&gt;Contain&lt;/code&gt; and &lt;code&gt;scale-down&lt;/code&gt; behave in exactly the same way, proportionally sizing the image down to adjust to the boundaries of element without clipping it. &lt;code&gt;None&lt;/code&gt; is none. &lt;code&gt;Cover&lt;/code&gt; is the clear winner in terms of usability in the daily routine of designers and front end developers. As you may have guessed, it does for image exactly what &lt;code&gt;cover&lt;/code&gt; does for &lt;code&gt;background-size&lt;/code&gt;. The content is sized to fill the entire available space of an element. It respects the aspect ratio and clips the width or height (dependent on the proportion).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;object-fit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;cover&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;polyfil-for-object-fit-cover&#34;&gt;Polyfil for object-fit: cover &lt;a href=&#34;#polyfil-for-object-fit-cover&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Amazing things like this rarely come without any downsides. The only problem is Internet Explorer. I like this CSS property too much to not use it so I created a super easy JavaScript fix. If the feature isn&amp;rsquo;t available in the browser, it grabs the source path of an image and applies it to parent element. Background-size and background-position is applied as well to imitate the same effect as &lt;code&gt;object-fit: cover&lt;/code&gt;. Works fine on IE9, IE10, IE11 and Edge. If you need to support IE8, I&amp;rsquo;m sorry.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Detect objectFit support
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;objectFit&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// assign HTMLCollection with parents of images with objectFit to variable
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;js-box&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Loop through HTMLCollection
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Asign image source to variable
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;imageSource&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Hide image
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Add background-size: cover
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;backgroundSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cover&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Add background-image: and put image source here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;backgroundImage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url(&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;imageSource&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Add background-position: center center
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;backgroundPosition&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;center center&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Rounding and truncating numbers in JavaScript</title>
      <link>https://pawelgrzybek.com/rounding-and-truncating-numbers-in-javascript/</link>
      <pubDate>Tue, 19 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/rounding-and-truncating-numbers-in-javascript/</guid>
      <description>&lt;p&gt;Rounding and truncating is a bread and butter action for every single developer. It was covered during your first few math lessons in primary school. Hopefully you still remember how it works in the world of numbers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5 or more? Raise the Score.
4 or less? Let it Rest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s use this knowledge and translate it to JavaScript using the built-in object called &lt;code&gt;Math&lt;/code&gt;. As the name can suggests, it has a collection of properties and methods for mathematical operations on numbers. There is one small difference between &lt;code&gt;Math&lt;/code&gt; and other built-in global objects. &lt;code&gt;Math&lt;/code&gt; isn&amp;rsquo;t a constructor which means that all properties and methods that belong to it are static (meaning that they need to be called by using Math as an object).&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-01-19-1.gif&#34;
  alt=&#34;Math Object in Google Chrome Console&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;400&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;rounding-vs-truncating&#34;&gt;Rounding vs Truncating &lt;a href=&#34;#rounding-vs-truncating&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The difference between these two methods is minor but very important to understand. Both of them are methods of approximating a number by dropping decimal places. Rounding approximates a number using a nearby number at a given degree of accuracy. It can occur in two directions: up and down. Rounding up approximates a number towards positive infinity. Rounding down towards negative infinity. Truncating approximates without rounding. In other words, it &amp;ldquo;rounds&amp;rdquo; towards zero.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Rounding&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;≈&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1416&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;Truncating&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;≈&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hopefully you get the difference. It makes truncating rarely useful in precise calculations (although JavaScript probably isn&amp;rsquo;t a good choice at all if you need precise calculations) but you can come across a situation when it may be irreplaceable. Once example can be when needing to drop decimal places from a pixel value to avoid anti aliasing or weird pixel rounding which is completely different across browser engines.&lt;/p&gt;
&lt;h2 id=&#34;rounding-numbers-in-javascript&#34;&gt;Rounding numbers in Javascript &lt;a href=&#34;#rounding-numbers-in-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rounding is straight forward. We can round to the nearest integer, round down or round up. JavaScript uses three methods to achieve this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Math.round()&lt;/code&gt; - rounds to the nearest integer (if the fraction is 0.5 or greater - rounds up)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.floor()&lt;/code&gt; - rounds down&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.ceil()&lt;/code&gt; - rounds up&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 4
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// 4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rounding numbers with decimal precision requires a little bit of calculation and &lt;code&gt;Math.round()&lt;/code&gt;. Optionally we can use the &lt;code&gt;toFixed()&lt;/code&gt; method that belongs to the &lt;code&gt;Number&lt;/code&gt; prototype. The output type of &lt;code&gt;toFixed()&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt; which needs to be passed to a top-level function called &lt;code&gt;parseFloat()&lt;/code&gt; to return a &lt;code&gt;number&lt;/code&gt;. Unfortunately this seems to be &lt;a href=&#34;http://jsperf.com/rounding-methods-in-javascript&#34;&gt;really slow&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 3.14
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toFixed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;// 3.14 returns a string
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toFixed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 3.14 returns a number
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;truncating-numbers-in-javascript&#34;&gt;Truncating numbers in Javascript &lt;a href=&#34;#truncating-numbers-in-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Math.trunc()&lt;/code&gt; simply removes all the fractional digits. It takes one argument which is a number. If the argument is a positive number it behaves exactly the same as &lt;code&gt;Math.floor()&lt;/code&gt;. For negative numbers it does the same job as &lt;code&gt;Math.ceil()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;//  3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// -3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s worth mentioning that the browser support for &lt;code&gt;Math.trunc()&lt;/code&gt; isn&amp;rsquo;t great. It is part of new &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/#sec-math.trunc&#34;&gt;ES2015 (yeah, I prefer ES6 too) specification&lt;/a&gt;. Have a look at the browser support list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Chrome &amp;gt;= 38&lt;/li&gt;
&lt;li&gt;Firefox &amp;gt;= 25&lt;/li&gt;
&lt;li&gt;Internet Explorer &amp;gt;= Nope :(&lt;/li&gt;
&lt;li&gt;Opera &amp;gt;= 25&lt;/li&gt;
&lt;li&gt;Safari &amp;gt;= 7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luckily there is a way to use this without ES6 support (thanks to Johny who suggested this solution in comments below). We can use &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&#34;&gt;bitwise operators&lt;/a&gt; to accomplish this task. Unfortunately there are some restriction as well. All bitwise operations work on signed 32-bit integers. Using them converts a float to an integer. In practice it means that we can safely work up to &lt;code&gt;2^31−1&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/2147483647_(number)&#34;&gt;2 147 483 647&lt;/a&gt;) which is much less than &lt;code&gt;Number.MAX_VALUE&lt;/code&gt; (1.7976931348623157e+308). This isn&amp;rsquo;t a great idea for monetary calculations either.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;//  3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// -3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3000000000.1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// -1294967296 Ups :(
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tltr-too-long-to-read&#34;&gt;TLTR (too long to read) &lt;a href=&#34;#tltr-too-long-to-read&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I know, I know - time is money. Lets sum it up.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Math.round()&lt;/code&gt; - rounds to the nearest integer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.floor()&lt;/code&gt; - rounds down towards negative infinity&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.ceil()&lt;/code&gt; - rounds up towards positive infinity&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.trunc()&lt;/code&gt; - rounds up or down towards zero (bad browsers support)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-01-19-2.jpg&#34;
  alt=&#34;Math.floor() &amp;amp;amp; Math.ceil() &amp;amp;amp; Math.trunc() on timeline&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;438&#34;
/&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My favourite resources to learn JavaScript</title>
      <link>https://pawelgrzybek.com/my-favourite-resources-to-learn-javascript/</link>
      <pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/my-favourite-resources-to-learn-javascript/</guid>
      <description>&lt;p&gt;A few weeks ago at the annual keynote “The State of World” Matt Mullenweg (creator of Wordpress) &lt;a href=&#34;https://youtu.be/KrZx4IY1IgU&#34;&gt;gave us a homework&lt;/a&gt;. The task sounds simple “Learn JavaScript, Deeply”. The choice of helpful articles online is almost endless but which should you pick to start your journey? In this post, I’ll be sharing a list of resources that helped me get my head around JS.&lt;/p&gt;
&lt;h2 id=&#34;you-dont-know-js-book-series&#34;&gt;You Don&amp;rsquo;t Know JS (book series) &lt;a href=&#34;#you-dont-know-js-book-series&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I could only pick one, I’d definitely recommend the series of books by &lt;a href=&#34;https://twitter.com/getify&#34;&gt;Kyle Simpson&lt;/a&gt; titled &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34;&gt;“YDKJS: You Don&amp;rsquo;t Know JS”&lt;/a&gt;. I’ve read them all yet and I&amp;rsquo;m still coming back to particular chapters quite often. The language of these books is very easy to understand and digest. Definitely my number one recommendation! Thank you Kyle for the effort and expertise that you put into the series!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-01-16-1.jpg&#34;
  alt=&#34;You Don&amp;amp;rsquo;t Know JS by Kyle Simpson&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;933&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;frontend-masters&#34;&gt;Frontend Masters &lt;a href=&#34;#frontend-masters&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you prefer to watch than read, &lt;a href=&#34;https://frontendmasters.com&#34;&gt;Frontend Masters&lt;/a&gt; is a great place to start. It’s a collection of videos recorded during lessons made by JavaScript gurus. Tutors include the legendary &lt;a href=&#34;http://www.crockford.com/&#34;&gt;Douglas Crockford&lt;/a&gt; (he is much better with Javascript than design of his website may suggest!), mentioned above &lt;a href=&#34;https://twitter.com/getify&#34;&gt;Kyle Simpson&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/jhusain&#34;&gt;Jafar Husain&lt;/a&gt; from Netflix. The monthly subscription for these videos costs only $39, but for first month you only have to pay half. If you’re still not convinced, have a look at list of [https://frontendmasters.com/customers-love-frontend-masters/](testimonials on the website).&lt;/p&gt;
&lt;h2 id=&#34;eggheadio&#34;&gt;Egghead.io &lt;a href=&#34;#eggheadio&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://egghead.io/&#34;&gt;Egghead&lt;/a&gt; is another great resource if you prefer watching over reading. Whilst you can pay for monthly subscription, you can also watch tons of amazing resources completely free. The majority of courses on Egghead are JavaScript related. It’s full of resources for beginners, more experienced users and people keen to learn popular frameworks like Angular or React.js.&lt;/p&gt;
&lt;h2 id=&#34;javascript-the-good-parts-by-douglas-crockford&#34;&gt;JavaScript: The Good Parts by Douglas Crockford &lt;a href=&#34;#javascript-the-good-parts-by-douglas-crockford&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.uk/Books-JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742&#34;&gt;JavaScript: The Good Parts by Douglas Crockford&lt;/a&gt; is a ‘must-have’ for any JavaScript developer. It’s a slim but concise and opinionated book about the best parts of the language. Although Douglas Crockford may be a controversial author within the community, he’s made so many good things for JS community that we should to thankful for. I should state that this book is not for beginners, as it requires at last a basic understanding of the syntax to get the most from it. Again - must have!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2016-01-16-2.jpg&#34;
  alt=&#34;JavaScript: The Good Parts by Douglas Crockford&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;933&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;youtube--twitter&#34;&gt;YouTube &amp;amp; Twitter &lt;a href=&#34;#youtube--twitter&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Luckily many JavaScript developers are generous with their time and knowledge which they share on Twitter and YouTube. Find your mentors and follow them. My only advice here is not to follow everyone — following everybody is like following no-one. If I had to pick a single Twitter or YouTube account that is worth to following, that would be a new live broadcast podcast called &lt;a href=&#34;https://www.youtube.com/channel/UCJYTMGbtBliMSG8gadRHK2Q&#34;&gt;JavaScript Air&lt;/a&gt; which is hosted by the super-active and follow-worthy &lt;a href=&#34;https://twitter.com/kentcdodds&#34;&gt;Kent C. Dodds&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;console-in-your-browser&#34;&gt;Console in your browser &lt;a href=&#34;#console-in-your-browser&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Theory without practice is pointless. Every single snippet of code that you come across, you should type in your browser’s console and experiment with. This reminder is on the beginning of every single programming book, every video and I’m repeating it again! Practice is a best teacher. Type your code!&lt;/p&gt;
&lt;p&gt;Please, use comments below to share with me your helpers, blogs, books, articles, YouTube channels… Happy learning guys :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 December</title>
      <link>https://pawelgrzybek.com/top-picks-2015-december/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-december/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;fat-arrow-functions-javascript-programming-tutorial&#34;&gt;Fat Arrow Functions JavaScript Programming Tutorial &lt;a href=&#34;#fat-arrow-functions-javascript-programming-tutorial&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/J85lRtO_yjY&#34;&gt;https://youtu.be/J85lRtO_yjY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best explanation of arrow function in ES2015 as I found so far. Hopefully we are going to see more snappy tutorials about ES6 by Adam soon.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;leaving-the-mac-app-store&#34;&gt;Leaving the Mac App Store &lt;a href=&#34;#leaving-the-mac-app-store&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.sketchapp.com/post/134322691555/leaving-the-mac-app-store&#34;&gt;http://blog.sketchapp.com/post/134322691555/leaving-the-mac-app-store&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sketch App just left Apple App Store. It is getting more popular recently and it doesn’t surprise me at all. Weird rules of sandboxing apps by Apple sometimes can be very restrictive for developers. I wish to see a movement like this by more big players (for example Serif with Affinity Photo and Affinity Design).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;seriously-dont-use-icon-fonts&#34;&gt;Seriously, Don’t Use Icon Fonts &lt;a href=&#34;#seriously-dont-use-icon-fonts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.cloudfour.com/seriously-dont-use-icon-fonts/&#34;&gt;http://blog.cloudfour.com/seriously-dont-use-icon-fonts/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;True, true, true!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;colors-in-sketch&#34;&gt;Colors in Sketch &lt;a href=&#34;#colors-in-sketch&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.sketchapp.com/post/133932511180/colors-in-sketch&#34;&gt;http://blog.sketchapp.com/post/133932511180/colors-in-sketch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Color management has always been a confusion for people. Authors of Sketch App explained the theory really well. Cool article.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-vs-np-the-assumption-that-runs-the-internet&#34;&gt;P Vs. NP: The Assumption That Runs The Internet &lt;a href=&#34;#p-vs-np-the-assumption-that-runs-the-internet&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2015/11/p-vs-np-assumption-that-runs-internet/&#34;&gt;http://www.smashingmagazine.com/2015/11/p-vs-np-assumption-that-runs-internet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I know nothing about security, and probably even less about math but this article is so interesting tho. It present the concept of ‘polynomial time’ and ‘nondeterministic polynomial’. These are two terms that rules the security around internet. Thanks Zack Grossbart!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;flexbox-froggy&#34;&gt;Flexbox Froggy &lt;a href=&#34;#flexbox-froggy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://flexboxfroggy.com/&#34;&gt;http://flexboxfroggy.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learning by playing. Cool idea to familiarize people with flexbox properties. Beer for &lt;a href=&#34;https://twitter.com/thomashpark&#34;&gt;Thomas Park&lt;/a&gt; for this idea!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-guide-to-2016-front-end-conferences&#34;&gt;A Guide to 2016 Front End Conferences &lt;a href=&#34;#a-guide-to-2016-front-end-conferences&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/2016-front-end-conferences/&#34;&gt;https://css-tricks.com/2016-front-end-conferences/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sarah Drainer shared with us long list of front end related conferences in 2016. Useful reference to plan time and budget a little bit in advance.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-im-excited-about-native-css-variables&#34;&gt;Why I&amp;rsquo;m Excited About Native CSS Variables &lt;a href=&#34;#why-im-excited-about-native-css-variables&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://philipwalton.com/articles/why-im-excited-about-native-css-variables/&#34;&gt;http://philipwalton.com/articles/why-im-excited-about-native-css-variables/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/philwalton&#34;&gt;Philip Walton&lt;/a&gt; from Google explains the general difference between preprocessors variables and new custom properties. This feature is already available in &lt;a href=&#34;https://caniuse.com/#feat=css-variables&#34;&gt;Firefox and in Google Chrome&lt;/a&gt; behind the experimental flag. Hopefully it is going to be implemented in core of browsers because it can make our life much easier. I have so many practical use cases for this in my head, but I will keep these ideas for future article.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;learn-javascript-deeply&#34;&gt;Learn JavaScript Deeply &lt;a href=&#34;#learn-javascript-deeply&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/KrZx4IY1IgU&#34;&gt;https://youtu.be/KrZx4IY1IgU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The creator of Wordpress comes with one simple advice. Watch it and deal with it :)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;24waysorg&#34;&gt;24ways.org &lt;a href=&#34;#24waysorg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://24ways.org/&#34;&gt;https://24ways.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All web developers are waiting for December articles series on 24ways.org. It’s like a geeky advent calendar. Review all articles here and pick what you like. Majority of them are epic and are going to be republished everywhere throughout the next year.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;welcome-to-sketchs-developer-site&#34;&gt;Welcome to Sketch’s Developer Site &lt;a href=&#34;#welcome-to-sketchs-developer-site&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://developer.sketchapp.com/&#34;&gt;http://developer.sketchapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bohemian Coding, authors of Sketch App just published a reference for developers that covers all that you need to know if you are planing to develop your own plugin. I can’t believe how hard these guys are working to provide us best design tool ever. If you still live in world of Adobe, better &lt;a href=&#34;https://pawelgrzybek.com/i-wont-miss-you-adobe/&#34;&gt;check my previous&lt;/a&gt; post please.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;an-intro-to-using-npm-and-es6-modules-for-front-end-development&#34;&gt;An Intro To Using npm and ES6 Modules for Front End Development &lt;a href=&#34;#an-intro-to-using-npm-and-es6-modules-for-front-end-development&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://wesbos.com/javascript-modules/&#34;&gt;http://wesbos.com/javascript-modules/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ES2016 modules explained by Wes Bos. Really great articles for everyone who still live in the world of embedded scripts line by line or concatenated files via gulp task. Good introduction full of useful snippets.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;more-responsive-tapping-on-ios&#34;&gt;More Responsive Tapping on iOS &lt;a href=&#34;#more-responsive-tapping-on-ios&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://webkit.org/blog/5610/more-responsive-tapping-on-ios/&#34;&gt;https://webkit.org/blog/5610/more-responsive-tapping-on-ios/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;thursday-keynote-maciej-ceglowski---the-website-obesity-crisis&#34;&gt;Thursday Keynote Maciej Ceglowski - The Website Obesity Crisis &lt;a href=&#34;#thursday-keynote-maciej-ceglowski---the-website-obesity-crisis&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/147806338&#34;&gt;https://vimeo.com/147806338&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maciej Cegłowski, the author of Pinboard and fantastic speaker about web obesity again. In my opinion best talk about importance of performance ever.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-web-accessibility-basics&#34;&gt;The web accessibility basics &lt;a href=&#34;#the-web-accessibility-basics&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.marcozehe.de/2015/12/14/the-web-accessibility-basics/&#34;&gt;https://www.marcozehe.de/2015/12/14/the-web-accessibility-basics/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Accessibility is problem of a web nowadays. Marco comes with collection of rules that you need to follow. Really good read and so many good conclusions.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;service-worker-cookbook&#34;&gt;Service Worker Cookbook &lt;a href=&#34;#service-worker-cookbook&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://serviceworke.rs/&#34;&gt;https://serviceworke.rs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Collection of recipes how to use service worker on your site. All these goodies created for us by Mozilla team. Handy reference!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Background video made easy</title>
      <link>https://pawelgrzybek.com/background-video-made-easy/</link>
      <pubDate>Sun, 06 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/background-video-made-easy/</guid>
      <description>&lt;p&gt;We love videos! It’s a pleasure for our eyes to see a little bit of modern looking movement on a website. Unfortunately our browser doesn’t love videos like we do. Good performance isn’t a friend with videos neither. I have come across many websites with autoplayed videos hosted on Vimeo or youtube that use crazy amount of bandwidth. Some minimal looking websites with full HD video in the background even triggered the fans on my laptop. I believe that there is nothing wrong with using a looped video as a background, as long as it is done correctly. Have a look at &lt;a href=&#34;http://www.squarespace.com/&#34;&gt;Squarespace&lt;/a&gt;, &lt;a href=&#34;http://thisalso.com/&#34;&gt;This Also&lt;/a&gt; or &lt;a href=&#34;https://www.bigcartel.com/&#34;&gt;Big Cartel&lt;/a&gt; to name few — it looks nice.&lt;/p&gt;
&lt;p&gt;HTML5 introduced the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&#34;&gt;video&lt;/a&gt; tag and list of settings which we can control via &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#Attributes&#34;&gt;attributes&lt;/a&gt; or via &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events&#34;&gt;JavaScript media events&lt;/a&gt;. Browser support is really great — luckily I don&amp;rsquo;t have to target IE8 anymore. If you need to, I&amp;rsquo;m really sorry but this tutorial won&amp;rsquo;t cover any fallback. We are going to create a section and with small positioning trick apply a background video that will always cover the entire space of this section. Essentially it behaves exactly the same as &lt;code&gt;background-size: cover;&lt;/code&gt; in CSS. If you still don&amp;rsquo;t get it, have a look at the picture below. Kate, I love you!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-12-06-1.jpg&#34;
  alt=&#34;background-size: cover in CSS&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;597&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;lets-have-a-word-about-videos--performance&#34;&gt;Let’s have a word about videos &amp;amp; performance &lt;a href=&#34;#lets-have-a-word-about-videos--performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s worth mentioning that if performance is something that you would like to improve, you should leave this article now. Companies like &lt;a href=&#34;https://www.paypal.com&#34;&gt;PayPal&lt;/a&gt; or &lt;a href=&#34;http://www.royalalberthall.com/&#34;&gt;The Royal Albert Hall&lt;/a&gt; prioritised speed over visual experiences and recently removed videos from their websites. You need to know what the main aim of your project is and bare in mind the cost that the video comes with.&lt;/p&gt;
&lt;h2 id=&#34;markup-and-css&#34;&gt;Markup and CSS &lt;a href=&#34;#markup-and-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Less talk more action.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;banner&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;autoplay&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;muted&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;banner__video&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;poster&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;video.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;video.webm&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;video/webm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;video.mp4&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;video/mp4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s all we need. As you can see I have added some attributes to &lt;code&gt;video&lt;/code&gt; tag. Hopefully &lt;code&gt;autoplay&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt; and &lt;code&gt;muted&lt;/code&gt; don’t need any explanation. &lt;code&gt;poster&lt;/code&gt; includes a path to the image that will be displayed on the mobile devices. When the video isn’t ready or it’s paused, you browser will show this poster instead. It is a good practice to create a poster from the first frame of your video.&lt;/p&gt;
&lt;p&gt;Multiply &lt;code&gt;source&lt;/code&gt; element is needed to provide a cross browser experience. If you need to support old Firefox browsers you need to add ogg format as well. You can generate all those formats with tools like &lt;a href=&#34;http://www.mirovideoconverter.com/&#34;&gt;Miro Converter&lt;/a&gt; or my favourite online &lt;a href=&#34;https://html5backgroundvideos.com/converter/&#34;&gt;HTML5 Video Converter&lt;/a&gt;. Please control the size of your files. It is a difficult task to find a compromise between length, quality and file size. I always try to compress my videos to something between 500kb - 1000kb, and avoid videos longer than 10 - 15 seconds. &lt;a href=&#34;https://handbrake.fr/&#34;&gt;HandBrake&lt;/a&gt; is open source video transcoder that can help you with compression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;banner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;overflow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;hidden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;banner__video&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;absolute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;min-height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;translateX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;translateY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;z-index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the trick. Position everything on centre, add minimum width and height to fill the space of the parent div, hide everything that is outside of the box, and place the video behind the content of the parent.&lt;/p&gt;
&lt;p&gt;We made it, it works fine but that doesn’t mean it can’t be improved. Let’s have a look at few more tricks that can enhance this effect and the user experience.&lt;/p&gt;
&lt;h2 id=&#34;video-poster-on-ios&#34;&gt;Video poster on iOS &lt;a href=&#34;#video-poster-on-ios&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mobile browsers are very clever and they ignore &lt;code&gt;autoplay&lt;/code&gt; attribute to save valuable bandwidth. All Android devices will display the poster image but iOS devices will display huge play button in the middle of a player. It sucks.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-12-06-2.jpg&#34;
  alt=&#34;Play icon iOS video tag&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;888&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;We definitely don’t want to keep it like that. A few lines of JavaScript comes in help here. Essentially we need to grab the value of the poster attribute and apply it as a background-image of the parent element. Additionally we need to add a correct background-size and background-position to this div and hide video tag. Done!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;banner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.banner&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bannerVideo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.banner__video&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/iPad|iPhone|iPod/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;platform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;banner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;backgroundImage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url(&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bannerVideo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;poster&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;banner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;backgroundSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cover&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;banner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;backgroundPosition&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;bannerVideo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;a-little-bit-of-make-up&#34;&gt;A little bit of make up &lt;a href=&#34;#a-little-bit-of-make-up&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If we cannot provide high quality video, we need to find a way to mask artifacts. We need to create a small pattern and then overlay it over the video by adding a &lt;code&gt;background-image&lt;/code&gt; on the parent element. These files are normally very small so we can easily convert them to base64 data to save server requests (it doesn&amp;rsquo;t really matter in age of HTTP2). If you use Emmet in Sublime Text or Atom, you can use a shortcut &lt;code&gt;Shift + Ctrl + D&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-12-06-3.gif&#34;
  alt=&#34;ENcode Decode base 64 Emmet in Sublime Text 3&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;400&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.patternify.com/&#34;&gt;Paternity&lt;/a&gt; is a super cool tool that you can use to quickly generate base64 patters. It takes few seconds to create one and get a code to paste straight into your project. I created few ready to copy/paste examples for you.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;final-result&#34;&gt;Final result &lt;a href=&#34;#final-result&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully you found it useful. If you have any advice on how can I improve my technique, please let me know in the comments below. If you liked it, please &lt;a href=&#34;https://twitter.com/pawelgrzybek&#34;&gt;follow me on twitter&lt;/a&gt; to don’t miss future articles on my blog.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 November</title>
      <link>https://pawelgrzybek.com/top-picks-2015-november/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-november/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;project-comet-designing-with-real-data&#34;&gt;Project Comet: Designing with Real Data &lt;a href=&#34;#project-comet-designing-with-real-data&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@anirudhs/project-comet-designing-with-real-data-959beccb5c1a#.w64g992vb&#34;&gt;https://medium.com/@anirudhs/project-comet-designing-with-real-data-959beccb5c1a#.w64g992vb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is really stunning showcase of Comet’s amazing feature that helps to work with real data. No more “Lorem Ipsum…”! As a Sketch user, repeated grid isn’t anything amazing for me, but the feature to use real data from real website is amazing!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;visualize-sketch-34-new-features&#34;&gt;Visualize Sketch 3.4 New Features &lt;a href=&#34;#visualize-sketch-34-new-features&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://kwangyik.com/2015/10/28/visualize-sketch-3-4-new-features/&#34;&gt;http://kwangyik.com/2015/10/28/visualize-sketch-3-4-new-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sketch app got a next huge update to version 3.4 recently. Kwang Yik presents majority of big updated on animated gifs. It’s handy to understand all fresh features. My fav is definitely Local sharing and built in plugin management. Nice post, nice blog.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-static-website-generators-are-the-next-big-thing&#34;&gt;Why Static Website Generators Are The Next Big Thing &lt;a href=&#34;#why-static-website-generators-are-the-next-big-thing&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/&#34;&gt;http://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I run my blog on one of the most popular static site generators — Jekyll. It’s not the only player in this territory. Number of tools like that is growing up day by day. Why is it worth to pay attention to static site generator, what are the pros, the cons? Well written &lt;a href=&#34;https://twitter.com/biilmann&#34;&gt;Mathias Biilmann&lt;/a&gt; summary on Smashing Magazine.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;react-for-beginners&#34;&gt;React for Beginners &lt;a href=&#34;#react-for-beginners&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://reactforbeginners.com/&#34;&gt;https://reactforbeginners.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New series of videos made by Wes Bos. I’m huge fan of all things that this guy is doing. I bought it immediately after I saw a friendly reminder on my inbox and as I expected, I spent this money well. Can’t recommend resources by Wes enough. It is fantastic opportunity to learn one of the best MVC frameworks. Check it out.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;from-pages-to-patterns-an-exercise-for-everyone&#34;&gt;From Pages to Patterns: An Exercise for Everyone &lt;a href=&#34;#from-pages-to-patterns-an-exercise-for-everyone&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://alistapart.com/article/from-pages-to-patterns-an-exercise-for-everyone&#34;&gt;http://alistapart.com/article/from-pages-to-patterns-an-exercise-for-everyone&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Forgot about university level designing skills for a moment and move back to times of playground, when you enjoyed yourself with piece of paper, coloured pencils and scissors. Lego blocks, do you remember? Now combine this fun and basic principles learned ages ago with knowledge of industry and graphic editor skills and look at your designs from different perspective. Think about reusable patterns instead of thinking about entire pages. You first learned how to stick two lego blocks together, then you mastered it to build a castle, yeah?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;module-loaders&#34;&gt;Module loaders &lt;a href=&#34;#module-loaders&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://toolsday.io/episodes/module-loaders.html&#34;&gt;http://toolsday.io/episodes/module-loaders.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All about available options to manage your JavaScript environment. By the way, it is a new podcast defiantly worth to follow. I&amp;rsquo;m big fan of Una&amp;rsquo;s singing:)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-state-of-front-end-dev&#34;&gt;The State of Front-End Dev &lt;a href=&#34;#the-state-of-front-end-dev&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://alistapart.com/event/front-end-dev&#34;&gt;http://alistapart.com/event/front-end-dev&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nice, 62 minutes debate about state of front end development in 2015. Cleaver dudes and full of good sense of humour. Interesting watch, but you can take it as a podcast in the background.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;windows-insider-preview-build-10586&#34;&gt;Windows Insider Preview Build 10586 &lt;a href=&#34;#windows-insider-preview-build-10586&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.windows.com/en-us/microsoft-edge/platform/changelog/desktop/10586/?compareWith=10240&#34;&gt;https://dev.windows.com/en-us/microsoft-edge/platform/changelog/desktop/10586/?compareWith=10240&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And finally we have a Microsoft Edge with support of &lt;!-- raw HTML omitted --&gt; element and external content for SVG. Finally we can use &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; in Microsoft’s browser!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tips-for-creating-and-exporting-better-svgs-for-the-web&#34;&gt;Tips for Creating and Exporting Better SVGs for the Web &lt;a href=&#34;#tips-for-creating-and-exporting-better-svgs-for-the-web&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://sarasoueidan.com/blog/svg-tips-for-designers/&#34;&gt;http://sarasoueidan.com/blog/svg-tips-for-designers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t think of better author of article about SVG than Sara. Collection of tips about well optimised SVG output. So many times I saw SVG with millions paths inside simple logo or even bitmap inside SVG (and only bitmap). Must read for everyone who works with scalable vector graphics.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-our-css-framework-helps-enforce-accessibility&#34;&gt;How Our CSS Framework Helps Enforce Accessibility &lt;a href=&#34;#how-our-css-framework-helps-enforce-accessibility&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ebaytechblog.com/2015/11/04/how-our-css-framework-helps-enforce-accessibility/&#34;&gt;http://www.ebaytechblog.com/2015/11/04/how-our-css-framework-helps-enforce-accessibility/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Collection of practical use cases of enforcing correctly applied accessible markup on some eBay components. Accessibility is a big thing and we (developers) should pay more attention to it. This article can be a good starting point.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;rachel-andrew---embracing-new-css-when-your-users-are-stuck-in-the-past&#34;&gt;Rachel Andrew - Embracing New CSS When Your Users Are Stuck in the Past &lt;a href=&#34;#rachel-andrew---embracing-new-css-when-your-users-are-stuck-in-the-past&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/145242227&#34;&gt;https://vimeo.com/145242227&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rachel Andrew in this 30min talk walk us through all future techniques of layout in CSS. She show many practical examples of using Flexbox and Layout Gird module. Her complex knowledge about this subject is very impressive. Recently &lt;a href=&#34;https://pawelgrzybek.com/lets-get-into-the-basics-of-css-grid-layout-model/&#34;&gt;I played around a little bit with CSS Grid Layout&lt;/a&gt; and I’m really looking forward to have a wider browser support for this module.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;you-should-use-insert-libraryframework-its-the-bestestest--paul-lewis&#34;&gt;You should use [insert library/framework], it&amp;rsquo;s the bestestest! / Paul Lewis &lt;a href=&#34;#you-should-use-insert-libraryframework-its-the-bestestest--paul-lewis&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/_yCz1TA0EL4&#34;&gt;https://youtu.be/_yCz1TA0EL4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul Lewis gave amazing talk about frameworks vs vanilla JavaScript. If you are into JS, if you use any or these cool modern MVC frameworks, this is a talk for you. TLTR / TLTW: As always, it depends. This talk triggered a discussion in the community. Have a look at good responses by &lt;a href=&#34;http://tomdale.net/2015/11/javascript-frameworks-and-mobile-performance/&#34;&gt;Tom Dale&lt;/a&gt;, &lt;a href=&#34;http://www.zachleat.com/web/javascript-frameworks/&#34;&gt;Zach Learherman&lt;/a&gt;, &lt;a href=&#34;http://soledadpenades.com/2015/11/17/some-additional-thoughts-on-the-recent-discussion-about-frameworks-vs-vanilla-js-on-mobile/&#34;&gt;Soledad Penadés from Mozilla&lt;/a&gt; and &lt;a href=&#34;http://daverupert.com/2015/11/framework-cost/&#34;&gt;Dave Rupert&lt;/a&gt; as well. &lt;a href=&#34;https://css-tricks.com/the-cost-of-frameworks-recap/&#34;&gt;Chris Coyier&lt;/a&gt; from CSS Tricks summed it up as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wes-bos---modern-workflow--tooling-for-front-end-developers&#34;&gt;Wes Bos - Modern Workflow + Tooling for Front-end Developers &lt;a href=&#34;#wes-bos---modern-workflow--tooling-for-front-end-developers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/145138873&#34;&gt;https://vimeo.com/145138873&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A lot about modern tooling for a 45min presentation! A lot! If you feel a little bit lost in nowadays fronted tooling, watch it. This presentation will give you a summary of all this tools that people use on the market now. I’m huge fan of most of these tools presented by Wes.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dom-tips-and-techniques-parent-child-and-siblings&#34;&gt;DOM Tips and Techniques: Parent, Child, and Siblings &lt;a href=&#34;#dom-tips-and-techniques-parent-child-and-siblings&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sitepoint.com/dom-tips-techniques-parent-child-siblings/&#34;&gt;http://www.sitepoint.com/dom-tips-techniques-parent-child-siblings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very useful collection of tips about DOM manipulations. Sometimes we don’t need jQuery to append a class or move two divs around, really :)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;with-silver-your-design-is-your-prototype&#34;&gt;With Silver, your design is your prototype &lt;a href=&#34;#with-silver-your-design-is-your-prototype&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://silverflows.com/&#34;&gt;http://silverflows.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When Adobe announced their new &lt;a href=&#34;http://landing.adobe.com/en/na/products/creative-cloud/comet/229818-notifyme.html&#34;&gt;project Comet&lt;/a&gt; something that I liked the most was ability of building a live prototypes. It is something that doesn’t exist in Sketch. SilverFlow fills this missing feature. It is looking fantastic! Check detailed guide on &lt;a href=&#34;https://medium.com/swlh/introducing-silver-lightweight-mobile-prototyping-in-sketch-3-cee46d267f1f#.14p8syp5i&#34;&gt;Medium&lt;/a&gt; as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;foundation-6-is-here&#34;&gt;Foundation 6 Is Here! &lt;a href=&#34;#foundation-6-is-here&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://zurb.com/article/1416/foundation-6-is-here&#34;&gt;http://zurb.com/article/1416/foundation-6-is-here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After Bootstrap 4, it’s time for Foundation 6. The list of improvements is long. I’m really excited about it. I don’t use it personally, but I browse the codebase carefully and apply best bits to my projects.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-importance-of-learning-javascript-with-kyle-simpson&#34;&gt;The Importance of Learning JavaScript with Kyle Simpson &lt;a href=&#34;#the-importance-of-learning-javascript-with-kyle-simpson&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/hWmNDlLrCI0&#34;&gt;https://youtu.be/hWmNDlLrCI0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Conference talk with Kyle Simpson, author of the best (in my opinion) books for beginners in JavaScript world. Tons of good advices for programmers in any level from Kyle.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;zoe-m-gillenwater-enhancing-responsiveness-with-flexbox&#34;&gt;Zoe M. Gillenwater: Enhancing Responsiveness With Flexbox &lt;a href=&#34;#zoe-m-gillenwater-enhancing-responsiveness-with-flexbox&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/_98SE8WUvLk&#34;&gt;https://youtu.be/_98SE8WUvLk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flex box is the future. Browsers support is really good now and we are ready to use it now! Fantastic talk, show how we can implement progressive enhancements into out CSS modules.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;jake-archibald---modern-progressive-enhancement&#34;&gt;Jake Archibald - Modern Progressive Enhancement &lt;a href=&#34;#jake-archibald---modern-progressive-enhancement&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/145138876&#34;&gt;https://vimeo.com/145138876&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jake about performance. Two good case studies, clearly presented results and huge list of possible solutions ready to implement on our projects. Very good talk!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;anna-debenham---front-end-style-guides&#34;&gt;Anna Debenham - Front-end Style Guides &lt;a href=&#34;#anna-debenham---front-end-style-guides&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/145138874&#34;&gt;https://vimeo.com/145138874&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazing talk about importance of building consistency in the big scale project by creating and maintaining style guide. I think it is very important even on smaller projects. On this 35min talk Anna mentioned so many fantastic examples that can work as an inspiration to start building own one.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;animated-svg-vs-gif-cagematch&#34;&gt;Animated SVG vs GIF [CAGEMATCH] &lt;a href=&#34;#animated-svg-vs-gif-cagematch&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://sarasoueidan.com/blog/svg-vs-gif/&#34;&gt;http://sarasoueidan.com/blog/svg-vs-gif/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next superb article by Sara this month. This time about using SVG format as a replacement of easy GIF animations. Long read as always, but tons of info comes with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My favourite front-end related podcasts</title>
      <link>https://pawelgrzybek.com/my-favourite-front-end-related-podcasts/</link>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/my-favourite-front-end-related-podcasts/</guid>
      <description>&lt;p&gt;I found it very difficult to keep a balance between coding and following up all the new technologies, trends, libraries, frameworks and tools that keep appearing. The day just isn’t long enough! It is all too easy to fall into a &lt;a href=&#34;https://developertea.com/episodes/17907&#34;&gt;“State of Constant Alert”&lt;/a&gt; by trying to follow all of this stuff. &lt;a href=&#34;https://twitter.com/tkadlec&#34;&gt;Tim Kadlec&lt;/a&gt; summed it up in one of his recently published articles &lt;a href=&#34;https://timkadlec.com/2015/09/the-fallacy-of-keeping-up/&#34;&gt;“The Fallacy of Keeping Up”&lt;/a&gt;. Fortunately our community is full of amazing people who are recording a great podcasts.&lt;/p&gt;
&lt;p&gt;My experience with podcasts isn’t very extensive but the only advice that I can give you is to use an app to follow all the upcoming episodes of your favourite podcasts. I used iTunes on my Mac and the Podcast app on iPhone for many months and that was a terrible choice. Apple just neglected these apps so much. Recently I discovered the free &lt;a href=&#34;https://overcast.fm&#34;&gt;Overcast&lt;/a&gt; which has a beautiful mobile app. Just create an account to sync your episodes between devices (you don’t have to worry about spam, it is really for sync purposes), and enjoy your super podcasting setup. If you have any recommendations about apps that you use, please let me know in the comments section below. If you would like to share with me a list of your favourite podcasts — please don’t be shy! Now let me share with you few of my favourite ones.&lt;/p&gt;
&lt;h2 id=&#34;5-minutes-of-javascript&#34;&gt;5 Minutes of JavaScript &lt;a href=&#34;#5-minutes-of-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fivejs.codeschool.com/&#34;&gt;https://fivejs.codeschool.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://fivejs.codeschool.com/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-1.jpg&#34;
  alt=&#34;5 Minutes of JavaScript&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sponsored by &lt;a href=&#34;https://www.codeschool.com/&#34;&gt;CodeSchool&lt;/a&gt;, released every Thursday, quick and snappy podcast about recent news from the JavaScript world.&lt;/p&gt;
&lt;h2 id=&#34;developer-tea&#34;&gt;Developer Tea &lt;a href=&#34;#developer-tea&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developertea.com/&#34;&gt;https://developertea.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developertea.com/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-2.jpg&#34;
  alt=&#34;Developer Tea&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is one of the most popular podcasts in our industry. &lt;a href=&#34;https://twitter.com/JCutrell&#34;&gt;Jonathan Cutrell&lt;/a&gt; is doing an amazing job by serving us 10(ish) minutes of podcasts several times a week. The spectrum of topics is very wide, from general lifestyle advice to detailed interviews with the most influential people from the web community.&lt;/p&gt;
&lt;h2 id=&#34;front-end-five&#34;&gt;Front-end Five &lt;a href=&#34;#front-end-five&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://frontendfive.codeschool.com/&#34;&gt;https://frontendfive.codeschool.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://frontendfive.codeschool.com/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-3.jpg&#34;
  alt=&#34;Front-end Five&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another podcast sponsored by &lt;a href=&#34;https://www.codeschool.com/&#34;&gt;CodeSchool&lt;/a&gt; that takes a very similar form to “5 Minutes of JavaScript”. This one is more general and is not only about JavaScript. New episode of this podcast will appear in your app every Tuesday.&lt;/p&gt;
&lt;h2 id=&#34;full-stack-radio&#34;&gt;Full Stack Radio &lt;a href=&#34;#full-stack-radio&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.fullstackradio.com/&#34;&gt;http://www.fullstackradio.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.fullstackradio.com/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-4.jpg&#34;
  alt=&#34;Full Stack Radio&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/adamwathan&#34;&gt;Adam Wathan&lt;/a&gt; is doing a superb job by running this podcast. Every episode is about half an hour in length and he interviews some super clever dudes. I’m certain that you will find it very inspiring.&lt;/p&gt;
&lt;h2 id=&#34;http-203&#34;&gt;HTTP 203 &lt;a href=&#34;#http-203&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/shows/http203/&#34;&gt;https://developers.google.com/web/shows/http203/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/shows/http203/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-5.jpg&#34;
  alt=&#34;HTTP 203&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two Googlers, &lt;a href=&#34;https://twitter.com/aerotwist&#34;&gt;Paul Lewis&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/jaffathecake&#34;&gt;Jake Archibald&lt;/a&gt; are so funny. These are quick-sure episodes with lots of humour and tons of good opinions shared by two really good developers.&lt;/p&gt;
&lt;h2 id=&#34;the-path-to-performance&#34;&gt;The Path to Performance &lt;a href=&#34;#the-path-to-performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://pathtoperf.com/&#34;&gt;http://pathtoperf.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pathtoperf.com/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-6.jpg&#34;
  alt=&#34;The Path to Performance&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a 100% performance-focused podcast by &lt;a href=&#34;https://twitter.com/katiekovalcin&#34;&gt;Katie Kovalcin&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/tkadlec&#34;&gt;Tim Kadlec&lt;/a&gt;. The episodes are quite lengthy and usually contain interviews with some website speed-freaks! This is definitely one of my favourite podcasts.&lt;/p&gt;
&lt;h2 id=&#34;draft-wordpress-podcast&#34;&gt;Draft WordPress Podcast &lt;a href=&#34;#draft-wordpress-podcast&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://poststatus.com/category/draft/&#34;&gt;https://poststatus.com/category/draft/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://poststatus.com/category/draft/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-7.jpg&#34;
  alt=&#34;Draft WordPress Podcast&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wordpress podcasts recorded by guys from &lt;a href=&#34;https://poststatus.com/&#34;&gt;Post Status&lt;/a&gt;. Lots of good tips from WP developers and good interviews with theme and plugin creators. This one isn’t quick though.&lt;/p&gt;
&lt;h2 id=&#34;shop-talk-show&#34;&gt;Shop Talk Show &lt;a href=&#34;#shop-talk-show&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://shoptalkshow.com/&#34;&gt;http://shoptalkshow.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://shoptalkshow.com/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-8.jpg&#34;
  alt=&#34;Shop Talk Show&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My number one podcast! Full of great humour, and practical knowledge by the great &lt;a href=&#34;https://twitter.com/chriscoyier&#34;&gt;Chris Coyier&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/davatron5000&#34;&gt;Dave Rupert&lt;/a&gt;. Interviews are the main focus of the episodes, but recently we had a chance to listen to live portions recorded at conferences or group debates about a controversial subject. You won’t be bored with this one!&lt;/p&gt;
&lt;h2 id=&#34;toolsday&#34;&gt;Toolsday &lt;a href=&#34;#toolsday&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://toolsday.io/&#34;&gt;http://toolsday.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://toolsday.io/&#34;&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-11-24-9.jpg&#34;
  alt=&#34;Toolsday&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;768&#34;
/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a new podcast on my list but I can recommend it enough. Hosted by the super positive &lt;a href=&#34;https://twitter.com/una&#34;&gt;Una Kravets&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/chrisdhanaraj&#34;&gt;Chris Dhanaraj&lt;/a&gt;. It contains about 20 minutes of chat about things like task runners, learning resources, module loaders and much much more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 October</title>
      <link>https://pawelgrzybek.com/top-picks-2015-october/</link>
      <pubDate>Sat, 31 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-october/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;the-fallacy-of-keeping-up&#34;&gt;The Fallacy of Keeping Up &lt;a href=&#34;#the-fallacy-of-keeping-up&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://timkadlec.com/2015/09/the-fallacy-of-keeping-up/&#34;&gt;http://timkadlec.com/2015/09/the-fallacy-of-keeping-up/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to keep up all the new stuff in web industry? Actually this article is how to don’t keep up, and be a good and happy developer. &lt;a href=&#34;https://twitter.com/tkadlec&#34;&gt;Tim Kadlec&lt;/a&gt;, as always, well written advice.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introducing-rail-a-user-centric-model-for-performance&#34;&gt;Introducing RAIL: A User-Centric Model For Performance &lt;a href=&#34;#introducing-rail-a-user-centric-model-for-performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2015/10/rail-user-centric-model-performance/&#34;&gt;http://www.smashingmagazine.com/2015/10/rail-user-centric-model-performance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Must read for everyone who cares about performance. Very good article by &lt;a href=&#34;https://twitter.com/paul_irish&#34;&gt;Paul Irish&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/aerotwist&#34;&gt;Paul Lewis&lt;/a&gt;. I can’t think of the authors who can explain that concept better than these two Googlers.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;codepenio--redesigned&#34;&gt;Codepen.io — Redesigned! &lt;a href=&#34;#codepenio--redesigned&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.codepen.io/2015/10/01/redesigned/&#34;&gt;http://blog.codepen.io/2015/10/01/redesigned/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well described every change on the biggest redesign of CodePen ever. I love that website and I use it everyday. New redesign works brilliant for me. I experienced some small issues with adding pens to collections, but I saw the issue mentioned on Github and I’m sure that it&amp;rsquo;s going to be fixed very soon.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;meet-project-comet&#34;&gt;Meet Project Comet &lt;a href=&#34;#meet-project-comet&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/PD5cCBhkgTg&#34;&gt;https://youtu.be/PD5cCBhkgTg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Adobe finally realised that Sketch is much better UI design tool, so they created their own ‘Sketch’ under the name Comet. Looks very interesting. I’m looking forward to see future improvements of these two apps! Finally, it’s getting interesting. As long as this application is going to be part of Creative Cloud, I don&amp;rsquo;t think that it&amp;rsquo;s going to be as popular as Sketch is. Community behind Sketch is massive and that may be difficult for Adobe to catch up competitor.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;flif&#34;&gt;FLIF &lt;a href=&#34;#flif&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://flif.info/&#34;&gt;http://flif.info/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FLIF is a new image format and performs much better then rest of them. The problem with news like that is as always browser support (no support at all). Will see, looks interesting tho.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reasons-to-upgrade-to-internet-explorer-11&#34;&gt;Reasons to upgrade to Internet Explorer 11 &lt;a href=&#34;#reasons-to-upgrade-to-internet-explorer-11&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://technet.microsoft.com/en-us/ie/mt163707.aspx&#34;&gt;https://technet.microsoft.com/en-us/ie/mt163707.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That is a good news for us — developers. Microsoft is dropping a support for IE9 and IE10 on January 12, 2016. That will definitely affect global browser usage stats and may make our life easier.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;scott-jehl--delivering-responsibly&#34;&gt;Scott Jehl – Delivering Responsibly &lt;a href=&#34;#scott-jehl--delivering-responsibly&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/134291719&#34;&gt;https://vimeo.com/134291719&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazing talk by Scott &lt;a href=&#34;https://twitter.com/scottjehl&#34;&gt;Jehl from&lt;/a&gt; from Filament Group. He presented all major techniques to develop performant web projects. All the methods are up to date. It is good reminder for everyone who cares about speed. Have a look at the transcript and slides on Jehl’s &lt;a href=&#34;https://www.filamentgroup.com/lab/delivering-responsibly.html&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-for-software-engineers-for-css-developers&#34;&gt;CSS For Software Engineers For CSS Developers &lt;a href=&#34;#css-for-software-engineers-for-css-developers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/140641366&#34;&gt;https://vimeo.com/140641366&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really amazing talk by &lt;a href=&#34;https://twitter.com/csswizardry&#34;&gt;Harry&lt;/a&gt; again! So in depth about golden principles of sane CSS. He put together all these rules in one talk. It is must watch for all frontenders! I’m looking forward to &lt;a href=&#34;http://beyondconf.co/&#34;&gt;Beyond Conf 2015&lt;/a&gt; in London next month where Harry is going to present this talk one more time.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;foolish-solution-for-bloat&#34;&gt;Foolish solution for bloat &lt;a href=&#34;#foolish-solution-for-bloat&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://idlewords.com/amp_static.html&#34;&gt;http://idlewords.com/amp_static.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All about AMP project by Maciej Cegłowski.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;secrets-behind-the-success-of-monument-valley&#34;&gt;Secrets behind the success of Monument Valley &lt;a href=&#34;#secrets-behind-the-success-of-monument-valley&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.invisionapp.com/secrets-behind-the-success-of-monument-valley/&#34;&gt;http://blog.invisionapp.com/secrets-behind-the-success-of-monument-valley/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About success of the best game that I have ever had on my iPhone. Very interesting read followed by video presentation by Ken Wong, lead designer of UsTwo from London. If you have never played ‘Monument Valley’ just buy it! Play it!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;es6-overview-in-350-bullet-points&#34;&gt;ES6 Overview in 350 Bullet Points &lt;a href=&#34;#es6-overview-in-350-bullet-points&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ponyfoo.com/articles/es6&#34;&gt;https://ponyfoo.com/articles/es6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The best summary of all new things in ES6 ever. 350 bullet points to read to check all new features of EcmaScript 2015.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;libsass-330&#34;&gt;Libsass 3.3.0 &lt;a href=&#34;#libsass-330&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sass/libsass/releases/tag/3.3.0&#34;&gt;https://github.com/sass/libsass/releases/tag/3.3.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally it happened. C based port of original ruby based Sass caught up the official version and covers 100% of features. Now you don’t heave a reason to use Ruby version instead of Libsass. It works up to 4 times faster and it’s dead easy to integrate with any environment. Good news!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vuejs-100-released&#34;&gt;Vue.js 1.0.0 Released &lt;a href=&#34;#vuejs-100-released&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://vuejs.org/2015/10/26/1.0.0-release/&#34;&gt;http://vuejs.org/2015/10/26/1.0.0-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of the most popular MVC frameworks is finally released in version 1.0. If you are looking for quick and easy framework to build an app, this one is first one to pick! I’m not a big fun of Angular because documentation isn’t very good for me (it is new one so time to give is a second chance). React is amazing but it requires some learning curve.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;jekyll-30-released&#34;&gt;Jekyll 3.0 Released &lt;a href=&#34;#jekyll-30-released&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jekyllrb.com/news/2015/10/26/jekyll-3-0-released/&#34;&gt;https://jekyllrb.com/news/2015/10/26/jekyll-3-0-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s been a month of updates. This one is one the most important for me. As a big fun of Jekyll I’m looking forward to play around with new things in new Jekyll 3.0. Profiler is the most important new feature. Check it up! If you would like to see a video from official presentation of latest version of Jekyll, you can find it &lt;a href=&#34;https://youtu.be/sPZK8w55cBQ&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BEM with Emmet</title>
      <link>https://pawelgrzybek.com/bem-with-emmet/</link>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/bem-with-emmet/</guid>
      <description>&lt;p&gt;You’ll notice a Russian theme to today’s post. &lt;a href=&#34;http://emmet.io/&#34;&gt;Emmet&lt;/a&gt;, created by &lt;a href=&#34;https://twitter.com/chikuyonok&#34;&gt;Sergey Chikuyonok&lt;/a&gt; from Moscow, is a fantastic extension available for the majority of today’s popular code editors. &lt;a href=&#34;https://en.bem.info/&#34;&gt;BEM&lt;/a&gt; (Block, Element, Modifier) is a very widely used methodology that helps me to keep my projects sane and well organised. It is created by some very clever guys from Russia’s largest search engine — &lt;a href=&#34;https://www.yandex.com/&#34;&gt;Yandex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;BEM requires a lot of typing, but Emmet helps you to create a markup with less typing. You probably can guess where I’m going with this. If not, have a look at &lt;a href=&#34;https://twitter.com/wesbos/status/648907410929664000&#34;&gt;Wes’s tweet&lt;/a&gt; that inspired me to dive into the subject.&lt;/p&gt;
&lt;h2 id=&#34;emmet-filters&#34;&gt;Emmet filters &lt;a href=&#34;#emmet-filters&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Emmet is of the best things ever made for developers. It allows you to expand small abbreviations to serious chunks of code. Have a look at this easy example:&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-17-1.gif&#34;
  alt=&#34;Emmet&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;400&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Cool, yeah? I hope that you’re already using it, but if not go &lt;a href=&#34;http://emmet.io/download/&#34;&gt;here&lt;/a&gt; and download the extension to your editor of choice. But that’s not everything that it comes with. One of the features are filters:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Filters are special post-processors that modify expanded abbreviation right before output to the editor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using filters is as easy as passing pipe (&lt;code&gt;|&lt;/code&gt;) followed by shortcut of a filter after abbreviation. Let’s make our output single-lined by passing the &lt;code&gt;|s&lt;/code&gt; filter.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-17-2.gif&#34;
  alt=&#34;Emmet filters&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;400&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;bem-block-element-modifier&#34;&gt;BEM (Block, Element, Modifier) &lt;a href=&#34;#bem-block-element-modifier&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article is not about how amazing or ugly this methodology is. It works for me on the majority of my projects and it helps me a lot to keep my project well organised. If you would like to learn more about it, I highly recommend you read &lt;a href=&#34;https://en.bem.info/&#34;&gt;official documentation&lt;/a&gt; or &lt;a href=&#34;http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/&#34;&gt;Harry’s article&lt;/a&gt;. Developer’s preference are different and some prefer to separate blocks and elements by a single underscore, some prefer double underscores. It’s the same with the modifier classes, some prefer a single hyphen, some prefer double hyphens. I prefer to follow the official notation with double separators. Let’s stick to the &lt;code&gt;article&lt;/code&gt; example and have a look at how to BEMify this markup:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;post__title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;post__date&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;post__content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-bem-filter-with-emmet&#34;&gt;Using BEM filter with Emmet &lt;a href=&#34;#using-bem-filter-with-emmet&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You know about filters, you know about BEM. Let’s have a look at how to apply the &lt;code&gt;|bem&lt;/code&gt; filter in practice:&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-17-3.gif&#34;
  alt=&#34;Emmet bem filter&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;400&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Love it! Massive time saver! If you use Sublime Text you may need to apply your own settings to customise the output for your needs. Just go to &lt;code&gt;Preferences -&amp;gt; Package settings -&amp;gt; Emmet -&amp;gt; Settings - User&lt;/code&gt;. My configuration file looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;syntaxProfiles&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;html&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;html, bem&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;preferences&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;bem.elementSeparator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;bem.modifierSeparator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;bem.shortElementPrefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see I applied the &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;bem&lt;/code&gt; filter as the default one for all &lt;code&gt;.html&lt;/code&gt; files. It allows even more simplification of the process by omitting the filter in the abbreviation. Hopefully this article helped you to speed up your BEM workflow. Please share your thoughts, favourite Emmet features or methodologies that you use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lets get into the basics of CSS Grid Layout Model</title>
      <link>https://pawelgrzybek.com/lets-get-into-the-basics-of-css-grid-layout-model/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/lets-get-into-the-basics-of-css-grid-layout-model/</guid>
      <description>&lt;p&gt;CSS is getting stronger and gives us much more power than a few years ago. It is difficult to miss the huge buzz about Flexbox recently. This powerful part of CSS is well supported in all modern browsers and you don&amp;rsquo;t have an excuse for not using it yet. I found it very helpful in some circumstances, but it&amp;rsquo;s definitely not the ideal candidate for building entire layouts. We tend to build them using floating or inline blocking elements, but it’s definitely not reason why these features were created. For me this is a broken idea, exactly the same like using fonts for icons. CSS never had a built in feature just for building layouts so we don’t have a much choice and we need to use these hacks. The good news is that CSS Grid Layout Model is just around the corner and I&amp;rsquo;m really looking forward to using it. Let&amp;rsquo;s dive into it together and rebuild some standard looking layout using some basic features of brand new model.&lt;/p&gt;
&lt;p&gt;At the point of writing this article &lt;a href=&#34;https://caniuse.com/#feat=css-grid&#34;&gt;browser support for CSS Grid Layout Model&lt;/a&gt; is minimal. The only browsers that supports it are Edge and latest Internet Explorer. Luckily we have full implementation of that feature in Google Chrome, not as a default setting though. The only thing that we need to do is to switch the &amp;lsquo;Enable experimental Web Platform&amp;rsquo; flag and restart the browser.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-1.gif&#34;
  alt=&#34;Enable experimental Web Platform Flag&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;400&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;standard-blog-layout-revisited&#34;&gt;Standard blog layout revisited &lt;a href=&#34;#standard-blog-layout-revisited&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few years ago it was close to impossible to visit a blog without header on top, content section and narrow sidebar under neath followed by a footer. Despite many &lt;a href=&#34;http://shoptalkshow.com/episodes/185-this-idea-must-die/&#34;&gt;discussions about the existence of the sidebar&lt;/a&gt;, this is still a very popular blog layout and it&amp;rsquo;s going to work well as an example.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-2.jpg&#34;
  alt=&#34;Standard blog layout&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;gridy-terminology&#34;&gt;Gridy terminology &lt;a href=&#34;#gridy-terminology&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we go any further it&amp;rsquo;s necessary to mention a little bit of related terminology. Easy, just few new words, hopefully your brain won&amp;rsquo;t explode. Knowledge of these few terms will make your further grid exploration much easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grid container&lt;/li&gt;
&lt;li&gt;Grid lines&lt;/li&gt;
&lt;li&gt;Grid track&lt;/li&gt;
&lt;li&gt;Grid cell&lt;/li&gt;
&lt;li&gt;Grid area&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;grid-container&#34;&gt;Grid container &lt;a href=&#34;#grid-container&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/2015/WD-css-grid-1-20150917/#grid-model&#34;&gt;Grid container&lt;/a&gt; establishes a new grid formatting context for its contents. Essentially, it is our parent selector which is forming the boundaries of inner grid items.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-3.jpg&#34;
  alt=&#34;CSS Grid container&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;grid-lines&#34;&gt;Grid lines &lt;a href=&#34;#grid-lines&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/2015/WD-css-grid-1-20150917/#grid-line-concept&#34;&gt;Grid lines&lt;/a&gt; are the horizontal and vertical dividers. We are going to use them to describe grid tracks, grid cells and grid areas. They have a numerical index, or optionally we can give them a specific name.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-4.jpg&#34;
  alt=&#34;CSS Grid lines&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;grid-track&#34;&gt;Grid track &lt;a href=&#34;#grid-track&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/2015/WD-css-grid-1-20150917/#grid-track-concept&#34;&gt;Grid track&lt;/a&gt; is a vertical or horizontal space between two lines.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-5.jpg&#34;
  alt=&#34;CSS Grid track&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;grid-cell&#34;&gt;Grid cell &lt;a href=&#34;#grid-cell&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/2015/WD-css-grid-1-20150917/#grid-track-concept&#34;&gt;Grid cell&lt;/a&gt; is the item between two adjacent horizontal and two adjacent vertical grid lines. It is the smallest unit that we can put content into.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-6.jpg&#34;
  alt=&#34;CSS Grid cell&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;grid-area&#34;&gt;Grid area &lt;a href=&#34;#grid-area&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/2015/WD-css-grid-1-20150917/#grid-area-concept&#34;&gt;Grid area&lt;/a&gt; is very similar to grid cell, it&amp;rsquo;s bounded by any two horizontal and two vertical grid lines (not necessarily adjacent). Theoretically speaking, grid cell is the smallest form of grid area.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-7.jpg&#34;
  alt=&#34;CSS Grid area&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;its-all-about-grid-areas-between-grid-lines&#34;&gt;It&amp;rsquo;s all about grid areas between grid lines &lt;a href=&#34;#its-all-about-grid-areas-between-grid-lines&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Enough of boring theory now, lets get our hands dirty with some code. This is the markup of our super complex example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;header&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Header&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Content&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sidebar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Sidebar&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;footer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally the exciting part. To enable grid layout we need to apply &lt;code&gt;grid&lt;/code&gt; value for &lt;code&gt;display&lt;/code&gt; property. For additional settings I’m going to use absolute values (pixels) just for simplicity of my example, but in real life scenario it’s probably a better idea to use some relative values (percentage, ems, rems, vw or vh). New properties &lt;code&gt;grid-template-columns&lt;/code&gt; and &lt;code&gt;grid-template-rows&lt;/code&gt; will split grid container for few grid tracks. You can easily use &lt;code&gt;auto&lt;/code&gt; instead of fixed values for these properties. Look at the code and compare applied values with the picture below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;blog&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;210&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-8.jpg&#34;
  alt=&#34;CSS grid template columns and rows&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Time to define how our grid looks. Examine carefully the code below. Hopefully the image below the snippet of code will make your life easier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row-start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column-start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row-start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column-start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;sidebar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row-start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column-start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;footer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row-start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column-start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-10-04-9.jpg&#34;
  alt=&#34;CSS grids lines&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1100&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Hopefully that makes sense. To simplify our code, can can use a handy short notation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;sidebar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;footer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How about even shorter? &lt;code&gt;grid-area&lt;/code&gt; follows this order: &lt;code&gt;grid-row-start&lt;/code&gt;, &lt;code&gt;grid-column-start&lt;/code&gt;, &lt;code&gt;grid-row-end&lt;/code&gt;, &lt;code&gt;grid-column-end&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;sidebar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;footer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally the result looks like this. Feel free to fork the &lt;a href=&#34;https://codepen.io/pawelgrzybek/pen/EVWKBd&#34;&gt;CodePen&lt;/a&gt; example and play around with it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;wrapper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;210&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;sidebar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;footer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;Whats next? &lt;a href=&#34;#whats-next&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully this very easy example gives you an idea of how upcoming CSS Grid Layout Model works. It’s good fun to play around with things that will become a daily routine in few years time. I highly recommend you to dive deeper into the &lt;a href=&#34;http://www.w3.org/TR/2015/WD-css-grid-1-20150917/&#34;&gt;specifications&lt;/a&gt; because it comes with much more super useful features that has been presented in this article. If you are more visual learner check amazing talk from CSSconf EU 2014, &lt;a href=&#34;https://youtu.be/GRexIOtGhBU&#34;&gt;CSS Grid Layout by Rachel Andrew&lt;/a&gt;. Let me know what you think about it. I&amp;rsquo;m keen to see your CSS grid experiment results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 September</title>
      <link>https://pawelgrzybek.com/top-picks-2015-september/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-september/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;hack-font&#34;&gt;Hack Font &lt;a href=&#34;#hack-font&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://sourcefoundry.org/hack/&#34;&gt;http://sourcefoundry.org/hack/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s new, free, mono-spaced font that works very well with code editors like Sublime Text or Atom. It’s looking so nice, but I’m going to be stick to my favourite ‘Source Code Pro’.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;responsive-images-101&#34;&gt;Responsive Images 101 &lt;a href=&#34;#responsive-images-101&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.cloudfour.com/responsive-images-101-definitions/&#34;&gt;http://blog.cloudfour.com/responsive-images-101-definitions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s 10 part introduction to responsive images. It covers everything that we need to know to correctly implement this feature. Thanks to Jason Grigsby!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-anatomy-of-responsive-images&#34;&gt;The anatomy of responsive images &lt;a href=&#34;#the-anatomy-of-responsive-images&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jakearchibald.com/2015/anatomy-of-responsive-images/&#34;&gt;https://jakearchibald.com/2015/anatomy-of-responsive-images/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another very good resource about responsive images. This article is condensed version of “Responsive Images 101” by Jason Grigsby. Well written and worth to bookmark as a reference!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;node-400&#34;&gt;Node 4.0.0 &lt;a href=&#34;#node-400&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v4.0.0/&#34;&gt;https://nodejs.org/en/blog/release/v4.0.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Who! Brand new version of Node with support for ES6 and tons of new features just has been released. Node Package Manager (npm) is updated as well and includes security fixes.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;poll-results-for-managing-styles-with-javascript&#34;&gt;Poll Results for Managing Styles with JavaScript &lt;a href=&#34;#poll-results-for-managing-styles-with-javascript&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/poll-results-for-managing-styles-with-javascript/&#34;&gt;https://css-tricks.com/poll-results-for-managing-styles-with-javascript/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The results about CSS-Tricks Pool “Managing Styles with JavaScript” are very interesting. Majority of people are not ready to style components with JavaScript instead of CSS. Rest of the open-minded people do not disagree with that idea. I wish to see that pool again in one or two years time!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-tools-designers-are-using-today&#34;&gt;The Tools Designers Are Using Today &lt;a href=&#34;#the-tools-designers-are-using-today&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://tools.subtraction.com/&#34;&gt;http://tools.subtraction.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I knew that will happen. Finally Sketch is getting over Photoshop. Finally market understands that Photoshop is for Photos, not UIs. Yeah!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;modernizr-3-a-new-release-and-website&#34;&gt;Modernizr 3: A new release and website &lt;a href=&#34;#modernizr-3-a-new-release-and-website&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://modernizr.com/news/modernizr-3-new-release-site&#34;&gt;https://modernizr.com/news/modernizr-3-new-release-site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After 2.5 years since Modernizer published last update, finally it happened! Third version of Modernizr is full of new detects. With new tool, new website came out as well. Big tool, big news!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;interview-with-eric-elliott&#34;&gt;Interview with Eric Elliott &lt;a href=&#34;#interview-with-eric-elliott&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developertea.com/episodes/17181&#34;&gt;https://developertea.com/episodes/17181&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interview with one of the most inspiring JavaScript developers — Eric Elliott. Author of &lt;a href=&#34;https://medium.com/javascript-scene&#34;&gt;JavaScript Scene&lt;/a&gt;. I recommend to add Developer Tea to your podcasts list. Definitely one of my favourite podcasts.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;you-dont-know-js-book-series-by-kyle-simpson&#34;&gt;You Don&amp;rsquo;t Know JS (book series) by Kyle Simpson &lt;a href=&#34;#you-dont-know-js-book-series-by-kyle-simpson&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34;&gt;https://github.com/getify/You-Dont-Know-JS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I can’t imagine this series of books is available to read online totally for free. It is the best resource for everybody who wants to learn JavaScript, no doubt. It’s one of the most starred projects on Github and it doesn’t surprise me at all. This series helped me a lot, hopefully you will find it useful too. Thanks Kyle!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;meet-operas-new-brand-identity&#34;&gt;Meet Opera’s new brand identity &lt;a href=&#34;#meet-operas-new-brand-identity&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blogs.opera.com/news/2015/09/opera-new-logo-and-brand-identity/&#34;&gt;http://blogs.opera.com/news/2015/09/opera-new-logo-and-brand-identity/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge identity changes recently. After Google’s rebranding it’s time for really underappreciated Opera. I really like it, especially all the videos/animations associated with rebranding.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;postcss-deep-dive-what-you-need-to-know&#34;&gt;PostCSS Deep Dive: What You Need to Know &lt;a href=&#34;#postcss-deep-dive-what-you-need-to-know&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://webdesign.tutsplus.com/tutorials/postcss-deep-dive-what-you-need-to-know--cms-24535&#34;&gt;http://webdesign.tutsplus.com/tutorials/postcss-deep-dive-what-you-need-to-know&amp;ndash;cms-24535&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All that you need to know about PostCSS. Fantastic article for everybody who is into CSS/Sass and would like to try something fresh and funky! Loved it!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;net-awards-2015&#34;&gt;Net awards 2015 &lt;a href=&#34;#net-awards-2015&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://thenetawards.com/&#34;&gt;https://thenetawards.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Results of net magazine awards are officially announced. &lt;a href=&#34;http://sarasoueidan.com/&#34;&gt;Sara Soueidan&lt;/a&gt; definitely deserved for it! &lt;a href=&#34;http://bohemiancoding.com/sketch/&#34;&gt;Sketch App&lt;/a&gt;, keep going guys, I love Sketch! &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; as a Open Source project of the year and [Responsive Images] as a best new technology. Fantastic year in web!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;stylesheets&#34;&gt;Stylesheets &lt;a href=&#34;#stylesheets&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://stylesheets.co/&#34;&gt;https://stylesheets.co/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stylesheets is a community-generated collection of the best CSS resources. Really nice links there!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cursoriocom&#34;&gt;Cursorio.com &lt;a href=&#34;#cursoriocom&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cursorio.com/&#34;&gt;http://cursorio.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because simple ideas are the best ideas. Just visit this website and drag and drop your cursor to your design. So easy but very often very helpful!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The secret of “CSS Secrets” by Lea Verou</title>
      <link>https://pawelgrzybek.com/the-secret-of-css-secrets-by-lea-verou/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/the-secret-of-css-secrets-by-lea-verou/</guid>
      <description>&lt;p&gt;It was a day like any other. Morning coffee and a little bit or reading, got ready, work, home, playing with my lovely kitty, a bit of cycling and then quick Twitter check. That was the moment when this day stopped being ordinary. My Twitter’s feed changed colour to pink and white. No, they haven’t done any rebranding. That was a hue of a book — &lt;a href=&#34;http://shop.oreilly.com/product/0636920031123.do&#34;&gt;“CSS Secrets” by Lea Verou&lt;/a&gt;. This book was everywhere, literally every second post was about it. My initial thought was “Damn, another book about CSS. What else can be done in CSS? Hmmm?”. I tried to ignore those pinky photos, but hype about this book didn’t slow down. Eric loved it, Jeffrey loved it, Hugo loved it, everybody loved it. My second thought was “BUY!”. Yeah I bought it, and I exactly month after that (well done Amazon), I posted &lt;a href=&#34;https://twitter.com/pawelgrzybek/status/634399068157046784&#34;&gt;my own pinky picture&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-09-22-1.jpg&#34;
  alt=&#34;CSS Secrets by Lea Verou&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1050&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;This book is absolutely beautiful, well designed and most interestingly, created entirely in CSS! Gorgeous typography, tons of colourful images and cute kitties! Each of 47 secrets is well explained, easy to follow and understand. Sometimes very technical, sometimes reminds me a math class, but all way through it’s full of Lea’s sense of humour. This book will revive your passion to CSS, no doubt.&lt;/p&gt;
&lt;p&gt;If you like CSS, buy it. If you don’t like CSS, buy it anyway and you will like CSS. Buy it even if you don’t know what CSS is and give it to someone who knows — best gift ever guaranteed! I’m looking forward to next Lea’s book.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Native feature detection with CSS.supports() API</title>
      <link>https://pawelgrzybek.com/native-feature-detection-with-csssupports-api/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/native-feature-detection-with-csssupports-api/</guid>
      <description>&lt;p&gt;Feature detection is something that every front end developer faced at some point. There are a number of solutions to handle features incompatibility. It can be some CSS hack that overrides the previous rule, or JavaScript snippet that returns boolean value that dictates further steps. Possibly you came across more advanced solutions like &lt;a href=&#34;https://modernizr.com/&#34;&gt;Modernizr&lt;/a&gt;, which has been updated recently and brought us so many new checks.&lt;/p&gt;
&lt;p&gt;There is one more method, not that widely used yet. One of the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule&#34;&gt;CSS at-rules&lt;/a&gt; is &lt;code&gt;@supports&lt;/code&gt;. It gives us very intuitive way to check browser capabilities. It also comes with JavaScript &lt;code&gt;CSS.supports()&lt;/code&gt; API. Let&amp;rsquo;s have a look at some snippets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;nc&#34;&gt;.foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;#f00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;@supports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;conic-gradient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;#eee&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;#bbb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;conic-gradient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;#eee&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;#bbb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CSS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;supports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;background&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;conic-gradient(#eee, #bbb)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your browser supports conic-gradient&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;poor-support-for-support&#34;&gt;Poor support for @support &lt;a href=&#34;#poor-support-for-support&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know this heading sounds weird, but it&amp;rsquo;s cruel reality. This feature is too nice to be ready to use. &lt;a href=&#34;https://caniuse.com/#feat=css-supports-api&#34;&gt;Browser support&lt;/a&gt; isn&amp;rsquo;t good at all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet Explorer and Opera Mini - forgot about it&lt;/li&gt;
&lt;li&gt;Edge is OK&lt;/li&gt;
&lt;li&gt;Firefox &amp;gt;= 23&lt;/li&gt;
&lt;li&gt;Chrome &amp;gt;= 28&lt;/li&gt;
&lt;li&gt;Safari &amp;gt;= 9&lt;/li&gt;
&lt;li&gt;Opera &amp;gt;= 12.1&lt;/li&gt;
&lt;li&gt;iOS Safari &amp;gt;= 9&lt;/li&gt;
&lt;li&gt;Chrome for Android &amp;gt;= 44.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I live in hope that this feature will be implemented in all browsers soon. That would be nice to have a that elegant way to feature detection. For now better keep your CSS sane or use Modernizr.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use modern JavaScript today with Babel</title>
      <link>https://pawelgrzybek.com/use-modern-javascript-today-with-babel/</link>
      <pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/use-modern-javascript-today-with-babel/</guid>
      <description>&lt;p&gt;In June 2015 new &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html&#34;&gt;version of ECMAScript&lt;/a&gt; has been ratified and brought us many cool features. Last big update like that happened in 2009 when ES5 has been officially revealed. As always the biggest problem with new standards is browsers compatibility (incompatibility suits better here). This is the only reason that restrains developers from using latest standards. Fortunately we have a &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt; (formerly known as 6to5). It allows you to use new syntax by transpiling your ECMAScript 2015 into ES5 code, that works fine in current JavaScript environments. How cool is that? &lt;a href=&#34;https://babeljs.io/docs/setup/&#34;&gt;Setup&lt;/a&gt; is super easy and well documented. If you are not 100% convinced yet, you can play around with it &lt;a href=&#34;https://babeljs.io/repl/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Practice is a best teacher, so let me show you Babel in action. I&amp;rsquo;m going to use one of my favourite features in new ES2015 specification - default parameter values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// You do:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Babel does:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Be ahead browsers adoption and start your journey with ECMAScript 2015 today. &lt;a href=&#34;https://babeljs.io/users/&#34;&gt;Big companies&lt;/a&gt; that are dictating development path of web technologies are using Babel already. You should as well! New specification brings us so many new features that are worth using. I&amp;rsquo;m planing to publish an article about my favourite parts of ES2015, but now I&amp;rsquo;m too busy with experimenting with Babel. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bookmarking with Pinboard</title>
      <link>https://pawelgrzybek.com/bookmarking-with-pinboard/</link>
      <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/bookmarking-with-pinboard/</guid>
      <description>&lt;p&gt;The internet is full of things that you don’t want to forget, you would like to watch in the future, read later or buy after pay day. That’s what bookmarks are made for, yeah? Standard bookmarks in your browser are fine as long as you don’t have many of them. Things are getting more complicated when you have hundreds or sometimes thousands of URLs worth revisiting. Services like Pocket or do the job pretty well, but &lt;a href=&#34;https://pinboard.in/&#34;&gt;Pinboard&lt;/a&gt; gives you a real power.&lt;/p&gt;
&lt;p&gt;Pinboard is a bookmarking service created in 2009 by a polish developer Maciej Cegłowski. The difference between his project and mentioned before popular bookmarking services is huge. First — Pinboard is ugly compared to competitors. Second — you need to pay money for it (yearly cost is equal to two pints of good beer). You are probably thinking now “Why should I pay for an ugly bookmarking service?” but the answer is easy. It works!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-09-10-1.jpg&#34;
  alt=&#34;Pinboard - main view&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;925&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;i-tested-many-of-them&#34;&gt;I tested many of them… &lt;a href=&#34;#i-tested-many-of-them&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As everybody, I started from bookmarks in my browser. Then I moved all this mess to Pocket, Digg later on, then I tested Google Bookmarks, then Delicious and then I lost my hope to find something that simply works fine. Some time ago I finally found the hero of this post - &lt;a href=&#34;https://pinboard.in/&#34;&gt;Pinboard&lt;/a&gt;. Importing list items from competitors cannot be easier. After months of using it I feel that I will never move my stuff somewhere else. Why? Let me mention a few really strong reasons why should you try it.&lt;/p&gt;
&lt;h2 id=&#34;bookmarks-tags-and-tags-bundles&#34;&gt;Bookmarks, tags and tags bundles &lt;a href=&#34;#bookmarks-tags-and-tags-bundles&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Adding new URLs to your collection can’t be easier and quicker. Pinboard is lightning fast! You can use small JavaScript snippets or install a browser extension. Tags are very useful to keep your finds filterable. Consistent way of adding tags and describing your items makes so much sense, especially if you work with hundreds or thousands of links. Optional ‘tags bundle’ is an experimental feature that makes managing your collection much neater (I don’t know why this feature is experimental — works 100% fine for me). Well documented API gives independent developers ability to integrate service with their tools. I use on a daily basis few apps (mainly Mac OS X and iOS Reeder and iOS Pinswift) that are using this API, and it works brilliant. Smooth integration with maximum three Twitter accounts can be a nice selling point for some users.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-09-10-2.jpg&#34;
  alt=&#34;Pinboard integration in Reeder and Pinswift&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1178&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;bye-bye-instapaper-and-readability&#34;&gt;Bye bye Instapaper and Readability &lt;a href=&#34;#bye-bye-instapaper-and-readability&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Don’t get me wrong, these services are amazing and I still like them, I just don’t need them anymore. Pinboard comes with ‘read later’ option. It just works as a reminder of things that you would like to watch or read in the feature. Bookmark, read or watch, mark as a read, done — as easy as that!&lt;/p&gt;
&lt;h2 id=&#34;tab-sets&#34;&gt;Tab sets &lt;a href=&#34;#tab-sets&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next to standard bookmarks, ‘tab sets’ is definitely my favourite feature. Essentially you can save a collection or currently opened tabs in your browser, and recover the same tabs via one click later on. I know there is many extensions to do that, but why should I use them if this awesome feature comes with something that I already use? I found it really useful when I work on my Mac Mini and then I want carry on with my MacBook on the train.&lt;/p&gt;
&lt;h2 id=&#34;support&#34;&gt;Support &lt;a href=&#34;#support&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, you will never need to contact Maciej directly because the documentation is amazing and very detailed. If you really struggle with something you can ask on Twitter and I’m sure you will get your answer immediately.&lt;/p&gt;
&lt;h2 id=&#34;should-you-use-pinboard&#34;&gt;Should you use Pinboard? &lt;a href=&#34;#should-you-use-pinboard&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As always — it depends. If you constantly saving new stuff with hope to come back to it later you definitely should give it a try. I do not regret this tiny fee that I spent on &lt;a href=&#34;https://pinboard.in/&#34;&gt;Pinboard&lt;/a&gt;, and you won’t neither.&lt;/p&gt;
&lt;p&gt;Let me know about your experiences with bookmarking services. Maybe you built some app that is using Pinboard API — let me know, I’m keen to give it a try. Happy bookmarking :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 August</title>
      <link>https://pawelgrzybek.com/top-picks-2015-august/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-august/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;h2 id=&#34;the-hitchhikers-guide-to-modern-javascript-tooling&#34;&gt;The Hitchhiker&amp;rsquo;s Guide to Modern JavaScript Tooling &lt;a href=&#34;#the-hitchhikers-guide-to-modern-javascript-tooling&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://reactkungfu.com/2015/07/the-hitchhikers-guide-to-modern-javascript-tooling/&#34;&gt;http://reactkungfu.com/2015/07/the-hitchhikers-guide-to-modern-javascript-tooling/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Collection of tools for modern JavaScript developers. I use few of them on daily basis and I&amp;rsquo;m looking forward to get my head around babel.js.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fontcdn&#34;&gt;FontCDN &lt;a href=&#34;#fontcdn&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://fontcdn.org/&#34;&gt;http://fontcdn.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google fonts are cool but browsing them is a pain. Thats why FontCDN is super cool! Quick preview and nice and intuitive link generator. Like it!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;if-we-stand-still-we-go-backwards&#34;&gt;If we stand still, we go backwards &lt;a href=&#34;#if-we-stand-still-we-go-backwards&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jakearchibald.com/2015/if-we-stand-still-we-go-backwards/&#34;&gt;https://jakearchibald.com/2015/if-we-stand-still-we-go-backwards/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jake Archibald and his thoughts about moving forward internet industry. So true!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wilson-miner-steal-this-talk&#34;&gt;Wilson Miner: “Steal This Talk” &lt;a href=&#34;#wilson-miner-steal-this-talk&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/B69C0QvgOTk&#34;&gt;https://youtu.be/B69C0QvgOTk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very cool talk about collaboration. Just share this shit!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;css-grid-layout-module-level---first-working-draft&#34;&gt;CSS Grid Layout Module Level - First working draft &lt;a href=&#34;#css-grid-layout-module-level---first-working-draft&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/css-grid-1/&#34;&gt;http://www.w3.org/TR/css-grid-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CSS is getting better. It is good to see how big progress this language had recently. Grid layout and Flexbox are the most exciting changes for me and it&amp;rsquo;s worth to follow. It’s future of layouts on every single project.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;typekit---new-embed-code-for-asynchronous-font-loading&#34;&gt;Typekit - New embed code for asynchronous font loading &lt;a href=&#34;#typekit---new-embed-code-for-asynchronous-font-loading&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.typekit.com/2015/08/04/new-embed-code-for-asynchronous-font-loading/&#34;&gt;http://blog.typekit.com/2015/08/04/new-embed-code-for-asynchronous-font-loading/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally! Async font loading on Typekit is a default now. How cool that decision is?!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;github-desktop&#34;&gt;GitHub Desktop &lt;a href=&#34;#github-desktop&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://desktop.github.com/&#34;&gt;https://desktop.github.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you use git with Github, you may consider downloading GitHub Desktop to manage your projects via native app. Available for Mac OS X and Windows cam make collaboration on project way faster. Have a look at nice &lt;a href=&#34;https://css-tricks.com/first-impression-of-github-desktop/&#34;&gt;First Impression of GitHub Desktop&lt;/a&gt; on CSS-Tricks.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speed-test&#34;&gt;Speed test &lt;a href=&#34;#speed-test&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/speed-test&#34;&gt;https://github.com/sindresorhus/speed-test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Small npm module that you need to install globally and it shows ping, download and upload speed via speedtest.net API. Another super cool and helpful global utility by Sindre Sorhus.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;postcss---the-future-is-here&#34;&gt;PostCSS - The Future is Here &lt;a href=&#34;#postcss---the-future-is-here&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/135997138&#34;&gt;https://vimeo.com/135997138&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That is super introduction to PostCSS world. Good starting point for all CSS lovers that are keen to start playing around with new fancy thing.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-technology-behind-preview-photos&#34;&gt;The technology behind preview photos &lt;a href=&#34;#the-technology-behind-preview-photos&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.facebook.com/posts/991252547593574&#34;&gt;https://code.facebook.com/posts/991252547593574&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Facebook’s way to handle huge cover images. Very neat idea and impressive results.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bootstrap-4&#34;&gt;Bootstrap 4 &lt;a href=&#34;#bootstrap-4&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://v4-alpha.getbootstrap.com/&#34;&gt;http://v4-alpha.getbootstrap.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Big thing! Bootstrap, definitely the most popular framework ever, now is available in fourth version. So many awesome changes. To list few of them: Switch from LESS to Sass, Semantic grid system optionally based on flexbox, dropping IE8 support. Bootstrap is super cool, I like it and I use it to quickly prototype things. Looking forward to dive into the code deeper.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;getting-started-with-ecmascript-6&#34;&gt;Getting started with ECMAScript 6 &lt;a href=&#34;#getting-started-with-ecmascript-6&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.2ality.com/2015/08/getting-started-es6.html&#34;&gt;http://www.2ality.com/2015/08/getting-started-es6.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The best summary of all the new exciting things that we can find in new specification of ECMAScript 6. Very well explained and compared to ES5 syntax.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;if-ever-i-should-leave-you-job-hunting-for-web-designers-and-developers&#34;&gt;If Ever I Should Leave You: Job Hunting For Web Designers and Developers &lt;a href=&#34;#if-ever-i-should-leave-you-job-hunting-for-web-designers-and-developers&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://alistapart.com/column/job-hunting-for-web-designers-and-developers&#34;&gt;http://alistapart.com/column/job-hunting-for-web-designers-and-developers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jeffrey Zeldman gives us few good advices about career path. Very interesting read. I have been on many situations described in this post and I wish to had that article in front of my eyes beforehand I made some stupid decisions.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;confidence-and-overwhelm&#34;&gt;Confidence and Overwhelm &lt;a href=&#34;#confidence-and-overwhelm&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://rachelandrew.co.uk/archives/2015/08/14/confidence-and-overwhelm&#34;&gt;https://rachelandrew.co.uk/archives/2015/08/14/confidence-and-overwhelm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fantastic series of conclusions after &lt;a href=&#34;http://thewebahead.net/104&#34;&gt;The Web Ahead podcast with Reachel&lt;/a&gt;. Overwhelming in web industry is quite popular subject recently and I’m glad there is many mature developers who wants to help you and me.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;devtools-tips-for-sublime-text-users&#34;&gt;DevTools Tips For Sublime Text Users &lt;a href=&#34;#devtools-tips-for-sublime-text-users&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@addyosmani/devtools-tips-for-sublime-text-users-cdd559ee80f8&#34;&gt;https://medium.com/@addyosmani/devtools-tips-for-sublime-text-users-cdd559ee80f8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sublime Text is so powerful tool. Developers who are working on Google Chrome dev tools thought the same, cause most of my favourite ST parts is implemented to Developer Tools. Addy Osmani drives through all this things on his post on Medium.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-future-of-layout-with-css-grid-layouts&#34;&gt;The future of layout with CSS: Grid Layouts &lt;a href=&#34;#the-future-of-layout-with-css-grid-layouts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@patrickbrosset/css-grid-layout-6c9cba6e8a5a&#34;&gt;https://medium.com/@patrickbrosset/css-grid-layout-6c9cba6e8a5a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CSS changed a lot recently. We have a things like flexbox which is awesome to build some small components of websites, but not necessarily entire layouts. Grid layouts is the future. Have a quick read about new grid feature by Patrick Brosset from Mozilla.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-beginners-guide-to-website-speed-optimization&#34;&gt;A Beginner’s Guide to Website Speed Optimization &lt;a href=&#34;#a-beginners-guide-to-website-speed-optimization&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kinsta.com/learn/page-speed/&#34;&gt;https://kinsta.com/learn/page-speed/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Super cool introduction how to work with performance. It says it is for beginners but this guide is very complex. Must read for people who do not realize how important performance is.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;woff2-support-added-to-typekit&#34;&gt;WOFF2 support added to Typekit &lt;a href=&#34;#woff2-support-added-to-typekit&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.typekit.com/2015/08/26/woff2-support-added-to-typekit/&#34;&gt;http://blog.typekit.com/2015/08/26/woff2-support-added-to-typekit/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Guys from Typekit finally started to care about performance. It is second big improvement this month. Fonts server in WOFF2 format injected via async script sounds quite good, yeah? Good job Typekit!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Sass to PostCSS</title>
      <link>https://pawelgrzybek.com/from-sass-to-postcss/</link>
      <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/from-sass-to-postcss/</guid>
      <description>&lt;p&gt;I have a feeling that my CSS authoring went way too far from vanilla CSS. Abstraction of my super functions heavy Sass files doesn’t even remind stylesheets as we remember them from the past. I noticed on Twitter a huge buzz about PostCSS but initially I refused to try it. I just couldn’t imagine a better process for working with styles than my sassy method. Excitement of community eventually triggered my curiosity and I gave it a try. Do you remember that feeling when you discovered power of Sass few years ago? I just moved back to CSS and have exactly the same feeling. Alan Mooiman gave an awesome talk at CascadiaFest 2015 conference titled &lt;a href=&#34;https://youtu.be/jWDZP8twWDg&#34;&gt;“CSS is dead, long live CSS”&lt;/a&gt; and I am currently on the same boat.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-08-27-1.jpg&#34;
  alt=&#34;Alan Mooiman - CSS is dead, long live CSS&#34;
  loading=&#34;lazy&#34;
  width=&#34;1275&#34;
  height=&#34;678&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;the-main-difference-between-sass-and-postcss&#34;&gt;The main difference between Sass and PostCSS &lt;a href=&#34;#the-main-difference-between-sass-and-postcss&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sass comes with bunch of functionality irrespectively if you use a whole bunch of features, or just simple variables. PostCSS comes with absolutely nothing apart from API that handles &lt;a href=&#34;https://github.com/postcss/postcss#plugins&#34;&gt;plugins&lt;/a&gt; written in JavaScript. Yeah, thats correct! You pick extra functionality and add them to your process by yourself. If you need variables, you need to install small plugin and now you have a CSS with variables. If you need nesting on top of that, one more plugin and your CSS is now supercharged by variables and nesting. You get it now. Because you use only the things that you need it makes the entire process super fast.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostCSS can do the same work as preprocessors like Sass, Less, and Stylus. But PostCSS is modular, 3-30 times faster, and much more powerful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-08-27-2.jpg&#34;
  alt=&#34;PostCSS.parts website&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;1027&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;grunt-gulp-broccoli&#34;&gt;Grunt, Gulp, Broccoli… &lt;a href=&#34;#grunt-gulp-broccoli&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is many options to get your PostCSS running. Configurations is dead easy and it’s &lt;a href=&#34;https://github.com/postcss/postcss#usage&#34;&gt;well described on Github&lt;/a&gt;. I use &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt; as a build system and it &lt;a href=&#34;https://github.com/postcss/gulp-postcss&#34;&gt;works very well&lt;/a&gt; with it. If you struggle to set it up, &lt;a href=&#34;http://www.sitepoint.com/build-css-preprocessor-postcss/&#34;&gt;“How to Build Your Own CSS Preprocessor With PostCSS” by Craig Buckler&lt;/a&gt; is a good resource to start with. Another very helpful resource to get your head around it is &lt;a href=&#34;https://www.youtube.com/playlist?list=PLLnpHn493BHFvjZzyYrQP0RTsG-Al7j9m&#34;&gt;PostCSS Tutorials&lt;/a&gt; by Scott Tolinski from Level Up Tuts. Sometimes I can’t believe all the videos that this guy is doing are available to watch for free. I highly recommend a different series by Scott (ie. Gulp or Sketch are very good).&lt;/p&gt;
&lt;h2 id=&#34;what-i-use&#34;&gt;What I use &lt;a href=&#34;#what-i-use&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I said earlier I try to restrict my toolkit to a minimum but it does’t mean I want to forget about amazing things like partials or variables. There is a few add-ons that I can’t live without and let me show you how it works. The majority of them work exactly the same as they do in Sass.&lt;/p&gt;
&lt;h3 id=&#34;partials-and-imports&#34;&gt;Partials and imports &lt;a href=&#34;#partials-and-imports&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I can’t imagine to work with CSS without meaningful order of my partials files. Plugin that I use to make it work is &lt;a href=&#34;https://github.com/postcss/postcss-import&#34;&gt;postcss-import&lt;/a&gt;. I kept the Sass naming convention with a single prefix underscore for partial files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Code looks like */&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_typography.css&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;variables&#34;&gt;Variables &lt;a href=&#34;#variables&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sass style variables you can add via &lt;a href=&#34;https://github.com/postcss/postcss-simple-vars&#34;&gt;postcss-simple-vars&lt;/a&gt;. Eventually I will replace it with &lt;a href=&#34;https://github.com/cssnext/cssnext&#34;&gt;cssnext&lt;/a&gt; that is using the syntax from latest CSS spec. It is cool to be familiar with upcoming standards, yeah?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Code looks like */&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$color-brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;ni&#34;&gt;hotpink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$font-size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;color-brand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Result */&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;hotpink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;nesting&#34;&gt;Nesting &lt;a href=&#34;#nesting&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I almost don’t nest at all. As a big fan of BEM methodology the only things that I nest are pseudo-classes and pseudo-elements. I could live without nesting, but it is just an affter-effect of longterm habits. The plugin that I use to do it is &lt;a href=&#34;https://github.com/postcss/postcss-nested&#34;&gt;postcss-nested&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Code looks like */&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;black&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:hover&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;plum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Result */&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;black&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;hover&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;plum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mixins&#34;&gt;Mixins &lt;a href=&#34;#mixins&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sass mixins offers a huge power and I am worried that I won’t be able to replicate the same functionality in my new PostCSS workflow. Something that &lt;a href=&#34;https://github.com/postcss/postcss-mixins&#34;&gt;postcss-mixins&lt;/a&gt; brings to the table blew me away. Ability to define a mixin in CSS and function in JavaScript is awesome. I need to get my head around it a little bit more, but at first glance it’s superb!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Code looks like */&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;@define-mixin&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;transition&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;150ms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;easing&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;ease-out&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;easing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;@mixin&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt; transition&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ease-in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Result */&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;ease&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;media-queries-concatenation&#34;&gt;Media-queries concatenation &lt;a href=&#34;#media-queries-concatenation&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Small plugin &lt;a href=&#34;https://github.com/hail2u/node-css-mqpacker&#34;&gt;CSS MQPacker&lt;/a&gt; wraps the same media-queries rules into one. I know that few of the same media-queries decelerations doesn’t affect performance (as long as it is gzipped) but for peace of mind we can save few bits.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Code looks like */&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;.foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;960&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;.bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;960&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Result */&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;media&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;960px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;autoprefixer&#34;&gt;Autoprefixer &lt;a href=&#34;#autoprefixer&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is definitely the most popular add-on based on PostCSS. &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34;&gt;Autoprefixer&lt;/a&gt; cares about adding necessary vendor prefixes. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Code looks like */&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;flex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Result */&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;-webkit-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;-webkit-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;flex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;-ms-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flexbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;flex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;smart-minification-with-cssnano&#34;&gt;Smart minification with cssnano &lt;a href=&#34;#smart-minification-with-cssnano&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I used many CSS minification tools but &lt;a href=&#34;http://cssnano.co&#34;&gt;cssnano&lt;/a&gt; is much smarter than rest of them. This modular optimisation tool built on top of PostCSS generates as smaller production stylesheet as it can be. Have a look at the example from their website.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Code looks like */&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;before&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;before&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#ff0000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kp&#34;&gt;-webkit-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;border-radius&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;border-radius&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;/* invalid placement */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;charset&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* Result */&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;charset&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;before&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;border-radius&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;will-i-move-from-sass-to-postcss&#34;&gt;Will I move from Sass to PostCSS &lt;a href=&#34;#will-i-move-from-sass-to-postcss&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes. Maybe not today, maybe not tomorrow, but eventually I’ll find a perfect workflow that will let me smoothly transfer entirely to PostCSS. This tool is getting popular day by day and I’m sure that it is not a temporary hype. Companies like Google, Twitter, Alibaba, and Shopify use it already. Recently Chris Coyier on &lt;a href=&#34;https://blog.codepen.io/2015/07/14/postcss-now-supported-on-codepen/&#34;&gt;CodePen’s blog&lt;/a&gt; announced support for PostCSS. New plugins are coming out. All these things just make me curious what will Sass 4.0 bring to us?&lt;/p&gt;
&lt;p&gt;Let me know what do you think about PostCSS. If you have any plugins or hints that I could implement into my workflow, please let me know. I&amp;rsquo;m sure I will write more posts about PostCSS in near future, so please stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I won&#39;t miss you Adobe</title>
      <link>https://pawelgrzybek.com/i-wont-miss-you-adobe/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/i-wont-miss-you-adobe/</guid>
      <description>&lt;p&gt;Adobe Photoshop, Adobe Illustrator and Adobe Fireworks were web design industry standard for many years. Everybody is familiar with these tools not because they are incredibly amazing but because they were the only choice. Some time ago Adobe changed their sales model to a monthly subscription. So many web developers and designers (including myself) were not very happy with that politics. Fortunately few new applications came out recently and finally we have the opportunity to use something else. I have tested a few of them: Sketch for UI and Pixelmator and Affinity Photo for photo retouching. Finally I&amp;rsquo;m ready to leave Adobe’s world!&lt;/p&gt;
&lt;p&gt;My toolset of choice is Sketch + Affinity Photo. I can&amp;rsquo;t describe how amazing these two tools are. Pixelmator is an amazing piece of software as well, but it doesn&amp;rsquo;t do anything that I&amp;rsquo;m not able to do with Affinity Photo. Let me list few things that I like the most in my new set of design software.&lt;/p&gt;
&lt;h2 id=&#34;money-money-money&#34;&gt;Money, money, money &lt;a href=&#34;#money-money-money&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of course the main reason that pushed me to look for new tools was the super high price of Adobe’s subscription. The minimum that I need to accomplish in my daily tasks is a combination of Photoshop and Illustrator. Lets compare the price of these apps with my current toolkit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adobe Creative Cloud: &lt;strong&gt;£45.73 per month&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sketch 3: &lt;strong&gt;£79.99&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Affinity Photo: &lt;strong&gt;£39.99&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You don&amp;rsquo;t have to be a math genius to notice that two months of subscription of Adobe Creative Cloud costs you about the same price like lifetime license for Sketch and Affinity Photo. I like it!&lt;/p&gt;
&lt;h2 id=&#34;lets-talk-about-performance&#34;&gt;Let&amp;rsquo;s talk about performance &lt;a href=&#34;#lets-talk-about-performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I prefer to use apps that do what I need and not much more. Sublime Text is a good example. It comes as a very plain text editor and if I need to add some missing feature, a small plugin solves the problem. Photoshop is a perfect example of an application that is the absolutely opposite. Things like 3D or video editing built in the core of Photoshop is a crap idea. I&amp;rsquo;m assuming that I have used maybe 1% of the available features, if not less. It causes performance issues. I like their competitors approach. Literally everything that you need and not much more. If you need a super cool feature in Sketch, I&amp;rsquo;m more than sure you can find a plugin to do that. Affinity Photo includes everything that I need, easy interface to work with and performance is so much better than in PS. As I expected from photo retouching tool it does it very well and not much more.&lt;/p&gt;
&lt;p&gt;All these features takes some space on your hard drive. It is definitely not the most important factor for me, but I just don&amp;rsquo;t like to keep things that I don&amp;rsquo;t need. Let&amp;rsquo;s have a look as required space on our machines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adobe Photoshop CC 2015: &lt;strong&gt;1.78GB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sketch 3: &lt;strong&gt;38MB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Affinity Photo: &lt;strong&gt;575MB&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;icloud-integration&#34;&gt;iCloud integration &lt;a href=&#34;#icloud-integration&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Open, done! Save, done! Open on different computer and do some changes, done! Quick and easy. Thanks to iCloud integration. I&amp;rsquo;m aware of Creative Cloud, but do I really need another cloud in my life?&lt;/p&gt;
&lt;h2 id=&#34;photoshop-is-made-for-photos-not-graphics-interfaces&#34;&gt;PHOTOshop is made for photos, not graphics interfaces &lt;a href=&#34;#photoshop-is-made-for-photos-not-graphics-interfaces&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It never worked for me as a UI tool. Things like broken pixel snapping or totally unpredictable typefaces rendering drives me nuts. These are the things that you don&amp;rsquo;t want to spend time on to fix and be focused on design instead. For photos retouching I can&amp;rsquo;t think of a better tool. The problem is I&amp;rsquo;m not a retoucher.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features &lt;a href=&#34;#features&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t want to describe in depth about available features because you can find hundreds articles like that on &lt;a href=&#34;https://medium.com/sketch-app&#34;&gt;Medium.com&lt;/a&gt;. I just want to say that Sketch and Affinity Photo gives me everything that I need for basic design tasks. Things like pages and artboards in Sketch or saving pretty well compressed .jpgs for web are amazing. All the cool features are very intuitive and well documented in the help tab.&lt;/p&gt;
&lt;h2 id=&#34;i-wont-miss-you-adobe&#34;&gt;I won&amp;rsquo;t miss you Adobe &lt;a href=&#34;#i-wont-miss-you-adobe&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish to see Adobe&amp;rsquo;s update soon that will make theirs tools fresh and modern like they were few years ago. For now I&amp;rsquo;m more than happy to use my brand new toolkit and I&amp;rsquo;m ready to get rid of every Adobe app from my computer.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s your opinion about Adobes recent changes? What is your toolkit of choice? Hmm? Photoshop addicts, how much do you hate me now?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fix privileges and never again use sudo with npm</title>
      <link>https://pawelgrzybek.com/fix-priviliges-and-never-again-use-sudo-with-npm/</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/fix-priviliges-and-never-again-use-sudo-with-npm/</guid>
      <description>&lt;p class=&#34;update&#34;&gt;Nah! Don&amp;rsquo;t do it! I published this article years ago. It was a solution provided by npm team by the time of writing this article. Use &lt;code&gt;nvm&lt;/code&gt; or &lt;a href=&#34;https://pawelgrzybek.com/homebrew-the-best-friend-of-the-macos-user/&#34;&gt;brew&lt;/a&gt; instead please.&lt;/p&gt;

&lt;p&gt;We have a few options to install Node and npm. Using &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; is the safest and recommended way to do it. Another safety option is using &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;Node Version Manager&lt;/a&gt;. Next method is using &lt;a href=&#34;https://nodejs.org/&#34;&gt;installer available on official node website&lt;/a&gt;. This way is the most obvious and the easiest one, but not necessarily the safest one. Fortunately there is a very easy fix.&lt;/p&gt;
&lt;p&gt;If you used installer, whenever you want to install a package globally you need to use a super user power to do it. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install -g grunt-cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On a first glance it&amp;rsquo;s nothing wrong with that code, yeah? Even on official Grunt documentation it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may need to use sudo (for OS X, *nix, BSD etc) or run your command shell as Administrator (for Windows) to do this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Actually it is a very dangerous thing. Correctly pointed out by my &lt;a href=&#34;https://twitter.com/IcyApril&#34;&gt;friend&lt;/a&gt; recently, I started investigate the problem and I found an amazing article by &lt;a href=&#34;https://twitter.com/givanse&#34;&gt;Gastón I. Silva&lt;/a&gt; — &lt;a href=&#34;http://givan.se/do-not-sudo-npm/&#34;&gt;Do not sudo npm&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should not run applications with root privileges if its not necessary. Node and npm can do their work just perfectly fine without admin powers. If you are running a server with root privileges and it gets hacked through a vulnerability in your code, the attacker will have total control over your machine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We don&amp;rsquo;t need troubles. We need to change privileges on few folders on our machine. The procedure is very simple and it&amp;rsquo;s very clearly explained on &lt;a href=&#34;https://docs.npmjs.com/getting-started/fixing-npm-permissions&#34;&gt;one of the videos&lt;/a&gt; on the official npm documentation website. Open Terminal and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R $(whoami) /usr/local/lib/node_modules
sudo chown -R $(whoami) /usr/local/bin
sudo chown -R $(whoami) /usr/local/share
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These few lines of code are very straight forward. It changes the owner of listed directories from root to your user name. Flag -R stands for &amp;lsquo;recursively&amp;rsquo; which means it changes ownership on particular directory and all directories and files inside it.&lt;/p&gt;
&lt;p&gt;Enjoy using npm without &amp;lsquo;sudo&amp;rsquo; now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 July</title>
      <link>https://pawelgrzybek.com/top-picks-2015-july/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-july/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-code&#34;&gt;What is code? &lt;a href=&#34;#what-is-code&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/&#34;&gt;http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Essay about programming by Paul Ford. Very interesting read.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lea-verou-on-the-missing-slice-of-pie&#34;&gt;Lea Verou on The Missing Slice of Pie &lt;a href=&#34;#lea-verou-on-the-missing-slice-of-pie&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://vimeo.com/132511382&#34;&gt;https://vimeo.com/132511382&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I recently worked on a project that required a basic pie chart. I managed to implement a basic non-js, SVG based solution. That video would be so helpful back then! By the way I recommend new book by Lea Verou titled &lt;a href=&#34;http://shop.oreilly.com/product/0636920031123.do&#34;&gt;CSS Secrets&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sindre-sorhus-about-modularity&#34;&gt;Sindre Sorhus about modularity &lt;a href=&#34;#sindre-sorhus-about-modularity&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/ama/issues/10#issuecomment-117766328&#34;&gt;https://github.com/sindresorhus/ama/issues/10#issuecomment-117766328&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you make your own shoes? No, you buy them in a store. Most don&amp;rsquo;t care how the shoe is made. Just how good it fits.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reactjs-introduction-for-people-who-know-just-enough-jquery-to-get-by&#34;&gt;React.js Introduction For People Who Know Just Enough jQuery To Get By &lt;a href=&#34;#reactjs-introduction-for-people-who-know-just-enough-jquery-to-get-by&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://reactfordesigners.com/labs/reactjs-introduction-for-people-who-know-just-enough-jquery-to-get-by/&#34;&gt;http://reactfordesigners.com/labs/reactjs-introduction-for-people-who-know-just-enough-jquery-to-get-by/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Super guide to start your journey with React.js. Every single step is well described and compared to jQuery implementation. I&amp;rsquo;m not JavaScript ninja but this one is very easy to follow and understand. Very good tutorial!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;affinity-photo&#34;&gt;Affinity Photo &lt;a href=&#34;#affinity-photo&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://affinity.serif.com/en-gb/photo/&#34;&gt;https://affinity.serif.com/en-gb/photo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m ready to leave Adobe&amp;rsquo;s planet. Finally! I tried Pixelmator, super app but missing many things that I need (ie. crop tool isn&amp;rsquo;t perfect). New Serif&amp;rsquo;s product is worth to call it a Photoshop replacement. Interesting fact: it’s opening.psd quicker than Photoshop, seriously.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;design--develop-your-own-blog&#34;&gt;Design &amp;amp; Develop Your Own Blog &lt;a href=&#34;#design--develop-your-own-blog&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.git-tower.com/learn/build-your-own-blog/introduction/introduction&#34;&gt;http://www.git-tower.com/learn/build-your-own-blog/introduction/introduction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t describe how helpful this series is. This one and different series by authors of Tower App - Best git GUI ever made! This one walk you through the process of creating own blog. So detailed, well explained and very well designed!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cascading-shit-show-by-jacob-thornton&#34;&gt;Cascading Shit Show by Jacob Thornton &lt;a href=&#34;#cascading-shit-show-by-jacob-thornton&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/iniwPUEbPUM&#34;&gt;https://youtu.be/iniwPUEbPUM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best example how can you combine your profession and good fun. So funny talk about history of CSS. I scrolled through my Twitter, saw that lad and thought: “lets click and listen”. Super cool talk Jacob!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;jquery-30-and-jquery-compat-30-alpha-versions-released&#34;&gt;jQuery 3.0 and jQuery Compat 3.0 Alpha Versions Released &lt;a href=&#34;#jquery-30-and-jquery-compat-30-alpha-versions-released&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/&#34;&gt;http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally correct functionality of .show() and .hide() function and many, many more. Big step jQuery team, good job!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nesting-in-sass-and-less&#34;&gt;Nesting in Sass and Less &lt;a href=&#34;#nesting-in-sass-and-less&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://markdotto.com/2015/07/20/css-nesting/&#34;&gt;http://markdotto.com/2015/07/20/css-nesting/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nesting explained! Mark Otto is an author of Bootstrap. Nowadays he works for Github. This man knows CSS! General idea — keep things simple!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-seo-experts-guide-to-web-performance-using-webpagetest&#34;&gt;The SEO Expert&amp;rsquo;s Guide to Web Performance Using WebPageTest &lt;a href=&#34;#the-seo-experts-guide-to-web-performance-using-webpagetest&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://moz.com/blog/the-seo-experts-guide-to-web-performance-using-webpagetest&#34;&gt;https://moz.com/blog/the-seo-experts-guide-to-web-performance-using-webpagetest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quick introduction to WebPageTest — definitely the best tool ever if you are one of these guys who care about performance. Huge tool with plethora of options allows you to collect so many important information. Highly recommended to use it everyday!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;awesome--marvelous-amas&#34;&gt;Awesome &amp;amp; Marvelous Amas &lt;a href=&#34;#awesome--marvelous-amas&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/amas&#34;&gt;https://github.com/sindresorhus/amas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Series of Q&amp;amp;A to well known developers called AMA (Ask me anything) is getting more popular. Author of a project created a list of all AMAs. I found it so interesting.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-the-flexbox&#34;&gt;What the Flexbox? &lt;a href=&#34;#what-the-flexbox&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://flexbox.io/&#34;&gt;http://flexbox.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wes Bos is an author of amazing series of tutorials. He did amazing stuff for beginners in Terminal world, another one for Sublime Text users. This time he created something super excited! Series about flexbox layout model! Amazing job mate! Gulp tutorials are coming. Thank you Wes!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reeder-3-for-mac-public-beta&#34;&gt;Reeder 3 for Mac. Public Beta. &lt;a href=&#34;#reeder-3-for-mac-public-beta&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/reederapp/status/626743499115921409&#34;&gt;https://twitter.com/reederapp/status/626743499115921409&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Reeder is the best RSS client for Mac OS X! Silvio Rizzi just announced a beta version of third version of this app. Another good news is that upgrade will be free for all owners of second version of Reeder App. If you don&amp;rsquo;t know this app, now you have a chance to try it for free.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Specificity explained</title>
      <link>https://pawelgrzybek.com/css-specificity-explained/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/css-specificity-explained/</guid>
      <description>&lt;p&gt;CSS Specificity is the most misunderstood part of Cascading Style Sheets. No doubt! Yes, it is even trickier than floats, trust me! I hang out with many web developers on a daily basis and I assume that lack of understanding of this concept is most frequently the reason of confusion. Let me quote &lt;a href=&#34;http://cssguidelin.es/#specificity&#34;&gt;Harry Roberts&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As we’ve seen, CSS isn’t the most friendly of languages: globally operating, very leaky, dependent on location, hard to encapsulate, based on inheritance… But! None of that even comes close to the horrors of specificity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;what-is-css-specificity&#34;&gt;What is CSS Specificity? &lt;a href=&#34;#what-is-css-specificity&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First lets have a look at a definition from &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity&#34;&gt;Mozilla Developer Network&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specificity is the means by which a browser decides which CSS property values are the most relevant to an element and therefore will be applied. Specificity is only based on the matching rules which are composed of CSS selectors of different sorts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The definition is straight forward, so why can we experiencing issues? It starts when few selectors apply to the same element. Look!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myclass&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myid&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;color: yellow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet.&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;myclass&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;myid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What is the color of that paragraph? Hmmm? In this case our browser calculates a specificity value for each selector and prints the winner with highest score. This example is very trivial but in real life things are not that predictable.&lt;/p&gt;
&lt;h2 id=&#34;how-to-calculate-css-specificity&#34;&gt;How to calculate CSS specificity &lt;a href=&#34;#how-to-calculate-css-specificity&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we go any further I need to make sure you know basic CSS terminology: selector, property, value, declaration, pseudo class and pseudo element. Have a look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;hover&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;before&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;.selector:pseudoClass::pseudoElement {
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;  property: value;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Example above shows that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.post&lt;/code&gt; is a selector&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:hover&lt;/code&gt; is a pseudo-class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::before&lt;/code&gt; is a pseudo-element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt; is a property&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red&lt;/code&gt; is a value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color: red;&lt;/code&gt; is a declaration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s come back to specificity. We can separate CSS rules to 4 main categories and each of them adds a different value to specificity score. The correct notation of specificity score takes a form that separates points by coma in an appropriate order. Lets start counting from &lt;code&gt;0, 0, 0, 0&lt;/code&gt; and then&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;inline-styles&#34;&gt;Inline styles &lt;a href=&#34;#inline-styles&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;color: yellow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet.&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using an inline style attribute in HTML markup always takes precedence. It adds &lt;code&gt;1, 0, 0, 0&lt;/code&gt; to the specificity score.&lt;/p&gt;
&lt;h3 id=&#34;ids&#34;&gt;IDs &lt;a href=&#34;#ids&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;myid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each ID adds &lt;code&gt;0, 1, 0, 0&lt;/code&gt; to specificity score.&lt;/p&gt;
&lt;h3 id=&#34;classes-pseudo-classes-attributes&#34;&gt;Classes, pseudo-classes, attributes &lt;a href=&#34;#classes-pseudo-classes-attributes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;myclass&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each class, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#Index_of_standard_pseudo-classes&#34;&gt;pseudo-class&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors#Summary&#34;&gt;attribute selector&lt;/a&gt; adds &lt;code&gt;0, 0, 1, 0&lt;/code&gt; to the specificity score.&lt;/p&gt;
&lt;h3 id=&#34;elements-and-pseudo-elements&#34;&gt;Elements and pseudo-elements &lt;a href=&#34;#elements-and-pseudo-elements&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each element and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements#All_pseudo-elements&#34;&gt;pseudo-element&lt;/a&gt; adds &lt;code&gt;0, 0, 0, 1&lt;/code&gt; to the specificity score.&lt;/p&gt;
&lt;h3 id=&#34;lets-put-it-together&#34;&gt;Let&amp;rsquo;s put it together &lt;a href=&#34;#lets-put-it-together&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If an element includes inline styles specificity is equal &lt;code&gt;1, 0, 0, 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Each ID gives us &lt;code&gt;0, 1, 0, 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Each class, pseudo-class or attribute gives us &lt;code&gt;0, 0, 1, 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Each element or pseudo-element applies &lt;code&gt;0, 0, 0, 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;few-examples&#34;&gt;Few examples &lt;a href=&#34;#few-examples&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Practice is a best teacher so let&amp;rsquo;s have a look at a few examples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;toc&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Inline style: 0
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;IDs:          1 (#toc)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Classes:      0
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Elements:     2 (li, li)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Specificity score: 0, 1, 0, 2
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;nav&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;selected&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;hover&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Inline style: 0
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;IDs:          1 (#nav)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Classes:      2 (.selected, :hover)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Elements:     1 (a)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Specificity score: 0, 1, 2, 1
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;nav&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nofollow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Inline style: 0
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;IDs:          2 (#nav, #list)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Classes:      2 (.header, [rel=nofollow])
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Elements:     3 (li, a, ::after)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Specificity score: 0, 2, 2, 3
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;searchbar&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;display: none;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;...&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;searchbar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Inline style: 1 (style=&amp;#34;display: none;&amp;#34;)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;IDs:          0
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Classes:      1 (.searchbar)
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Elements:     0
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Specificity score: 1, 0, 1, 0
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exceptions&#34;&gt;Exceptions &lt;a href=&#34;#exceptions&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The only way to override inline styles in an &lt;code&gt;!important&lt;/code&gt; keyword. You can think of it as a &lt;code&gt;1, 0, 0, 0, 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Selector inside the &lt;code&gt;:not()&lt;/code&gt; pseudo-class gets counted. This pseudo-class by itself does not get counted.&lt;/li&gt;
&lt;li&gt;Tie! If two selectors have the same specificity score then order decides which rules are applied.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;non-10-based&#34;&gt;Non 10-based &lt;a href=&#34;#non-10-based&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some people tend to represent the specificity value as a base-10 number by removing separators. It’s not right at all thats why we use a coma separated notation. Definition says that specificity values have an infinite base, but it’s not right either. I will show you some ugly example later on :)&lt;/p&gt;
&lt;h2 id=&#34;how-to-keep-yourself-away-from-specificity-related-issues&#34;&gt;How to keep yourself away from specificity related issues? &lt;a href=&#34;#how-to-keep-yourself-away-from-specificity-related-issues&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We know that specificity is one of the worst parts of CSS but there are many rules that you can apply to daily code habits that will help you with this.&lt;/p&gt;
&lt;h3 id=&#34;keep-it-low&#34;&gt;Keep it low &lt;a href=&#34;#keep-it-low&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Clean and neatly organised code brings so many benefits for you and your coworkers. There is a list of fantastic methodologies that you can grasp and use. My personal choice of combinations are &lt;a href=&#34;https://smacss.com/&#34;&gt;SMACSS&lt;/a&gt; by Jonathan Snook and &lt;a href=&#34;https://tech.yandex.com/bem/&#34;&gt;BEM naming convention&lt;/a&gt; by Yandex. Read more about these two approaches or &lt;a href=&#34;http://sixrevisions.com/css/css-methodologies/&#34;&gt;many alternatives here&lt;/a&gt;. Low selectors specificity is always one of the advantages of using some CSS methodologies.&lt;/p&gt;
&lt;h3 id=&#34;do-not-use-ids&#34;&gt;Do not use IDs &lt;a href=&#34;#do-not-use-ids&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Despite that it’s absolutely valid it’s very poor practice to use IDs to style elements. Accordingly to the previous rule, we are suppose to keep the specificity score as low as we can. Another reason avoid it is the fact that they can’t be reused. But it’s all about reusing components! Right?! If you need more reasons, check &lt;a href=&#34;http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;nesting-isnt-cool-at-all&#34;&gt;Nesting isn’t cool at all &lt;a href=&#34;#nesting-isnt-cool-at-all&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nesting is probably one of the most overused thing in CSS. Preprocessors sell nesting as a feature that combines selectors in more readable and easier to apply way. In fact, nesting should be avoided wherever possible. It’s another case where decent naming convention comes to the rescue! The rule of thumb is to not nest more than 4 levels. Funny guys from &lt;a href=&#34;http://thesassway.com/beginner/the-inception-rule&#34;&gt;The Sass Way&lt;/a&gt; called this the “Inception Rule&amp;rdquo; — if you have watched the &amp;ldquo;Inception&amp;rdquo; movie you know what I’m talking about. Another reason was described in fantastic article &lt;a href=&#34;http://csswizardry.com/2015/04/cyclomatic-complexity-logic-in-css/&#34;&gt;“Cyclomatic Complexity: Logic in CSS” by Harry Roberts&lt;/a&gt;. Let me quote a sentence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of your selectors as mini programs: Every time you nest or qualify, you are adding an if statement; read these ifs out loud to yourself to try and keep your selectors sane.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;forget-about-important&#34;&gt;Forget about !important &lt;a href=&#34;#forget-about-important&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Last resort of specificity war. If you use it on a daily basis you will probably be very depressed, or weeks after the project dead-line.&lt;/p&gt;
&lt;h2 id=&#34;interesting-facts-about-specificity&#34;&gt;Interesting facts about specificity &lt;a href=&#34;#interesting-facts-about-specificity&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was very curious about posibility to override ID by classes. 256 classes are enough to win a specificity war with one ID in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All versions on Internet Explorer&lt;/li&gt;
&lt;li&gt;All version of Firefox&lt;/li&gt;
&lt;li&gt;Google Chrome &amp;lt; 24&lt;/li&gt;
&lt;li&gt;Safari OS X &amp;lt; 6.1&lt;/li&gt;
&lt;li&gt;Safari iOS &amp;lt; 7&lt;/li&gt;
&lt;li&gt;Android &amp;lt; 4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check this CodePen on one of the matching browsers above and you should see a green paragraph. Totally useless though :)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I found out that on modern webkit browser 65536 classes are stronger than a single ID. Unfortunately I didn&amp;rsquo;t manage to create an example. CodePen just simply couldn&amp;rsquo;t handle that kind of calculation. If you have any confirmed information about it, please let me know.&lt;/p&gt;
&lt;h2 id=&#34;helpful-tools-and-resources&#34;&gt;Helpful tools and resources &lt;a href=&#34;#helpful-tools-and-resources&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/css3-selectors/#specificity&#34;&gt;Official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pocketjoso/specificity-graph&#34;&gt;Specificity Graph (for CSS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jonassebastianohlsson.com/specificity-graph/&#34;&gt;CSS Specificity Graph Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://specificity.keegan.st/&#34;&gt;Specificity Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cssstats.com/&#34;&gt;CSS Stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cssdig.com/&#34;&gt;CSS Dig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/katiefenn/parker&#34;&gt;Parker - stylesheet analysis tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 June</title>
      <link>https://pawelgrzybek.com/top-picks-2015-june/</link>
      <pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-june/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;making-material-design&#34;&gt;Making Material Design &lt;a href=&#34;#making-material-design&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.google.com/design/&#34;&gt;http://www.google.com/design/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure if it&amp;rsquo;s any new, but I came across that website just sec ago. Well explained idea behind Google Material Design.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;jquery-quick-api-reference&#34;&gt;jQuery Quick API Reference &lt;a href=&#34;#jquery-quick-api-reference&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://oscarotero.com/jquery/&#34;&gt;http://oscarotero.com/jquery/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quick jQuery API reference. Look at the thing, click, read and use. Done! Handy thing if you work with jQuery a lot.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;performance-tools&#34;&gt;Performance tools &lt;a href=&#34;#performance-tools&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/performance-tools/&#34;&gt;https://css-tricks.com/performance-tools/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chris posted list of tools that you need to check if you care about performance of your website.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;supercharging-page-load&#34;&gt;Supercharging page load &lt;a href=&#34;#supercharging-page-load&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/d5_6yHixpsQ&#34;&gt;https://youtu.be/d5_6yHixpsQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again about importance of performance. Few tips from Google Developers. It&amp;rsquo;s not about optimising images or concatenating scripts again. This one is more in depth.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;os-x-el-capitan&#34;&gt;OS X El Capitan &lt;a href=&#34;#os-x-el-capitan&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.apple.com/osx/elcapitan-preview/&#34;&gt;http://www.apple.com/osx/elcapitan-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Performance is a word of 2015. This is the hottest subject between web developers today. Apple Engineers do the same but not with theirs website but with new operating system called &amp;ldquo;El Capitan&amp;rdquo;. Apart from few minor design changes and new micro features, cleaver team of developers from California supercharged performance of this operating system. Good news and I&amp;rsquo;m looking forward to update. Coming this fall.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introducing-the-new-system-fonts&#34;&gt;Introducing the New System Fonts &lt;a href=&#34;#introducing-the-new-system-fonts&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/videos/wwdc/2015/?id=804&#34;&gt;https://developer.apple.com/videos/wwdc/2015/?id=804&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Antonio Cavedoni about new Apple default system font — San Francisco. It is a fantastic typography lesson too.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;photoshop-cc-2015-is-copying-sketch-and-its-a-good-thing&#34;&gt;Photoshop CC 2015 is copying Sketch and it’s a good thing &lt;a href=&#34;#photoshop-cc-2015-is-copying-sketch-and-its-a-good-thing&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://desiign.de/en/2015/06/photoshop-cc-2015-is-copying-sketch-and-its-a-good-thing/&#34;&gt;http://desiign.de/en/2015/06/photoshop-cc-2015-is-copying-sketch-and-its-a-good-thing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Photoshop finally updated, and it&amp;rsquo;s not just photo retouching tool since today. &amp;ldquo;Design mode&amp;rdquo; is kind of enabling Sketch App in Photoshop. Finally we can use art boards! I still use Sketch but it&amp;rsquo;s good to see that Photoshop is on good path to make web designers life easier.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web&#34;&gt;Google, Microsoft, Mozilla And Others Team Up To Launch WebAssembly, A New Binary Format For The Web &lt;a href=&#34;#google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/&#34;&gt;http://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a good news. It&amp;rsquo;s good to see any collaboration between creators of major browsers. WebAssembly is a magic for me though.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;svg-on-the-web--a-practical-guide&#34;&gt;SVG on the web — A Practical Guide &lt;a href=&#34;#svg-on-the-web--a-practical-guide&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://svgontheweb.com/&#34;&gt;https://svgontheweb.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Must read for every SVG enthusiastic. Huge portion of knowledge, detailed described examples and really clean and nice design of a website.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ecmascript-2015-has-been-approved&#34;&gt;ECMAScript 2015 Has Been Approved &lt;a href=&#34;#ecmascript-2015-has-been-approved&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/news/2015/06/ecmascript-2015-es6&#34;&gt;http://www.infoq.com/news/2015/06/ecmascript-2015-es6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ECMAScript 2015 finally official. From now, the name of new the versions will include ECMAScript followed by the year of their release. Specification of this language grown up from 245 to 600 pages. So good news!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;announcing-atom-10&#34;&gt;Announcing Atom 1.0 &lt;a href=&#34;#announcing-atom-10&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/blog/2031-announcing-atom-1-0&#34;&gt;https://github.com/blog/2031-announcing-atom-1-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally Github announced official, first stable version of their code editor - &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;. Build with HTML, CSS and JavaScript app is a fair competitor to popular Sublime Text. &lt;a href=&#34;https://youtu.be/Y7aEiVwBAdk&#34;&gt;Promo video&lt;/a&gt; is super funny!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;npm-300&#34;&gt;npm 3.0.0 &lt;a href=&#34;#npm-300&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/npm/npm/releases/tag/v3.0.0&#34;&gt;https://github.com/npm/npm/releases/tag/v3.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This moth is a definitely version of big updates. Node Package Manager is now available file version 3. List of changes if massive.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-debate-around-do-we-even-need-css-anymore&#34;&gt;The Debate Around “Do We Even Need CSS Anymore?” &lt;a href=&#34;#the-debate-around-do-we-even-need-css-anymore&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/&#34;&gt;https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hot topic this month. Chris Coyier started that debate and we can see countless valuable comments under neath the post. So interesting read.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cssconf-2015&#34;&gt;CSSConf 2015 &lt;a href=&#34;#cssconf-2015&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://2015.cssconf.com/&#34;&gt;https://2015.cssconf.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of this conferences where I would like to be. Unfortunately I couldn&amp;rsquo;t afford to attend this year, but maybe I&amp;rsquo;ll be more luck next time. Fortunately all the talks are available on their website. So cool! I highly recommend to watch them all!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cloud-source-repositories&#34;&gt;Cloud Source Repositories &lt;a href=&#34;#cloud-source-repositories&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/tools/cloud-repositories/&#34;&gt;https://cloud.google.com/tools/cloud-repositories/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Goggle will try to fight for users with Github and Bitbucket. New service isn&amp;rsquo;t officially announced yet but it&amp;rsquo;s ready to go. Will see how it works. It will difficult to take myself away from Github though.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-absolute-beginners-guide-to-google-analytics&#34;&gt;The Absolute Beginner&amp;rsquo;s Guide to Google Analytics &lt;a href=&#34;#the-absolute-beginners-guide-to-google-analytics&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://moz.com/blog/absolute-beginners-guide-to-google-analytics&#34;&gt;https://moz.com/blog/absolute-beginners-guide-to-google-analytics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m analytics ignorant. I just don&amp;rsquo;t care too much about trends and popularity of my website. After that read maybe I will. Not because I changed my mind but I consider Google Analytics as a quite interesting tool. It&amp;rsquo;s very nice introduction!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript console in Sublime Text</title>
      <link>https://pawelgrzybek.com/javascript-console-in-sublime-text/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/javascript-console-in-sublime-text/</guid>
      <description>&lt;p&gt;Learning JavaScript can be a long and difficult journey. You can read tons of books and articles, attend reputable conferences and watch many videos but you are wasting your time if you won&amp;rsquo;t practice it. Google Chrome Javascript Console isn&amp;rsquo;t the most comfortable tool for sure. Tools like &lt;a href=&#34;http://jsbin.com/&#34;&gt;jsbin.com&lt;/a&gt; or &lt;a href=&#34;http://jsfiddle.net/&#34;&gt;jsfiddle.net&lt;/a&gt; are super cool but lets confirm that, nothing is more convenient to write a piece of code than your favourite editor. Let me share with you how you can test your JavaScript scripts and execute it via &lt;a href=&#34;http://docs.sublimetext.info/en/latest/file_processing/build_systems.html&#34;&gt;build systems&lt;/a&gt; feature in Sublime Text 3.&lt;/p&gt;
&lt;p&gt;Build systems allows you to run your files through external programs without manually switching between code editor and Terminal. Sublime Text comes with few predefined profiles.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-06-12-1.jpg&#34;
  alt=&#34;Domain&amp;amp;rsquo;s DNS settings&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;728&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Our mission is to add a new one for JavaScript. We are going to use &lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt;. Make sure it is already installed on your device.&lt;/p&gt;
&lt;h2 id=&#34;create-javascript-build-system-in-sublime-text&#34;&gt;Create JavaScript build system in Sublime Text &lt;a href=&#34;#create-javascript-build-system-in-sublime-text&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every built system is described on JSON file with &lt;code&gt;.sublime-build&lt;/code&gt; extension. To create new one go to Tools &amp;gt; Build System &amp;gt; New Build System&amp;hellip; If you are mac OS user, copy and paste this bit of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/bin/node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;source.js&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows users&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C:/Program Files/nodejs/node.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;source.js&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In most cases single &lt;code&gt;node&lt;/code&gt; command does the job instead of passing a full path to node. I found this method more reliable though. If you are not sure where node is installed, just type &lt;code&gt;which node&lt;/code&gt; in Terminal (mac OS) or &lt;code&gt;where node&lt;/code&gt; in command prompt (windows users) to get the path.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-06-12-2.jpg&#34;
  alt=&#34;Domain&amp;amp;rsquo;s DNS settings&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;728&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Save this file as a JavaScript.sublime-build in &amp;ldquo;User&amp;rdquo; directory inside Sublime Text settings folder.&lt;/p&gt;
&lt;p&gt;Time for fun part. Create and save a JavaScript file (to execute a node interpreter, file needs to be saved), code some super amazing script and click Cmd + B (mac OS) or F7 (Windows). You can run this task manually from Tools &amp;gt; Build. Sublime Text should automatically run your script through appropriate build system. If something doesn&amp;rsquo;t work correctly go to Tools &amp;gt; Build System and make sure that Automatically or JavaScript is selected. Enjoy!&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-06-12-3.jpg&#34;
  alt=&#34;Domain&amp;amp;rsquo;s DNS settings&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;952&#34;
/&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 May</title>
      <link>https://pawelgrzybek.com/top-picks-2015-may/</link>
      <pubDate>Sun, 31 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-may/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;microsoft-edge-is-the-browser-for-windows-10&#34;&gt;Microsoft Edge is the browser for Windows 10 &lt;a href=&#34;#microsoft-edge-is-the-browser-for-windows-10&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blogs.msdn.com/b/ie/archive/2015/04/29/microsoft-edge-is-the-browser-for-windows-10.aspx&#34;&gt;http://blogs.msdn.com/b/ie/archive/2015/04/29/microsoft-edge-is-the-browser-for-windows-10.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Browser developed as a “Project Spartan” just revealed the true name of final result - Microsoft Edge. It is the new default browser on new Windows 10. At first glance looks like a well designed browser. Hopefully it’s going to be developed equally good. Bye bye Internet Explorer.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;very-busy-andy&#34;&gt;Very busy Andy &lt;a href=&#34;#very-busy-andy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://very-busy-andy.tumblr.com/&#34;&gt;http://very-busy-andy.tumblr.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What happens when your photography is a first image for “profile picture” on google search results?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;http2-in-5-minutes&#34;&gt;HTTP2 in 5 Minutes &lt;a href=&#34;#http2-in-5-minutes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/fJ0C4zN5uOQ&#34;&gt;https://youtu.be/fJ0C4zN5uOQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I try to dig into that subject, I always come across tons of terms that I don’t understand. This 5 minutes talk explains the general idea of new upcoming standard HTTP2. It is going to be a big thing for web performance.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-complete-guide-to-svg-fallbacks&#34;&gt;A Complete Guide to SVG Fallbacks &lt;a href=&#34;#a-complete-guide-to-svg-fallbacks&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/a-complete-guide-to-svg-fallbacks/&#34;&gt;https://css-tricks.com/a-complete-guide-to-svg-fallbacks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SVG is well supported in modern browsers, but we still have some issues on older engines. If you would like to provide a very good support of your vector graphics, this blog post comes very helpful. Author of that blog post — &lt;a href=&#34;https://twitter.com/AmeliasBrain&#34;&gt;Amelia Bellamy-Royds&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/SaraSoueidan&#34;&gt;Sara Soueidan&lt;/a&gt; are a good people to follow on Twitter if you are into SVG.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gitignoreio&#34;&gt;gitignore.io &lt;a href=&#34;#gitignoreio&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gitignore.io/&#34;&gt;https://www.gitignore.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Handy tool that helps to generate .gitignore file.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;there-is-no-fold&#34;&gt;There Is No Fold &lt;a href=&#34;#there-is-no-fold&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1946&#34;&gt;http://www.lukew.com/ff/entry.asp?1946&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One more time about fold. Series of researches made by &lt;a href=&#34;https://twitter.com/lukew&#34;&gt;Luke Wroblewski&lt;/a&gt; that proves there is no fold!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wwwhere&#34;&gt;wwwhere &lt;a href=&#34;#wwwhere&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://wwwhere.io/&#34;&gt;http://wwwhere.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge collection of useful links for every web designers and developers. Awesome collection, worth to bookmark.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-many-faces-of-the-web&#34;&gt;The many faces of the web &lt;a href=&#34;#the-many-faces-of-the-web&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://viljamis.com/blog/2015/the-many-faces-of-the-web/&#34;&gt;http://viljamis.com/blog/2015/the-many-faces-of-the-web/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Few thoughts about internet nowadays and the direction where are we going to. True, true, true!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;100-words-042&#34;&gt;100 words 042 &lt;a href=&#34;#100-words-042&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://adactio.com/journal/8862&#34;&gt;https://adactio.com/journal/8862&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Literally 1 minute article that explains how to create very smooth, 60FPS, bullet proof web projects. Probably this introduction is longer than article by itself. Read it!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;firefox-380&#34;&gt;Firefox 38.0 &lt;a href=&#34;#firefox-380&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/firefox/38.0/releasenotes/&#34;&gt;https://www.mozilla.org/en-US/firefox/38.0/releasenotes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally — support for &lt;!-- raw HTML omitted --&gt; tag and “src” attribute in latest version of Mozilla’s browser. Happy days!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;markdown-tutorial&#34;&gt;Markdown tutorial &lt;a href=&#34;#markdown-tutorial&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/6A5EpqqDOdk&#34;&gt;https://youtu.be/6A5EpqqDOdk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are a web developer you probably wrote some documentation sometimes. If you work as a copywriter in web design agency probably you write sometimes as well. Using tools like Microsoft Word or Apple Pages is OK, but not if you create a website content. If you still use it, it&amp;rsquo;s probably perfect time to learn Markdown. This 4 years old tutorial is still valid. Please, write Markdown!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;writing-in-sublime-text&#34;&gt;Writing in Sublime Text &lt;a href=&#34;#writing-in-sublime-text&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://hugogiraudel.com/2015/05/18/writing-in-sublime-text/&#34;&gt;http://hugogiraudel.com/2015/05/18/writing-in-sublime-text/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again about Markdown. One of my favourite developers &lt;a href=&#34;https://twitter.com/HugoGiraudel&#34;&gt;Hugo Giraudel&lt;/a&gt; gives us list of good advices how can we write Markdown in one of the most popular code editors on the Market — Sublime Text. I found section with recommended settings very useful.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;understanding-and-manually-improving-svg-optimization&#34;&gt;Understanding and Manually Improving SVG Optimization &lt;a href=&#34;#understanding-and-manually-improving-svg-optimization&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/understanding-and-manually-improving-svg-optimization/&#34;&gt;https://css-tricks.com/understanding-and-manually-improving-svg-optimization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Improve and optimize your SVG by understanding of technology and this few simple steps. So good read if you are into SVG like me.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;professional-web-typography&#34;&gt;Professional Web Typography &lt;a href=&#34;#professional-web-typography&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://prowebtype.com/&#34;&gt;https://prowebtype.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you care about web typography, this is &amp;ldquo;must read&amp;rdquo;. It is very easy to read book that gives you a good understanding of main principles of good web typography. Type Manager at Typeset.com says about author:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have known and worked with Donny for years. He has great taste, and keeps things simple. He pays close attention to subtle details, and works efficiently. His approach to typography on the web is refreshing and approachable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;getting-dicey-with-flexbox&#34;&gt;Getting Dicey With Flexbox &lt;a href=&#34;#getting-dicey-with-flexbox&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://davidwalsh.name/flexbox-dice&#34;&gt;http://davidwalsh.name/flexbox-dice&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is time for flexbox. I&amp;rsquo;m not master of this box model yet, but I promise I will catch up shortly. Give it a read, and understand why is it a future of CSS layouts!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;aria-label-for-an-accessible-web&#34;&gt;Aria-Label for an Accessible Web &lt;a href=&#34;#aria-label-for-an-accessible-web&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://seesparkbox.com/foundry/aria_label_for_an_accessible_web&#34;&gt;http://seesparkbox.com/foundry/aria_label_for_an_accessible_web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Beginning of a series about accessible internet on Sparkbox blog. This one is just a basic introduction, but it is important read. Example provided in article it too strong to don&amp;rsquo;t care about this subject.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-you-should-know-about-collapsing-margins&#34;&gt;What you should know about collapsing margins &lt;a href=&#34;#what-you-should-know-about-collapsing-margins&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/what-you-should-know-about-collapsing-margins/&#34;&gt;https://css-tricks.com/what-you-should-know-about-collapsing-margins/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may think that is so basic. I agree but so many people just don&amp;rsquo;t understand it. Collapsed margins are one of this tricky things in CSS and you just need to read that and bare in mind. My approach for margins is applying only margin-bottom to elements.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;text-rendering-optimizelegibility-is-decadent-and-depraved&#34;&gt;text-rendering: optimizeLegibility is Decadent and Depraved &lt;a href=&#34;#text-rendering-optimizelegibility-is-decadent-and-depraved&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://bocoup.com/weblog/text-rendering/&#34;&gt;http://bocoup.com/weblog/text-rendering/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I used optimizeLegibility on most of my projects. I didn&amp;rsquo;t realise how big impact it has for my performance. I recommend to have a look at the comments under the article as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;on-being-overwhelmed-with-our-fast-paced-industry&#34;&gt;On being overwhelmed with our fast paced industry &lt;a href=&#34;#on-being-overwhelmed-with-our-fast-paced-industry&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://wesbos.com/overwhelmed-with-web-development/&#34;&gt;http://wesbos.com/overwhelmed-with-web-development/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quick advice how to take all this new bright and shiny frameworks and tools that are constantly coming out. I totally agree.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-css-specificity-works&#34;&gt;How CSS Specificity Works &lt;a href=&#34;#how-css-specificity-works&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://sixrevisions.com/css/css-specificity/&#34;&gt;http://sixrevisions.com/css/css-specificity/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So cool article that explains how CSS specificity works and how coconut it. I knew that is a good practice keep it low, but i didn’t know hot to count it. My life is easier now.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nesting-components&#34;&gt;Nesting Components &lt;a href=&#34;#nesting-components&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://simurai.com/blog/2015/05/11/nesting-components/&#34;&gt;http://simurai.com/blog/2015/05/11/nesting-components/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A great post by &lt;a href=&#34;https://twitter.com/simurai&#34;&gt;@samurai&lt;/a&gt; about different approaches of nesting components in CSS. Comments below this post are another source of knowledge and considerations.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extending-styles&#34;&gt;Extending Styles &lt;a href=&#34;#extending-styles&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://philipwalton.com/articles/extending-styles/&#34;&gt;http://philipwalton.com/articles/extending-styles/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This blog post is an extension of &lt;a href=&#34;http://simurai.com/blog/2015/05/11/nesting-components/&#34;&gt;&amp;ldquo;Nesting Components by @samurai&amp;rdquo;&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/philwalton&#34;&gt;Philip Walton&lt;/a&gt; comes with his thoughts about nested components. So good!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do you really need another grid system?</title>
      <link>https://pawelgrzybek.com/do-you-really-need-another-grid-system/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/do-you-really-need-another-grid-system/</guid>
      <description>&lt;p&gt;Every single day I come across new grid systems. They all do the same job. Some of them are terribly ugly and difficult to use, some of them are fantastic and so powerful. Let me point what needs to be possible in good grid system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy to use&lt;/li&gt;
&lt;li&gt;using own markup&lt;/li&gt;
&lt;li&gt;nest grids&lt;/li&gt;
&lt;li&gt;reorder columns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the most important things for me is to use my own markup. I don’t want to use extra classes to describe my layout. It can be ugly and makes my markup so cluttered! Why do I have to use something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;post column small-6 medium-4 large-3 x-large-2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;post&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I need just:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;post&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sometimes we need to nest grids. Lets say we have a two columns and inside one of them we need well aligned gallery. Thats the case when grid nesting comes handy.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-05-09-1.jpg&#34;
  alt=&#34;Nestes grids&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;560&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;It is definitely not the best technique to place the most important content somewhere close to end of our html document. From SEO reasons is better to keep important things as close as possible. Correct me please if I’m wrong. What should we do if we have a sidebar on left hand side and main content div on right side? There is so many tricks to reorder content and we need to be able to do it as well. It&amp;rsquo;s not important only from SEO point of view. Having a better control and changing the order dependable of viewport is a main thing.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-05-09-2.jpg&#34;
  alt=&#34;Reordered columns inside grid system&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;560&#34;
/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;rows-and-columns&#34;&gt;Rows and columns &lt;a href=&#34;#rows-and-columns&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thats it! Every single grid system creates some rows and columns. Row wraps things together and column sets specific width to en element. With this information in mind lets have a look at bits of code below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;wrapper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;margin-left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;margin-right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;before&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;both&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thats the way how we create element that wraps columns together and keeps everything centered. We can adjust maximum width of that element and use any absolute or relative units to set maximum width up. Because we are going to use floating elements inside that div, &lt;a href=&#34;https://css-tricks.com/snippets/css/clear-fix/&#34;&gt;clearfix&lt;/a&gt; is necessary here. Lets have a look at second puzzle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;column&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;padding-left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;padding-right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Columns are straight forward. Floating of that element allows us to place columns next to each other. Padding on left and right hand side gives us a gutter between columns. Thing that we can customise here is width and gutter. Percentage based width value is best option to create fluid layouts. I like to have all my gutters equal, thats why I use paddings to create a gutters between columns.&lt;/p&gt;
&lt;h2 id=&#34;grid-system-via-two-sass-mixins&#34;&gt;Grid system via two SASS mixins &lt;a href=&#34;#grid-system-via-two-sass-mixins&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We know already the general idea behind every grid system. Lets convert our CSS snippets into SASS mixins.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Variables */&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$wrapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$gutter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/* Row */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;@mixin&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt; row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$inside&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;@if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$inside&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;margin-left&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gutter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;margin-right&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gutter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;@else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;margin-left&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;margin-right&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:before&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:after&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:after&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;both&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* Column */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;@mixin&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt; col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;percentage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;@if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$padding&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;padding-left&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gutter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;padding-right&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gutter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BOOM! Just two variables and two SASS mixins gives us a powerful tool to build grid based layouts. Instead of explaining how to use it, have a look at straight forward examples below. Have a look at the styles of each example to find helpful descriptions.&lt;/p&gt;
&lt;h3 id=&#34;easy-blog-layout&#34;&gt;Easy blog layout &lt;a href=&#34;#easy-blog-layout&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Standard blog layout with content area and sidebar. That is very easy one.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;two-columns-layout-with-nested-gallery&#34;&gt;Two columns layout with nested gallery &lt;a href=&#34;#two-columns-layout-with-nested-gallery&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First part of creating this layout is similar to example above. It&amp;rsquo;s more interesting with second grid that is nested inside on of the columns. Addition mixin argument (inside) used for nested gallery is necessary to reset extra padding.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;reordered-columns-inside-the-sass-grid-system&#34;&gt;Reordered columns inside the SASS grid system &lt;a href=&#34;#reordered-columns-inside-the-sass-grid-system&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To reorder columns, we need to add two very easy  and straight forward mixins. Have a look at the bit of code below. Easy like that!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;k&#34;&gt;@mixin&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt; push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;percentage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;@mixin&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt; pull&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;percentage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;do-you-really-need-another-grid-system&#34;&gt;Do you really need another grid system? &lt;a href=&#34;#do-you-really-need-another-grid-system&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No, you don’t. By the way - use flexbox instead!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 April</title>
      <link>https://pawelgrzybek.com/top-picks-2015-april/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-april/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-the-webp-image-format-and-why-does-it-matter&#34;&gt;What is the WebP Image Format (And Why Does It Matter)? &lt;a href=&#34;#what-is-the-webp-image-format-and-why-does-it-matter&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sitepoint.com/webp-image-format/&#34;&gt;http://www.sitepoint.com/webp-image-format/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nice introduction into WebP image format. Everything is looking amazing but it is going to be another thing to care about to provide cross browser user experience.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bem-101&#34;&gt;BEM 101 &lt;a href=&#34;#bem-101&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/bem-101/&#34;&gt;https://css-tricks.com/bem-101/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m big fan of BEM methodology. This post go through the idea behind it. Another part of very valuable article you can find in comments section. It’s a nice debate between BEM lovers and ugly syntax haters. I love it, I use it, it helps me to keep my projects well organised accordingly to my modules.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;command-line-power-user&#34;&gt;Command Line Power User &lt;a href=&#34;#command-line-power-user&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://commandlinepoweruser.com/&#34;&gt;http://commandlinepoweruser.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wes Bos, Front End Developer and author of fantastic book “Sublime Text Power User” created another amazing thing. Series of 11 videos to master your skills in command line. Totally for free. If you are one of this dudes that is always scared of Terminal just watch it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;loading-css-without-blocking-render&#34;&gt;Loading CSS without blocking render &lt;a href=&#34;#loading-css-without-blocking-render&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://keithclark.co.uk/articles/loading-css-without-blocking-render/&#34;&gt;http://keithclark.co.uk/articles/loading-css-without-blocking-render/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of the major things to quick deliver content on your website is to prevent blocking page rendering by asynchronously downloading stylesheets. Keith Clark shows us very easy method to implement that on our projects.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wordpress-functionality-plugins&#34;&gt;WordPress Functionality Plugins &lt;a href=&#34;#wordpress-functionality-plugins&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/wordpress-functionality-plugins/&#34;&gt;https://css-tricks.com/wordpress-functionality-plugins/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you would like to keep functionality on your Wordpress website simple and tidy, creating a functionality plugin can be an awesome idea.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-path-to-performance&#34;&gt;The Path to Performance &lt;a href=&#34;#the-path-to-performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://pathtoperf.com/&#34;&gt;http://pathtoperf.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New podcast hosted by Tim Kadlec and Katie Kovalcin. All about performance of web projects. Really cool stuff!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;9-squares&#34;&gt;9 squares &lt;a href=&#34;#9-squares&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://9-squares.tumblr.com/&#34;&gt;http://9-squares.tumblr.com/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each designer creates an abstract, 350px, 3 second animated square to make up a single GIF loop, from a 4-colour palette.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;paying-for-type&#34;&gt;Paying for type &lt;a href=&#34;#paying-for-type&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/dear-design-student/paying-for-type-7d77a5c18c97&#34;&gt;https://medium.com/dear-design-student/paying-for-type-7d77a5c18c97&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Type Manager at Typekit Tim Brown is going to explain “why cheap is expensive”. Amazing read about difference between good and poor type.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-reasons-why-bpg-will-eventually-replace-jpeg&#34;&gt;5 Reasons Why BPG Will Eventually Replace JPEG &lt;a href=&#34;#5-reasons-why-bpg-will-eventually-replace-jpeg&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.jpegmini.com/5-reasons-why-bpg-will-eventually-replace-jpeg/&#34;&gt;http://blog.jpegmini.com/5-reasons-why-bpg-will-eventually-replace-jpeg/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another one that is trying to compete with old .jpg.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;browser-rendering-optimization---building-60-fps-web-apps&#34;&gt;Browser Rendering Optimization - Building 60 FPS Web Apps &lt;a href=&#34;#browser-rendering-optimization---building-60-fps-web-apps&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.udacity.com/course/ud860&#34;&gt;https://www.udacity.com/course/ud860&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google performance guru Paul Lewis is here to help you destroy junk and create web apps that maintain 60 frames per second performance.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;first-aid-git&#34;&gt;First Aid Git &lt;a href=&#34;#first-aid-git&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://ricardofilipe.com/projects/firstaidgit/#/&#34;&gt;http://ricardofilipe.com/projects/firstaidgit/#/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nice combination of very often googled git commands. Personally I use some of this things from time to time and I always google that stuff. Here we have all this superb commands in one place.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chaining-multiple-blend-modes&#34;&gt;Chaining Multiple Blend Modes &lt;a href=&#34;#chaining-multiple-blend-modes&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/chaining-multiple-blend-modes/&#34;&gt;https://css-tricks.com/chaining-multiple-blend-modes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Awesome trick with blend modes applied on multiple backgrounds. Pure CSS is starting to be fantastic designing tool, not just styling language.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;google-says-there-are-47-more-mobile-friendly-websites-today-than-two-months-ago&#34;&gt;Google Says There Are 4.7% More Mobile-Friendly Websites Today Than Two Months Ago &lt;a href=&#34;#google-says-there-are-47-more-mobile-friendly-websites-today-than-two-months-ago&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://searchengineland.com/google-says-there-are-4-7-more-mobile-friendly-web-sites-today-than-two-months-ago-219487&#34;&gt;http://searchengineland.com/google-says-there-are-4-7-more-mobile-friendly-web-sites-today-than-two-months-ago-219487&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hopefully we are going to see more and more mobile friendly websites very soon. I’m so happy that Google rolled out Mobile Friendly Update (Mobilegeddon) recently.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;your-password-is-too-damn-short&#34;&gt;Your Password is Too Damn Short &lt;a href=&#34;#your-password-is-too-damn-short&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.codinghorror.com/your-password-is-too-damn-short/&#34;&gt;http://blog.codinghorror.com/your-password-is-too-damn-short/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One more time about importance of strong passwords. Do yourself a favour and change your password to stronger and longer.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;erik-spiekermann---typographer--graphic-designer-apartment--studio-berlin&#34;&gt;Erik Spiekermann - Typographer &amp;amp; Graphic Designer, Apartment &amp;amp; Studio, Berlin &lt;a href=&#34;#erik-spiekermann---typographer--graphic-designer-apartment--studio-berlin&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.freundevonfreunden.com/interviews/erik-spiekermann/&#34;&gt;http://www.freundevonfreunden.com/interviews/erik-spiekermann/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Awesome read about one of the most recognisable typographer ever - Erik Spiekermann. Many interesting facts from his life and tons of beautiful photos of his workspace. By the way - font that I use on my website is designed by this man :)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;libsass-320&#34;&gt;Libsass 3.2.0 &lt;a href=&#34;#libsass-320&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sass/libsass/releases/tag/3.2.0&#34;&gt;https://github.com/sass/libsass/releases/tag/3.2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For me that is the best news of this month. With this release 97% features of Ruby Sass are covered.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ttl-podcast&#34;&gt;TTL Podcast &lt;a href=&#34;#ttl-podcast&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://ttlpodcast.com/&#34;&gt;http://ttlpodcast.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New podcast that is worth to follow. After listening two available for now episodes I already added it to my RSS. Quality stuff!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cyclomatic-complexity-by-cds-wizard&#34;&gt;Cyclomatic complexity by CDs wizard &lt;a href=&#34;#cyclomatic-complexity-by-cds-wizard&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://csswizardry.com/2015/04/cyclomatic-complexity-logic-in-css/&#34;&gt;http://csswizardry.com/2015/04/cyclomatic-complexity-logic-in-css/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Harry again. Everything that you need to know about deep nesting selectors in CSS and why should you avoid it. Great read!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keep Sublime Text Snippets organized</title>
      <link>https://pawelgrzybek.com/keep-sublime-text-snippets-organized/</link>
      <pubDate>Sun, 26 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/keep-sublime-text-snippets-organized/</guid>
      <description>&lt;p&gt;As a developer in big digital agency I spend most of my day with my code editor. I tried to use many different applications but I ended up with &lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;Sublime Text&lt;/a&gt; and I love it. I always look for some useful tricks and tips that saves myself from tedious tasks. One of this things is definitely core feature of Sublime Text - snippets. Let me show you how I use it and how does it speed my workflow up.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Snippets are smart templates that will insert text for you and adapt it to their context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;gists-vs-sublime-snippets&#34;&gt;Gists vs Sublime Snippets &lt;a href=&#34;#gists-vs-sublime-snippets&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is so many web services and applications to save code bits. This feature is build in most of the code editors as well. I tested some of them and the only two methods that I can recommend are &lt;a href=&#34;http://docs.sublimetext.info/en/latest/extensibility/snippets.html&#34;&gt;native snippets&lt;/a&gt; build into Sublime Text and &lt;a href=&#34;https://gist.github.com/&#34;&gt;Gist by Github&lt;/a&gt;. Rest of them are not working well for me. Opening a different application or new browser window in the middle of script isn&amp;rsquo;t something that we need. Snippets should be easily accessible and quick to implement.&lt;/p&gt;
&lt;p&gt;The biggest advantage of GitHub snippets is awesome community, power of version control and ability to exchange comments about your collection. To manage your gists collection I highly recommend &lt;a href=&#34;http://www.gistboxapp.com/&#34;&gt;Gistbox&lt;/a&gt; by Rui Yang. To use it with Sublime Text without leaving editor window just install a plugin called &lt;a href=&#34;https://github.com/condemil/Gist&#34;&gt;Gist&lt;/a&gt;. Constant access to one snippets collection from many computers is another cool thing about it.&lt;/p&gt;
&lt;p&gt;Despite all this cool things that Gist brings on the table I choose to use &lt;a href=&#34;http://docs.sublimetext.info/en/latest/extensibility/snippets.html&#34;&gt;native snippets&lt;/a&gt; feature. If you have never worked with Sublime Text Snippets before, I recommend to read this easy to follow &lt;a href=&#34;http://www.hongkiat.com/blog/sublime-code-snippets/&#34;&gt;article on Hongkiat blog&lt;/a&gt;. Simple XML files with .sublime-snippet extension live in ‘Packages’ folder. Clever idea is to create a separated directory inside ‘User’ folder for our reusable bits of code. Dropbox can help us to sync all snippets and settings across many devices. Very detailed instruction how to set syncing up is available on &lt;a href=&#34;https://packagecontrol.io/docs/syncing&#34;&gt;Package Control website&lt;/a&gt;. Let’s have a look at some random snippet from my collection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;snippet&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;content&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  http://lorempixel.com/${1:600}/${2:400}/abstract/
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  ]]&amp;gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;tabTrigger&amp;gt;&lt;/span&gt;lorempixel&lt;span class=&#34;nt&#34;&gt;&amp;lt;/tabTrigger&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;other - lorem pixel&lt;span class=&#34;nt&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/snippet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The idea is to create reusable element of a code between &lt;code&gt;&amp;lt;![CDATA[&lt;/code&gt; and &lt;code&gt;]]&amp;gt;&lt;/code&gt;. Placeholders inside a snippets is the reason why I like it so much. After choosing a snippet we can easily navigate via Tab key through predefined placeholders. We can assign to them default values. On example above you can see two placeholders &lt;code&gt;${1:600}&lt;/code&gt; and &lt;code&gt;${2:400}&lt;/code&gt;. If you would like to get a literal $ (for example inside some jQuery snippet), you have to escape it like this: &lt;code&gt;\$&lt;/code&gt;. &lt;code&gt;tabTrigger&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; makes your snippet accessible via keyboard shortcut or select option inside Command Palette (Cmd + Shift + P). I don&amp;rsquo;t use &lt;code&gt;scope&lt;/code&gt; at all because I want to have an access to my entire library regardless of file type that I&amp;rsquo;m working with.&lt;/p&gt;
&lt;h2 id=&#34;how-i-keep-it-organized&#34;&gt;How I keep it organized? &lt;a href=&#34;#how-i-keep-it-organized&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a while of saving all useful lines of codes you can easily end up with hundreds of snippets. Thats why it’s important to have any strategy to categories these files. I do it via description tag. Let’s have a look at this bit of code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;php - wp - acf - flexible content&lt;span class=&#34;nt&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This line of code tells me that this is a php code, WordPress specific. ACF stands for &lt;a href=&#34;http://www.advancedcustomfields.com/&#34;&gt;Advanced Custom Fields&lt;/a&gt; - one of my favourite Wordpress plugins. Keeping that simple naming convention helps me to filter my snippets so much! For example that&amp;rsquo;s how looks like snippets structure for all my javaScript files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;js
- js - jquery
- - js - jquery - ajax
- js - ga
- js - modernizr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please let me know in a comments how do you approach this subject and what tools do you use to manage your snippets.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to stay informed in web development game</title>
      <link>https://pawelgrzybek.com/how-to-stay-informed-in-web-development-game/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/how-to-stay-informed-in-web-development-game/</guid>
      <description>&lt;p&gt;To stay on top of the web development and web design game you need to follow. It is so changeable industry. There is many sources of information, hundreds developers to follow, youtube videos and twitter accounts. Thats the problem. If you start to follow entire market, probably you will end up in endless loop of checking what’s funky and fresh but without any time left for yourself, your partner, cycling, beer, whatever.&lt;/p&gt;
&lt;h2 id=&#34;love-what-you-do&#34;&gt;Love what you do &lt;a href=&#34;#love-what-you-do&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you don’t like things that you do just change a profession. Do it NOW! If you don’t enjoy to learn new stuff internet definitely isn’t for you.&lt;/p&gt;
&lt;h2 id=&#34;twitter&#34;&gt;Twitter &lt;a href=&#34;#twitter&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Twitter is a fantastic place where you can find much more than cat’s photos (don&amp;rsquo;t get me wrong - I love cats). Just follow right people. Don’t follow any human being who posted article with tag #webdesign couple of years ago. Find your interests, inspirations, frameworks that you love. Contribute, ask questions and retweet good things.&lt;/p&gt;
&lt;h2 id=&#34;rss&#34;&gt;RSS &lt;a href=&#34;#rss&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some people says that RSS is a dying technology. Just delete that blokes from your Facebook! There is plethora of amazing startup that use it and day by day more people who rely on RSS feeds. Personally I use free &lt;a href=&#34;http://feedly.com/i/welcome&#34;&gt;Feedly.com&lt;/a&gt; but it’s much more of services like that. Just add your favourite services, newspapers, magazines and blogs and enjoy fresh new content in one place. To browse my Feedly account I use beautiful &lt;a href=&#34;http://reederapp.com/&#34;&gt;Reeder by Silvio Rizzi&lt;/a&gt;. I use OS X and iOS version - I love it and can’t wait third version of that app.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-04-16-1.jpg&#34;
  alt=&#34;Reeder for Mac OS X&#34;
  loading=&#34;lazy&#34;
  width=&#34;1400&#34;
  height=&#34;845&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Follow right people, same like on Twitter. Don’t follow every website about web design that you come across. Be focus on right things and leave a space in your daily routine for yourself (friends, music, girlfriend/boyfriend, wife/husband, cat/dog, beer). As a ending point let me share with you some of my favourite blogs that you can add to your RSS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sitepoint.com/&#34;&gt;sitepoint.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.andismith.com/&#34;&gt;andismith.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/&#34;&gt;css-tricks.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://daverupert.com/&#34;&gt;daverupert.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://davidwalsh.name/&#34;&gt;davidwalsh.name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elliotjaystocks.com/&#34;&gt;elliotjaystocks.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hugogiraudel.com/&#34;&gt;hugogiraudel.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattgemmell.com/&#34;&gt;mattgemmell.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.paulirish.com/&#34;&gt;paulirish.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sarasoueidan.com/&#34;&gt;sarasoueidan.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://alistapart.com/&#34;&gt;alistapart.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.smashingmagazine.com/&#34;&gt;smashingmagazine.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://timkadlec.com/&#34;&gt;timkadlec.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesbos.com/&#34;&gt;wesbos.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jekyll blog on Github Pages supercharged by CloudFlare</title>
      <link>https://pawelgrzybek.com/jekyll-blog-on-github-pages-supercharged-by-cloudflare/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/jekyll-blog-on-github-pages-supercharged-by-cloudflare/</guid>
      <description>&lt;p&gt;On daily basis I work a lot with Wordpress. In the company that I work for we build cool looking websites for clients that are not necessarily very familiar with technology behind it. It is fantastic tool, with easy to grasp backend and almost endless possibilities. Wordpress was a first thing that came to my mind when I decided to build my own blog. After a quick research I found out that it is many tools that better suits my simple text based blog than Wordpress. Node.js based &lt;a href=&#34;https://ghost.org/&#34;&gt;Ghost&lt;/a&gt;, very popular &lt;a href=&#34;https://www.tumblr.com/&#34;&gt;Tumblr&lt;/a&gt; or Twitter’s founders &lt;a href=&#34;https://medium.com/&#34;&gt;Medium&lt;/a&gt;. Shortly we can expect a new kid on the block - &lt;a href=&#34;https://vimeo.com/117604881&#34;&gt;typed.com&lt;/a&gt;. All this tools are amazing but I wanted something even simpler and then I found a power of static sites generators.&lt;/p&gt;
&lt;p&gt;Idea of static site generators isn’t any new. As we can see &lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;on this website&lt;/a&gt; selection of static site generators isn’t small neither (today is 389 of them). One of the most popular one is &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; created by Github’s authors. It’s a first choice of many of my favourite bloggers so I decided to give it a try.&lt;/p&gt;
&lt;h2 id=&#34;why-jekyll&#34;&gt;Why Jekyll? &lt;a href=&#34;#why-jekyll&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Less stuff to care about, more time to do productive stuff. It doesn’t require database at all because all files are static. It doesn’t require advanced server with specific configuration because all files are .html documents. &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; lets you host your website directly from Github repository totally for free! Another good reason to use Github to store your files is constant version controlling (no more manual backups).&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started &lt;a href=&#34;#getting-started&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s no point to describe how to create your Jekyll blog because you can find fantastic documentation on &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;official website&lt;/a&gt;. It takes literally 3 minutes and everything that you need is Ruby and Node.js installed on your Linux or Mac computer. Windows isn’t officially supported platform however with few little tweaks you can run Jekyll on this platform as well (more information &lt;a href=&#34;https://jekyllrb.com/docs/windows/&#34;&gt;here&lt;/a&gt;). At this point let me quote Bryan Jones who answered a question on &lt;a href=&#34;https://codekitapp.com/help/faq/&#34;&gt;CodeKit FAQ&lt;/a&gt; page “I’m on Windows. What do you recommend I use to work with Less, Sass, etc?”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Mac.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hosting-jekyll-on-github-pages&#34;&gt;Hosting Jekyll on Github Pages &lt;a href=&#34;#hosting-jekyll-on-github-pages&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; to host your Jekyll website is fantastic idea. You can use it to host your personal or project website. Process of creating one is dead easy but you need to decide first what kind of website is that going to be. Procedure of creating a personal and project website is slightly different. To learn more about differences go to &lt;a href=&#34;https://pages.github.com/&#34;&gt;official website&lt;/a&gt; where you can find illustrated tutorial. I will go through process of creating personal website.&lt;/p&gt;
&lt;p&gt;The only thing that you need to do is create a Github repository for your project. One requirement here is to use specific pattern to name your repo - githubusername.github.io. My Github username is &lt;code&gt;pawelgrzybek&lt;/code&gt; so name of my repository is &lt;a href=&#34;https://github.com/pawelgrzybek/jekyll-pawelgrzybek&#34;&gt;pawelgrzybek.github.io&lt;/a&gt;. Then push your Jekyll project to this repository. Make sure you have “_site” inside your .gitignore file. Thats the trick - you use repository for your source files and output is automatically generated in the background. After pushing your changes it takes literally few seconds to see your website live under &lt;a href=&#34;http://githubusername.github.io&#34;&gt;http://githubusername.github.io&lt;/a&gt;. Yeah, easy like that :)&lt;/p&gt;
&lt;h2 id=&#34;using-custom-domain-for-your-jekyll-website&#34;&gt;Using custom domain for your Jekyll website &lt;a href=&#34;#using-custom-domain-for-your-jekyll-website&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is another very easy process. Add to your repository CNAME file (without any extension) and inside just put your desirable domain. For example, use mydomain.com (without protocol). Don’t forgot to push your new file to your repo.&lt;/p&gt;
&lt;p&gt;Next step is to do changes on your domain name settings. Log in to your domain’s provider website and inside DNS settings you need to add two A records.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.30.252.153
192.30.252.154
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On Github Pages documentation you can find this &lt;a href=&#34;https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/#configuring-an-a-record-with-your-dns-provider&#34;&gt;process described more in depth&lt;/a&gt; but let me show you a better option…&lt;/p&gt;
&lt;h2 id=&#34;cloudflare-with-jekyll-blog-hosted-on-github-pages&#34;&gt;CloudFlare with Jekyll blog hosted on Github Pages &lt;a href=&#34;#cloudflare-with-jekyll-blog-hosted-on-github-pages&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First thing first let me introduce you what &lt;a href=&#34;https://www.cloudflare.com&#34;&gt;CloudFlare&lt;/a&gt; is. This is an information that you can find on their website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We automatically optimize the delivery of your web pages so your visitors get the fastest page load times and best performance. The result: CloudFlare-powered websites see a significant improvement in performance and a decrease in spam and other attacks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They didn’t lie. Don’t be scared of terms like “Compare plans” or “Pricing” on their website, because all we need is Free account. Create one now!&lt;/p&gt;
&lt;p&gt;Time to add our website to our account. Go to Websites page and type your domain name (this one that you placed inside your CNAME file) and hit big green button “Add website”. After initial scan click big button “Continue setup”. Now the tricky bit! Add two CNAME records. Name of first one is your domain name (the same as in CNAME file in your Github repository). Name of a second one is “www” (this one redirects &lt;a href=&#34;http://www.mydomain.com&#34;&gt;www.mydomain.com&lt;/a&gt; to mydomain.com). Alias for both is: githubusername.github.io (in my case githubusername.github.io). Have a look on screen shoot of my DNS settings.&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-04-06-1.jpg&#34;
  alt=&#34;CloudFlare Settings&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;164&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;But hola, wait a second! Why the hell did we set two CNAME records if we can clearly see on Github Pages documentation we should create two A records? Since March 31 2014 CloudFlare is using something called CNAME Flattening. Basically it presents a CNAME as an A record. You can read more about this feature in on &lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200169056-CNAME-Flattening-RFC-compliant-support-for-CNAME-at-the-root&#34;&gt;CloudFlare support page&lt;/a&gt;. On this stage feel free to add more records if you need to. For example MX records to use email accounts with your custom domain. If all records are in the place click green button “I’m done entering my DNS records”.&lt;/p&gt;
&lt;p&gt;On next screen just choose a Free plan, leave rest of the setting as they are and go to a next step. Time to change name servers on your domain’s provider website. This process may vary dependable of your provider. Read the FAQ section or contact the support if you struggle to do that. That how it looks like on backend of my domain’s provider:&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://pawelgrzybek.com/photos/2015-04-06-2.jpg&#34;
  alt=&#34;Domain&amp;amp;rsquo;s DNS settings&#34;
  loading=&#34;lazy&#34;
  width=&#34;700&#34;
  height=&#34;317&#34;
/&gt;
&lt;/p&gt;
&lt;p&gt;Once updated, return to this CloudFlare and go to next step. This process can take up to 24 hours but normally it’s ready to go after less than 5 minutes. Be patient.&lt;/p&gt;
&lt;p&gt;BOOM! At this point when you go to your domain you should see your Jekyll project live! But don’t close the CloudFlare tab yet cause we need to adjust some settings. Go to Websites -&amp;gt; mydomian.com -&amp;gt; CloudFlare settings. Navigate to Performance Settings and change Caching level to Aggressive, Minimum expire TTL to 1month and tick js, css and html under Auto Minify settings. You can adjust tons of more advanced settings here but this is good enough to just start blogging and enjoying well optimised website.&lt;/p&gt;
&lt;h2 id=&#34;helpful-resources&#34;&gt;Helpful resources &lt;a href=&#34;#helpful-resources&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I did struggle with few minor things during building my website but google.com helped me a lot to solve all issues. The main website that helped me a lot is &lt;a href=&#34;http://davidensinger.com/&#34;&gt;David Ensinger’s blog&lt;/a&gt;. I really recommend to follow David’s blog or &lt;a href=&#34;https://twitter.com/DavidEnsinger&#34;&gt;himself on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it guys. I’m really glad I learned how to use Jekyll and I’m more than sure I will use this tool on many projects. Feel free to check the source code of my blog on &lt;a href=&#34;https://github.com/pawelgrzybek/jekyll-pawelgrzybek&#34;&gt;Github repository&lt;/a&gt;. That can be amazing alternative to globally overused Wordpress when you create a blog, portfolio or simple static website. If you have any question just use a comments below and I’ll be more than happy to help you whenever I’m able to do so.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top picks — 2015 March</title>
      <link>https://pawelgrzybek.com/top-picks-2015-march/</link>
      <pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/top-picks-2015-march/</guid>
      <description>&lt;p&gt;Internet is full of interesting, useful or funny things. I would like to share with you my top picks from this month.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;frontend-guidelines&#34;&gt;Frontend Guidelines &lt;a href=&#34;#frontend-guidelines&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bendc/frontend-guidelines&#34;&gt;https://github.com/bendc/frontend-guidelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fantastic collection of useful HTML/CSS/JavaScript snippets. Every example is well described. It is a good lesson for beginners and advanced web designers and developers.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;harnessing-flexbox-for-todays-web-apps&#34;&gt;Harnessing Flexbox For Today’s Web Apps &lt;a href=&#34;#harnessing-flexbox-for-todays-web-apps&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2015/03/02/harnessing-flexbox-for-todays-web-apps/&#34;&gt;Harnessing Flexbox For Today’s Web Apps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article that provides us examples when and how can we use Flexbox layout model in daily routine. Thats the near future of CSS box model.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sublime-text-power-user-talk&#34;&gt;Sublime Text Power User Talk &lt;a href=&#34;#sublime-text-power-user-talk&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://youtu.be/_zNhqUnBfis&#34;&gt;http://youtu.be/_zNhqUnBfis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wes Bos is an author of book titled “Sublime Text Power User”. If you don’t have this book, now you have opportunity to grasp majority of this book in this 62 min video. We work with code everyday and your code editor is your tool - master it!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;side-effects-in-css&#34;&gt;Side effects in CSS &lt;a href=&#34;#side-effects-in-css&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://philipwalton.com/articles/side-effects-in-css/&#34;&gt;http://philipwalton.com/articles/side-effects-in-css/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why CSS is one of the most tricky languages in programming  world? Philip Walton answers that question and gives us good advices how can we make our stylesheets better.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-does-my-site-cost&#34;&gt;What Does My Site Cost? &lt;a href=&#34;#what-does-my-site-cost&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://whatdoesmysitecost.com/&#34;&gt;http://whatdoesmysitecost.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Find out how much it costs for someone to use your site on mobile networks around the world. If you would like to know more about this tool check the author’s blog post &lt;a href=&#34;http://timkadlec.com/2015/03/what-your-site-costs/&#34;&gt;http://timkadlec.com/2015/03/what-your-site-costs/&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;break-up-with-internet-explorer-8&#34;&gt;Break up with Internet Explorer 8 &lt;a href=&#34;#break-up-with-internet-explorer-8&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://breakupwithie8.com/&#34;&gt;http://breakupwithie8.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don’t know who created this website, but I like him/her. Why is it worth to end up the romance with IE8 and how people express their happiness after leaving this ancient browser…&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;animation-timeline-in-chrome-devtools---coming-soon&#34;&gt;Animation Timeline in Chrome DevTools - coming soon &lt;a href=&#34;#animation-timeline-in-chrome-devtools---coming-soon&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/U9xfYbKxosI&#34;&gt;https://youtu.be/U9xfYbKxosI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Few days ago Paul Irish (Front-End Developer in Google) posted on youtube a video about upcoming new feature - Animation Timeline in Google Chrome. It is looking very good and will be very useful for myself. I can’t wait!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;svg-is-for-everybody&#34;&gt;SVG is for Everybody &lt;a href=&#34;#svg-is-for-everybody&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/w83XRCkMtHQ&#34;&gt;https://youtu.be/w83XRCkMtHQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chris Coyier (author of CSS-Tricks and Codeine.io) says: “This is a year of SVG”. Fantastic talk from BlendConf about SVG. So cool!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;usb-type-c-explained&#34;&gt;USB Type-C: Explained! &lt;a href=&#34;#usb-type-c-explained&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/ZrZISyPucMg&#34;&gt;https://youtu.be/ZrZISyPucMg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Probably you already know that Apple recently announced a new generation of MacBooks. They are thin, they are light and super sexy but it’s something strange on this computers! Only one port, and this port is not power cable port, it’s not USB to plug in your flash drive, it’s not Thunderbolt to plug in your external monitor. Is is USB-C. What it does? Everything! &lt;a href=&#34;https://twitter.com/mkbhd&#34;&gt;Marques Brownlee&lt;/a&gt; on his amazing youtube channel better explains idea behind new USB type C.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-good-reasons-to-use-sketch-app&#34;&gt;3 Good Reasons To Use Sketch App &lt;a href=&#34;#3-good-reasons-to-use-sketch-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sitepoint.com/3-reasons-use-sketch-app/&#34;&gt;http://www.sitepoint.com/3-reasons-use-sketch-app/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m a big fan of Sketch App. Photoshop is amazing tool for photo editing, but very difficult to design things. I liked more Fireworks but Adobe decided to leave that app. If you have never heard about Sketch App I recommend give it a try.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;strategies-for-staying-on-top-of-web-performance&#34;&gt;Strategies for Staying on Top of Web Performance &lt;a href=&#34;#strategies-for-staying-on-top-of-web-performance&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/strategies-for-staying-on-top-of-web-performance/&#34;&gt;https://css-tricks.com/strategies-for-staying-on-top-of-web-performance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Your website can be the most amazing website, but if it doesn’t load quick enough you can forgot about heavy traffic (especially mobile users). Thats why term “Performance Budget” is so popular recently. Chris Coyier as always serves us amazing ideas how can we improve this part of our website. I recommend to watch 3 videos on very bottom of this article as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;epic-favicon-generator&#34;&gt;Epic Favicon Generator &lt;a href=&#34;#epic-favicon-generator&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://epicfavicongenerator.com/&#34;&gt;https://epicfavicongenerator.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two favicon sizes are not enough for sure. This tool can help you to generate all popular sizes of favicons. The only thing that you need is source file that is minimum 310 x 310px.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-user-is-drunk&#34;&gt;The user is drunk &lt;a href=&#34;#the-user-is-drunk&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://theuserisdrunk.com/&#34;&gt;http://theuserisdrunk.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A ha ha ha. This is a real user experience test of your website.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;made-by-chris-coyier-codepen&#34;&gt;Made By: Chris Coyier (CodePen) &lt;a href=&#34;#made-by-chris-coyier-codepen&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/kRmbVOI6oIM&#34;&gt;https://youtu.be/kRmbVOI6oIM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Whenever you try to google something about CSS I bet you can find it on one of Chris Coyier websites. Author of CSS Tricks and CodePen, massive inspiration and so kind personality.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;address-schema-generator&#34;&gt;Address Schema Generator &lt;a href=&#34;#address-schema-generator&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://addressschema.com/&#34;&gt;https://addressschema.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is always a pain for me to use schema markup. I don’t work with it very often so I need to constantly look for things in documentation. This tool makes my life way easier! Follow this guys on twitter cause they do lots of good stuff &lt;a href=&#34;https://twitter.com/bcco&#34;&gt;@bcco&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My web development setup</title>
      <link>https://pawelgrzybek.com/my-web-development-setup/</link>
      <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/my-web-development-setup/</guid>
      <description>&lt;p&gt;Improving my workflow is an endless story. I always look for some new tools and new tricks that can speed my workflow up. I confirm that now I’m pretty happy with my current set of stuff that I use in my daily routine. I just bought a new MacBook so I’m in the process of installing necessary tools and adjusting all settings. I thought that is a nice opportunity to write a blog post about it.&lt;/p&gt;
&lt;p&gt;I split this blog post into three sections: Hardware, Software and Web Services. Hopefully you are going to enjoy it. If you use something that could be beneficial for me or other readers, feel free to post about it in the comments.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;hardware&#34;&gt;Hardware &lt;a href=&#34;#hardware&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;mac-mini-late-2012&#34;&gt;Mac mini (Late 2012) &lt;a href=&#34;#mac-mini-late-2012&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is my main computer. The full spec is: 2.6 GHz Intel Core i7, 16 GB 1600 MHz DDR3, Intel HD Graphics 4000 1024 MB and 1TB Fusion Drive. I use it with external monitor Dell U2711. I can’t imagine my life without Apple Wireless Keyboard and Magic Mouse connected to it.&lt;/p&gt;
&lt;h3 id=&#34;macbook-pro-with-retina-display-early-2015&#34;&gt;MacBook Pro with Retina display (Early 2015) &lt;a href=&#34;#macbook-pro-with-retina-display-early-2015&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I travel a lot recently, and every single time when I’m not able to use decent computer, I need one. Thats why I bought recently upgraded MacBook Pro with Force Touch. Full spec is: 3.1GHz Dual-core Intel Core i7, 16GB 1866MHz LPDDR3 SDRAM, Intel Iris Graphics 6100 and 128GB PCIe-based Flash Storage. New force touch is very nice!&lt;/p&gt;
&lt;h3 id=&#34;iphone-6&#34;&gt;iPhone 6 &lt;a href=&#34;#iphone-6&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I can’t imagine myself without my iPhone. I really tried to use different  devices but for me it seems to be more complicated that it needs to be. Calls, messages, RSS feeds and Instagram :-) is all I need.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;software&#34;&gt;Software &lt;a href=&#34;#software&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;1-password&#34;&gt;1 Password &lt;a href=&#34;#1-password&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is my ‘must have’ app. I install this app as a first one on my fresh OS. Without it my internet life doesn’t exist. I care about security. I don’t use passwords like “qwerty123” or “pawel456”. Every single password that I use across the internet is different, it’s minimum 15 characters long and means absolutely nothing. It is just a combination of random glyphs that normal human being is not able to remember. Of course I don’t remember it neither, I do not write it down or keep in text file on my dropbox. &lt;a href=&#34;https://agilebits.com/onepassword&#34;&gt;1Password&lt;/a&gt; is my security manager. The only thing that I need to remember is one master password to have an access to all my encrypted and synced via iCloud passwords - easy like that. Combined with iOS version and browsers extensions this app is my number one all the time!&lt;/p&gt;
&lt;h3 id=&#34;iterm-2&#34;&gt;iTerm 2 &lt;a href=&#34;#iterm-2&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m Command Line heavy user. I don’t mind Terminal that Mac OS X comes with, but &lt;a href=&#34;http://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; is much more powerful. It gives you an access to use lots of features that don’t exist in default Terminal.&lt;/p&gt;
&lt;h3 id=&#34;sublime-text&#34;&gt;Sublime Text &lt;a href=&#34;#sublime-text&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My journey through code editors was long and difficult but I’m finally there. &lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;Sublime Text&lt;/a&gt; is my code editor of choice. Because it is my main tool that I use to pay my bills I did master it. It comes as a plain text editor but power of this app is in settings and available plugins. I would like to share with you my personal settings that I use and list of my plugins.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;bold_folder_labels&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;caret_extra_width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;caret_style&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;phase&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;color_scheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Packages/User/SublimeLinter/base16-ocean.dark (SL).tmTheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;detect_indentation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;draw_minimap_border&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;folder_exclude_patterns&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;.sass-cache&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;.git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;node_modules&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;font_face&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Source Code Pro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;font_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;no_round&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;font_size&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;highlight_line&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;highlight_modified_tabs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;ignored_packages&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Vintage&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;indent_guide_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;draw_normal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;draw_active&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;line_padding_bottom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;line_padding_top&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;rulers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;tab_size&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;theme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Spacegray.sublime-theme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;translate_tabs_to_spaces&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;trim_trailing_white_space_on_save&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;word_wrap&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;package-control&#34;&gt;Package Control &lt;a href=&#34;#package-control&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Name is self descriptive. It lets you install, uninstall or update your extensions in very user friendly way. More about it on &lt;a href=&#34;https://packagecontrol.io/&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;autofilename&#34;&gt;AutoFileName &lt;a href=&#34;#autofilename&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Whenever you need to pass a path to file you need to type it manually. With this plugin you have a hints that can speed this process up a bit.&lt;/p&gt;
&lt;h4 id=&#34;brackethighlighter&#34;&gt;BracketHighlighter &lt;a href=&#34;#brackethighlighter&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It shows the boundaries of block of code that you currently working on. So helpful especially when you are working on a chunky bit of code that doesn’t fit on one screen.&lt;/p&gt;
&lt;h4 id=&#34;color-highlighter&#34;&gt;Color Highlighter &lt;a href=&#34;#color-highlighter&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Whenever you use a colour value in your CSS stylesheet this plugin underlines it with border in appropriate colour. So small but helpful. It is working fine with SASS by taking colors values from variables.&lt;/p&gt;
&lt;h4 id=&#34;emmet&#34;&gt;Emmet &lt;a href=&#34;#emmet&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is probably one of my favourite plugins of all the time. Creating a HTML markup with this tool takes a seconds. It comes very handy in CSS as well (tons of intuitive shortcuts). Have a look on &lt;a href=&#34;http://emmet.io/&#34;&gt;official documentation&lt;/a&gt;. It is available for majority of popular code editors. You can use power of Emmet in some web tools like CodePen.io or Sassmeister.&lt;/p&gt;
&lt;h4 id=&#34;gitgutter&#34;&gt;GitGutter &lt;a href=&#34;#gitgutter&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you use Git Version Control this small plugin show you in the sidebar differences between current version and last commit.&lt;/p&gt;
&lt;h4 id=&#34;scss&#34;&gt;SCSS &lt;a href=&#34;#scss&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Sublime Text doesn’t understand SCSS syntax. This plugin adds a syntax highlighting for your SCSS files. It doesn&amp;rsquo;t work excellent (especially with some new features in CSS) but it does the job. If you use something better than this, please let me know in comments.&lt;/p&gt;
&lt;h4 id=&#34;sftp&#34;&gt;SFTP &lt;a href=&#34;#sftp&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I don’t work directly on FTP that much anymore, but sometimes it happens. Applications like Adobe Dreamweaver or Panic Coda have a FTP client build into app core. This plugin is essentially FTP client for Sublime Text. It lets you work directly on live server or map your local directory with remote server and sync the changes.&lt;/p&gt;
&lt;h4 id=&#34;sidebarenhancements&#34;&gt;SideBarEnhancements &lt;a href=&#34;#sidebarenhancements&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When you right click on a file in sidebar you don’t have to many options. With this plugin after right click you can see much more options like “Copy name”, “Copy path” or the most frequently used by myself “Duplicate”.&lt;/p&gt;
&lt;h4 id=&#34;sublimelinter&#34;&gt;SublimeLinter &lt;a href=&#34;#sublimelinter&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is a core plugin for a whole family of different sub plugins. By itself it does’t do a lot, it is just a necessary bit that you need to install before using plugins like: SublimeLinter-jshint or SublimeLinter-php. This two are my linters of choice. Basically it is a code debugger. It debugs your code by indicating all errors in sidebar. When you hover over faulty line, it show you an error fault and gives you a hint how to fix it.&lt;/p&gt;
&lt;h4 id=&#34;theme---spacegray&#34;&gt;Theme - Spacegray &lt;a href=&#34;#theme---spacegray&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Something what is pretty cool in Sublime Text is fact that you can make it look exactly like you want. It’s very easy to create your own theme, but if you don’t feel it, you can use one of many amazing themes available on Package Control repository. &lt;a href=&#34;http://kkga.github.io/spacegray/&#34;&gt;Spacegray&lt;/a&gt; is my number one!&lt;/p&gt;
&lt;h3 id=&#34;mail-app&#34;&gt;Mail App &lt;a href=&#34;#mail-app&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m not that massive mail user. I receive mails mainly from Ebay, Amazon or Discogs :) Default Mail app is more than enough for me. I like how cool is working with iCloud account. I use additionally Gmail account but I manage it through the browser.&lt;/p&gt;
&lt;h3 id=&#34;reeder&#34;&gt;Reeder &lt;a href=&#34;#reeder&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m a little bit old school. I love RSS and I can’t imagine how internet could exist without it. I follow about 400 blogs and services across the web. &lt;a href=&#34;http://reederapp.com/mac/&#34;&gt;This beautiful application&lt;/a&gt; is the place where all this stuff are combined and served in beautiful, readable form. I’m a heavy user of both: OS X and iOS version.&lt;/p&gt;
&lt;h3 id=&#34;cleanmymac-2&#34;&gt;CleanMyMac 2 &lt;a href=&#34;#cleanmymac-2&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Your browser saves some cache files, your system generates some reports, many apps create tons of temporary files and all this crap exist somewhere in your Mac. After a while the amount of this files is much bigger than you can imagine. As you can guess CleanMyMac2 cleans your Mac :-) It looks for all the files that your OS can live without and delete them. Additionally you can remove some languages that are not applicable to you or schedule a reminder about next clean. One more thing. This application is one of the best designed app that I have ever seen. Amazing illustrations and smooth animations are really impressive.&lt;/p&gt;
&lt;h3 id=&#34;copyless&#34;&gt;CopyLess &lt;a href=&#34;#copyless&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Multiple clipboard. I can&amp;rsquo;t imagine work without it now. You just need to hit a global shortcut on your keyboard and pick from the list item that you would like to paste. Awesome tool!&lt;/p&gt;
&lt;h3 id=&#34;divvy&#34;&gt;Divvy &lt;a href=&#34;#divvy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I use it on both: 27 inch display connect to Mac Mini and 13 inch MacBook Pro. It helps to manage space on your desktop by positioning windows. Have a look on the &lt;a href=&#34;http://mizage.com/divvy/&#34;&gt;presentation video&lt;/a&gt; on official website. Really helpful utility in daily routine.&lt;/p&gt;
&lt;h3 id=&#34;things&#34;&gt;Things &lt;a href=&#34;#things&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is my favourite GTD app (get things done). Every single thing that comes to my mind and should be done anytime soon goes to this application. In combination with iOS version it helps me to do things.&lt;/p&gt;
&lt;h3 id=&#34;mamp&#34;&gt;MAMP &lt;a href=&#34;#mamp&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m not a backend developer but I work a lot with Wordpress. I prefer to work locally so to run PHP server locally I use this app. I do not lunch this app very often but definitely it is necessary part of my setup.&lt;/p&gt;
&lt;h3 id=&#34;sketch-3&#34;&gt;Sketch 3 &lt;a href=&#34;#sketch-3&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I use to be a massive Photoshop lover. I have never wondered that I could replace Photoshop by something else. Nowadays I design every single project in &lt;a href=&#34;http://bohemiancoding.com/sketch/&#34;&gt;Sketch by Bohemian Coding&lt;/a&gt;. When you work with this tool you know that this application has been made by developers and designers for developers and designers. It is not a best choice to do any photo retouch or image manipulation. This software is purely to create graphic interfaces of apps and websites. In the company where I work we still use Photoshop, and every single time when I need to do some work I struggle so much. Just give it a try and I promise you you will never come back to PS. It is way more faster, includes tons of features that you couldn’t find in Adobe’s app and it is way cheaper!&lt;/p&gt;
&lt;h3 id=&#34;ia-writter&#34;&gt;iA Writter &lt;a href=&#34;#ia-writter&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every single longer form of text that I do I create in this app. Support for Markdown, sync by iCloud and minimal design is all I need. Occasionally I use iOS version to do some quick amendments. Mobile version of this software is awesome as well.&lt;/p&gt;
&lt;h3 id=&#34;google-chrome-and-safari&#34;&gt;Google Chrome and Safari &lt;a href=&#34;#google-chrome-and-safari&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On daily basis I’m a Chrome user. I don’t mind Safari, it is very reliable app but in terms of debugging websites, Google product is definitely a my winner. The only extensions that I use are: 1Password, AddBlock Plus, Instapaper and Pinboard Tools.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;web-services&#34;&gt;Web services &lt;a href=&#34;#web-services&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;dropbox-and-copy&#34;&gt;Dropbox and Copy &lt;a href=&#34;#dropbox-and-copy&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both of this services I really like and both of them have own advantages and disadvantages. Dropbox is very popular and it’s incredibly fast compared to different services. The storage space isn’t enough unfortunately. Copy is incredibly cool. I have 200GB storage space on my account totally for free. Compared to Dropbox the sync speed isn’t that fantastic.&lt;/p&gt;
&lt;h3 id=&#34;pinboard&#34;&gt;Pinboard &lt;a href=&#34;#pinboard&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bookmarks in browser are so old school. Nowadays we have very nice looking services that saves our links and let us use additional features like tags or categories. My choice is Pinboard. It doesn’t look that great like for example Pocket but it’s very fast! Vary fast! This service isn’t free but it doesn’t cost much. I highly recommend to check it if you store endless lists of links in your browser bookmarks.&lt;/p&gt;
&lt;h3 id=&#34;feedly&#34;&gt;Feedly &lt;a href=&#34;#feedly&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My main source of news from web development community. I follow about many blogs and services and all RSS feeds are combined together here - on my Feedly account. This service is well supported by Reeder App (described above).&lt;/p&gt;
&lt;h3 id=&#34;instapaper&#34;&gt;Instapaper &lt;a href=&#34;#instapaper&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I love the minimalism of this app and build in distract free module. Browser extension and iOS app are awesome. Fantastic tool to read longer texts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello there!</title>
      <link>https://pawelgrzybek.com/hello-there/</link>
      <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pawelgrzybek.com/hello-there/</guid>
      <description>&lt;p&gt;I’m so happy to introduce you my new website. It’s not about the fancy cool effects, it is not about shiny design. It’s purely about the content that I would like to share with you.&lt;/p&gt;
&lt;p&gt;After a few months of creating a weekly newsletters for web developers in &lt;a href=&#34;http://www.creare.co.uk/&#34;&gt;company where I currently work&lt;/a&gt; I found out that I enjoy sharing knowledge and be more involved info community of web developers. That was my biggest kick to choose a blogging platform, start writing a content and publish my thoughts.&lt;/p&gt;
&lt;h2 id=&#34;technically-about-this-website&#34;&gt;Technically about this website &lt;a href=&#34;#technically-about-this-website&#34; class=&#34;post__hash&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a static website generated by amazing tool called &lt;del&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;&lt;/del&gt; &lt;a href=&#34;https://pawelgrzybek.com/from-jekyll-to-hugo-from-github-pages-to-netlify/&#34;&gt;Hugo&lt;/a&gt;. It is my first project build on this tool but I love it already. It doesn’t surprise me why it is so popular in geeky crowd. You need to create a few template files, create posts files in &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; format and type one command in your Terminal. Easy like that! Something that makes it even more fantastic is ability to host your website on &lt;del&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;&lt;/del&gt; &lt;a href=&#34;https://pawelgrzybek.com/from-jekyll-to-hugo-from-github-pages-to-netlify/&#34;&gt;Netlify&lt;/a&gt; absolutely for free.&lt;/p&gt;
&lt;p&gt;If you are curious about files structure of source files you can always have a look at &lt;a href=&#34;https://github.com/pawelgrzybek/pawelgrzybek.com&#34;&gt;Github repository&lt;/a&gt;. If you have any further question  feel free to use Disqus that I implemented as my comments platform. Use RSS Feed to stay tuned about new posts.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
